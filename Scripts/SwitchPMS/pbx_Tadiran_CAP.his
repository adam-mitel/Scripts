; Coded For: 6.0.0.0
; Script Version: 50.0.0.1
; ************************************************************************
;
;  This is the HI configuration script for interfacing to an Tadiran
;  telephone exchange.
;
;  Based on PMS for CAP Version 2.XX and later Revision 2 (October 3, 1996)
;
;                                                             pjh-10122007
;
;  Modifications - AU - 17/10/2013
;	* Updated to utilise V50 specific features
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;
; *** Variable definitions
define SendRec             // The record we build to send to the Mitel
define ReceivedRec         // The record we receive from the Mitel
define RecType             // The type of record we receive from the Mitel
define WorkVal			   // General purpose work variable used at regular
						   //  intervals throughout the script.

define cidate
define codate
define UnbarCOS
define BarCOS

define in_BCC
define in_Extension		   // The extension in the record from the Mitel.
define in_Status		   // The status received from the Mitel on MW and RS
						   //  records.

; ************************************************************************
;  INIT
;   Executed before the main processing gets under way to allow variables
;   to be initialised.
:INIT

// OPT: Set these to be the correct room restriction values.
Assign UnbarCOS "01"
Assign BarCOS "00"

OpenPort

exit
; ************************************************************************

; ************************************************************************
;  CallRecord
;   The script is executed from this label when we have a call record to
;   send.
:CallRecord

goto IgnoreRecord
; ************************************************************************

; ************************************************************************
;  RoomStatus
;   The script is executed from this label when we have a room status
;   event to send.
:RoomStatus

goto IgnoreRecord
; ************************************************************************

; ************************************************************************
;  Minibar
;   The script is executed from this label when we have a minibar event
;   to send.
:Minibar

goto IgnoreRecord
; ************************************************************************

; ************************************************************************
;  MessageWaiting
;   The script is executed from this label when we have a message waiting
;   event to send.
:MessageWaiting

goto Finish
; ************************************************************************

; ************************************************************************
;  WakeupCall
;   The script is executed from this label when we have a wakeup call
;   event to send.
:WakeupCall

// Default to clear wakeup.
assign SendRec "68<_EV_ROOMNUMBER:TEXT:10:LJ,SP><_EV_WKTIME:TEXT:4:HHMM>000<#3>"
if "$(_EV_WKACTION)" EQ "SET"
	assign SendRec "68<_EV_ROOMNUMBER:TEXT:10:LJ,SP><_EV_WKTIME:TEXT:4:HHMM>001<#3>"

GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#2>$(SendRec)$(_G_BCC)"

Call SendRecord

goto Finish
; ************************************************************************

; ************************************************************************
;  Checkin
;   The script is executed from this label when we have a check in event
;   to send.
:Checkin

; OPT: To ignore checkins and not send them to the Mitel, uncomment the
;      following line.
//goto IgnoreRecord

Assign cidate "<_EV_EVENTDATE:DATE:8:YYYYMMDD>"
Assign codate "<_EV_EVENTDATE:DATE:8:YYYYMMDD>"

assign SendRec "62<_EV_ROOMNUMBER:TEXT:10:LJ,SP><_EV_EXTNNUMBER:TEXT:8:RJ,SP><UnbarCOS:TEXT:2:LJ,SP><_EV_NAMEDISPLAY:TEXT:20:LJ,SP>        <cidate:TEXT:8:LJ,SP><codate:TEXT:8:LJ,SP><_EV_CILANGUAGEDESC:TEXT:16:LJ,SP><_EV_CILANGUAGECODE:TEXT:2:LJ,SP>                    101<#3>"
GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#2>$(SendRec)$(_G_BCC)"

Call SendRecord

goto Finish
; ************************************************************************

; ************************************************************************
;  Checkout
;   The script is executed from this label when we have a check out event
;   to send.
:Checkout

; OPT: To ignore checkouts and not send them to the Mitel, uncomment the
;      following line.
//goto IgnoreRecord

Assign cidate "<_EV_EVENTDATE:DATE:8:YYYYMMDD>"
Assign codate "<_EV_EVENTDATE:DATE:8:YYYYMMDD>"

assign SendRec "63<_EV_ROOMNUMBER:TEXT:10:LJ,SP>  1<#3>"
GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#2>$(SendRec)$(_G_BCC)"

Call SendRecord

goto Finish
; ************************************************************************

; ************************************************************************
;  ClassOfService
;   The script is executed from this label when we have a class of service
;   event to send.
:ClassOfService

assign WorkVal "0"
if "$(_EV_COSALLOWOUTGOING)" EQ "TRUE"
  assign WorkVal "1"

assign SendRec "72<_EV_EXTNNUMBER:TEXT:8:RJ,SP>$(WorkVal)<#3>"
GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#2>$(SendRec)$(_G_BCC)"

Call SendRecord

goto Finish
; ************************************************************************

; ************************************************************************
;  RoomUpdate
;   The script is executed from this label when we have a room update
;   event to send.
:RoomUpdate

Assign cidate "<_EV_EVENTDATE:DATE:8:YYYYMMDD>"
Assign codate "<_EV_EVENTDATE:DATE:8:YYYYMMDD>"

assign SendRec "65<_EV_ROOMNUMBER:TEXT:10:LJ,SP><_EV_EXTNNUMBER:TEXT:8:RJ,SP>  <_EV_NAMEDISPLAY:TEXT:20:LJ,SP>        <cidate:TEXT:8:LJ,SP><codate:TEXT:8:LJ,SP><_EV_CILANGUAGEDESC:TEXT:16:LJ,SP><_EV_CILANGUAGECODE:TEXT:2:LJ,SP>                    101<#3>"
GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#2>$(SendRec)$(_G_BCC)"

Call SendRecord

goto Finish
; ************************************************************************

; ************************************************************************
;  BudgetLimit
;   The script is executed from this label when we have a budget limit
;   event to send.
:BudgetLimit

goto IgnoreRecord
; ************************************************************************

; ************************************************************************
;  RoomTransfer
;   The script is executed from this label when we have a room transfer
;   event to send.
:RoomTransfer

; OPT: If you do not want room transfer events to be sent to the Mitel
;      uncomment the following line.
//goto IgnoreRecord

assign SendRec "66<_EV_ROOMNUMBER:TEXT:10:LJ,SP><_EV_TRDESTEXTNNUMBER:TEXT:8:RJ,SP><#3>"
GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#2>$(SendRec)$(_G_BCC)"

Call SendRecord

goto Finish
; ************************************************************************

; ************************************************************************
;  ExtraGuest
;   The script is executed from this label when we have an extra guest
;   event to send.
:ExtraGuest

goto IgnoreRecord
; ************************************************************************

; ************************************************************************
;  DoNotDisturb
;   The script is executed from this label when we have a do not disturb
;   event to send.
:DoNotDisturb

goto IgnoreRecord
; ************************************************************************

; ************************************************************************
;  PIN
;   The script is executed from this label when we have a set or clear pin
;   event to send.
:PIN

goto IgnoreRecord
; ************************************************************************

; ************************************************************************
;  DDI
;   The script is executed from this label when we have a set or clear ddi
;   event to send.
:DDI

goto IgnoreRecord
; ************************************************************************

; ************************************************************************
;  ReceiveRecord
;    This section is Called when we have received an ENQ from the PMS
; ************************************************************************
:ReceiveRecord

; We now have to get the record type from the next 2 characters if we get here
:GETRECTYPE

assign _G_IN_RECORDFORMAT ""

; Read the next 2 characters
ReadFromPort 2 2

; Add them to the display record if we receive them
if "$(_PORTCHARS)" NE ""
	assign ReceivedRec "$(ReceivedRec)" "$(_PORTCHARS)"

; Test the record type and set up for the receiving of it.
assign RecType ""

; OPT: Comment these two lines if you want to ignore all incoming room
;      status records.
if "$(_PORTCHARS)" EQ "75"
	call STRECORD

; _G_IN_RECORDFORMAT will have the correct format for the record we are
; receiving.  We now need to read the rest of the record in.

; OPT: We have receive the start of the record and determined its type.  We
;      need to receive the rest of the record and the next line is the amount
;      of time we should allow for it.
StartWaitTimer 10

:READINGREC
; Read the next character
ReadFromPort 1

; Add it to ReceivedRec if there is anything
if "$(_PORTCHARS)" NE ""
	assign ReceivedRec "$(ReceivedRec)" "$(_PORTCHARS)"

; if it is an ETX we have finished
if "$(_PORTCHARS)" EQ "<#3>"
	StartWaitTimer 5
if "$(_PORTCHARS)" EQ "<#3>"
	goto READBCC

; If we timeout, we need to quit
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	goto QUITRECEIVING

; We are still receiving a record so go back.
goto READINGREC

:READBCC

ReadFromPort 1

if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	assign ReceivedRec "$(ReceivedRec)" "<#0>"
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	goto GOTBCC
	
if "$(_PORTCHARS)" NE ""
	assign ReceivedRec "$(ReceivedRec)" "$(_PORTCHARS)"
if "$(_PORTCHARS)" NE ""
	goto GOTBCC

goto READBCC

:GOTBCC

echo Rx: $(ReceivedRec)

; ************************************************************************
;  FINISHEDRECEIVING
;    We now have a complete record, time to process it.
; ************************************************************************
:FINISHEDRECEIVING

; We need to empty the input buffer here.
call FlushInput

; Send the ACK
call SENDACK

; If this record is one we are not interested in, skip the next few lines.
if "$(RecType)" EQ ""
  goto SkipProcessIncoming

; Extract the fields from the record and process them to create the events.
assign _G_IN_RECORD "$(ReceivedRec)"
parseInRecord
if "$(_G_IN_RECORDPARSEERROR)" EQ "TRUE"
	goto ReceiveError

if "$(RecType)" EQ "ST"
	call CreateRSEvent

:SkipProcessIncoming

Return
; ************************************************************************

; ************************************************************************
;  STRECORD
;    Sets up the expected format for the room status record.
:STRECORD
  assign RecType "ST"
  assignasis _G_IN_RECORDFORMAT "<#2>75<in_Extension:TEXT:8:RJ,SP><in_Status:TEXT:2:LJ,SP><#3><in_BCC:TEXT:1:RJ,SP>"
Return
; ************************************************************************

; ************************************************************************
;  CreateRSEvent
;    Creates a room status event.
:CreateRSEvent
  CreateRoomStatus "$(in_Extension)" "$(in_Status)"
Return
; ************************************************************************

; ************************************************************************
;  ReceiveError
;    Sent here when an error is found in the formatting of the record.
; ************************************************************************
:ReceiveError
  Echo Error with Received Record - Record ignored
Return
; ************************************************************************

; ************************************************************************
;  CheckIncoming
;    Execution is periodically carried out from here by the program to
;    check for incoming data during idle times.
; ************************************************************************
:CheckIncoming

; Read a character
ReadFromPort 1

; if it is an STX, add it to the record and call ReceiveRecord
if "$(_PORTCHARS)" EQ "<#2>"
	assign ReceivedRec "<#2>"
if "$(_PORTCHARS)" EQ "<#2>"
	goto ReceiveRecord

if "$(_PORTCHARS)" NE ""
	Echo Rx: $(_PORTCHARS)

; If we got an ENQ then respond with an ACK.
if "$(_PORTCHARS)" EQ "<#5>"
	Echo Tx: <#6>
if "$(_PORTCHARS)" EQ "<#5>"
	Send <#6>

; Release back to the program, we have not received an STX
Exit
; ************************************************************************

; ************************************************************************
;  PeriodicCheck
;    Execution is periodically carried out from here by the program to
;    check to handle periodic events during idle times.
; ************************************************************************
:PeriodicCheck

Exit
; ************************************************************************

; ************************************************************************
;  SendRecord
;   Execution is sent here whenever we have a record in SendRec to send
;   to the Tadiran.
; ************************************************************************
:SendRecord

; OPT: We have sent and ENQ and we need to wait for an ACK in response to it.
;      The parameter on the following line will allow you to change the amount
;      of time we will wait for.
StartWaitTimer 10

; Send the record
Send $(SendRec)
Echo Tx: $(SendRec)

; OPT: We have just sent the record and now need to wait for an ACK to it.
;      The parameter on the following line allows you to set how long we wait
;      for this response.
StartWaitTimer 10

:WAITFORACKTOREC

; sleep to slow the processing down a bit.
Sleep 100

; Read a single character from the port
ReadFromPort 1

if "$(_PORTCHARS)" NE ""
	Echo Rx: $(_PORTCHARS)

; if the received character is an ACK
if "$(_PORTCHARS)" EQ "<#6>"
	Goto GOTACKTOREC

; if the received character is an ACK
if "$(_PORTCHARS)" EQ "<#2>"
	Call ReceiveRecord

; If the wait timeout has expired
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	Goto GOTACKTOREC
;	Goto SendRecord

; We are still waiting for an ACK to the record so go back
Goto WAITFORACKTOREC

; We get to this if we receive an ACK to the record
:GOTACKTOREC

CALL HANDLEOK
Return

; ******************************************************************************
;  HANDLEOK
;    This will flag that the event is processed.

:HANDLEOK
  FLAGPROCESSED OK
RETURN
; ******************************************************************************


; ******************************************************************************
;  IgnoreRecord
;    This will flag that the event is processed and exit the script effectively
;    ignoring the record.

:IgnoreRecord
  FLAGPROCESSED OK
EXIT
; ******************************************************************************


; ******************************************************************************
;  Finish
;    This will end the script.
:Finish
  FLAGPROCESSED OK
EXIT
; ******************************************************************************


; ************************************************************************
;  SENDENQ
;   Sends an Enq (#5) character out of the port and echoes it to the
;   communications display.

:SENDENQ
  Send <#5>
  Echo Tx: <#5>
RETURN
; ************************************************************************


; ************************************************************************
;  SENDACK
;   Sends an Ack (#6) character out of the port and echoes it to the
;   communications display.

:SENDACK
  Send <#6>
  Echo Tx: <#6>
RETURN
; ************************************************************************

; ************************************************************************
;  FLUSHINPUT
;   Will read everything from the serial port until there is nothing
;   more to read.

:FLUSHINPUT

; Read the first character
ReadFromPort 1

; if there isn't one, go to finish
if "$(_PORTCHARS)" EQ ""
	goto FLUSHINPUT_FINISHED

; To get here, there was a character so we need to read the next.
goto FLUSHINPUT

:FLUSHINPUT_FINISHED

RETURN
; ************************************************************************

