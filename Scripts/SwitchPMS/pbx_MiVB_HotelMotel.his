; Coded For: 50.0.0.1
; Script Version: 50.0.1.0
; ************************************************************************
;
;  This is the HI configuration script for processing Mitel Wakeup Logs
;  received from the Hotel Motel port.
;
;                                                              AU-20170510
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;
define ReceivedRec
define RecType
define SendRec
define WorkVal
;
define f_Line
;
define in_Action
define in_Date
define in_Day
define in_Description
define in_Dummy
define in_Extension
define in_Month
define in_MonthText
define in_Time
define in_TimeText
define in_Year
;
; ************************************************************************
;  INIT
;   Called at program start-up.  Gives you the opportunity to initialise
;   any script variables.
:INIT

Exit
; ************************************************************************


; ************************************************************************
;  PORT_OPENED
;   Called when socket is connected. Gives you the opportunity to send
;   any messages to start the connection.
:PORT_OPENED

Exit
; ************************************************************************


; ************************************************************************
;  SHUTDOWN
;   Called at program start-up.  Gives you the opportunity to send a link
;   termination message.
:SHUTDOWN

Exit
; ************************************************************************


; ************************************************************************
;  CallRecord
;   The script is executed from this label when we have a call record to
;   send.
:CallRecord

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomStatus
;   The script is executed from this label when we have a room status
;   event to send.
:RoomStatus

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Minibar
;   The script is executed from this label when we have a minibar event
;   to send.
:Minibar

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   The script is executed from this label when we have a message waiting
;   event to send.
:MessageWaiting

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  WakeupCall
;   The script is executed from this label when we have a wakeup call
;   event to send.
:WakeupCall

Goto IgnoreRecord	
; ************************************************************************


; ************************************************************************
;  Checkin
;   The script is executed from this label when we have a check in event
;   to send.
:Checkin

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Checkout
;   The script is executed from this label when we have a check out event
;   to send.
:Checkout

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   The script is executed from this label when we have a class of service
;   event to send.
:ClassOfService

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   The script is executed from this label when we have a room update
;   event to send.
:RoomUpdate

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   The script is executed from this label when we have a budget limit
;   event to send.
:BudgetLimit

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   The script is executed from this label when we have a room transfer
;   event to send.
:RoomTransfer

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   The script is executed from this label when we have an extra guest
;   event to send.
:ExtraGuest

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   The script is executed from this label when we have a do not disturb
;   event to send.
:DoNotDisturb

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  PIN
;   The script is executed from this label when we have a set or clear pin
;   event to send.
:PIN

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DDI
;   The script is executed from this label when we have a set or clear ddi
;   event to send.
:DDI

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillEnquiry
;   The script is executed from this label when we have a bill enquiry
;   event to send.
:BillEnquiry

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckout
;   The script is executed from this label when we have an express 
;   checkout event to send.
:ExpressCheckout

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillResponse
;   The script is executed from this label when we have a Bill Response 
;   event to send.
:BillResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckoutResponse
;   The script is executed from this label when we have an Express Checkout
;   Response event to send.
:ExpressCheckoutResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  TvRights
;   The script is executed from this label when we have a TV Rights 
;   event to send.
:TvRights

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  CallPackage
;   The script is executed from this label when we have a Call Package 
;   event to send.
:CallPackage

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  GenericPassthrough
;   The script is executed from this label when we have a Generic 
;   Passthrough event to send.
:GenericPassthrough

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  PeriodicCheck
;   The script is executed from this label periodically by the program
:PeriodicCheck

Exit
; ************************************************************************


; ************************************************************************
;  CheckIncoming
;    Execution is periodically carried out from here by the program to
;    check for incoming data during idle times.
:CheckIncoming

	ReadFromPort 1

	if "$(_PORTCHARS)" EQ ""
		Exit

	if "$(_PORTCHARS)" EQ "<#10>"
		Exit
	if "$(_PORTCHARS)" EQ "<#13>"
		Exit

	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(_PORTCHARS)"
	if "$(_PORTCHARS)" NE ""
		Goto ReceiveRecord

Exit
; ************************************************************************


; ************************************************************************
;  ReceiveRecord
;    This label is called when we have a record to receive.
:ReceiveRecord

	StartWaitTimer 5

:ReceiveRecord_ReadTheRest

	ReadFromPort 1 2

	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Goto ReceiveRecord_Timeout

	if "$(_PORTCHARS)" EQ ""
		Goto ReceiveRecord_ReadTheRest

	if "$(_PORTCHARS)" EQ "<#13>"
		Goto ReceiveRecord_GotRecord
	if "$(_PORTCHARS)" EQ "<#13>"
		Goto ReceiveRecord_GotRecord

	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"

	Goto ReceiveRecord_ReadTheRest

:ReceiveRecord_GotRecord

	Echo Rx: $(ReceivedRec)

	Assign _G_IN_RECORDFORMAT ""

//	Calculate if this is line 1 or 2
	ContainsSTR "-Info-" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Call Line1_Format
	if "$(_G_RESULT)" NE "TRUE"
		Call Line2_Format

	Assign _G_IN_RECORD "$(ReceivedRec)"
	ParseInRecord

	if "$(_G_IN_RECORDPARSEERROR)" EQ "TRUE"
		Goto ReceiveRecord_ParseError

//	If it's line 1 process the date and exit for line 2
	if "$(f_Line)" EQ "1"
		Call Line1_Format_MonthConversion
	if "$(f_Line)" EQ "1"
		Exit

//	It's line 2 so process the time
	Call Line2_Format_TimeConversion

//	Now process the record
	Call HandleRecord

//	We are finished with the record clear old variables
	Call ClearVariables

Exit

:ReceiveRecord_Timeout

	Echo Rx: $(ReceivedRec)
	Echo Er: Received an incomplete record.

	Call ClearVariables

Exit

:ReceiveRecord_ParseError

	Echo Er: Error when parsing received record.

	Call ClearVariables

Exit
; ************************************************************************


; ************************************************************************
;  RecordFormats
;    These labels are called when we need to assign the record format for
;    incoming records
:Line1_Format

	AssignAsIs _G_IN_RECORDFORMAT "<in_Year:TEXT:4:LJ,SP>-<in_MonthText:TEXT:3:LJ,SP>-<in_Day:TEXT:2:LJ,SP><in_Dummy:TEXT:69:LJ,SP>"
	Assign f_Line "1"

Return

:Line1_Format_MonthConversion

	Assign in_Month ""

	if "$(in_MonthText)" EQ "JAN"
		Assign in_Month "01"
	if "$(in_MonthText)" EQ "FEB"
		Assign in_Month "02"
	if "$(in_MonthText)" EQ "MAR"
		Assign in_Month "03"
	if "$(in_MonthText)" EQ "APR"
		Assign in_Month "04"
	if "$(in_MonthText)" EQ "MAY"
		Assign in_Month "05"
	if "$(in_MonthText)" EQ "JUN"
		Assign in_Month "06"
	if "$(in_MonthText)" EQ "JUL"
		Assign in_Month "07"
	if "$(in_MonthText)" EQ "AUG"
		Assign in_Month "08"
	if "$(in_MonthText)" EQ "SEP"
		Assign in_Month "09"
	if "$(in_MonthText)" EQ "OCT"
		Assign in_Month "10"
	if "$(in_MonthText)" EQ "NOV"
		Assign in_Month "11"
	if "$(in_MonthText)" EQ "DEC"
		Assign in_Month "12"

	if "$(in_Month)" EQ ""
		Echo Er: Unable to parse Month [$(in_MonthText)]
	if "$(in_Month)" EQ ""
		Return

	AssignAsIs _G_IN_RECORDFORMAT "<in_Date:DATE:8:YYYYMMDD>"
	Assign _G_IN_RECORD "<in_Year:TEXT:4:LJ,SP><in_Month:TEXT:2:LJ,SP><in_Day:TEXT:2:LJ,SP>"
	ParseInRecord

	if "$(_G_IN_RECORDPARSEERROR)" EQ "TRUE"
		Goto ReceiveRecord_ParseError

Return

:Line2_Format

	AssignAsIs _G_IN_RECORDFORMAT "<in_Dummy:TEXT:15:LJ,SP><in_Extension:TEXT:5:LJ,SP><in_TimeText:TEXT:5:LJ,SP>  <in_Description:TEXT:25:LJ,SP> <in_Action:TEXT:7:RJ,SP>"
	Assign f_Line "2"

:Line2_Format_TimeConversion

	if "$(in_TimeText)" EQ ""
		Assign in_Time ""
	if "$(in_TimeText)" EQ ""
		Return

	AssignAsIs _G_IN_RECORDFORMAT "<in_Time:TIME:5:HH:MM>"
	Assign _G_IN_RECORD "<in_TimeText:TEXT:5:LJ,SP>"
	ParseInRecord

Return
; ************************************************************************


; ************************************************************************
;  HandleRecord
;    These labels are called when we need to handle an incoming record
:HandleRecord

	ContainsSTR "Set By Extension" "$(in_Description)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Goto HandleRecord_WakeupSet

	ContainsSTR "Set Failed At Extension" "$(in_Description)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Goto HandleRecord_WakeupSetFailed

	ContainsSTR "Changed By Extension" "$(in_Description)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Goto HandleRecord_WakeupChanged

	ContainsSTR "Cancelled By Extension" "$(in_Description)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Goto HandleRecord_WakeupCanceled

	ContainsSTR "Acknowledged By Extension" "$(in_Description)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Goto HandleRecord_WakeupAcknowledged

	ContainsSTR "No Answer" "$(in_Description)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Goto HandleRecord_WakeupNoAnswer

	ContainsSTR "Busy" "$(in_Description)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Goto HandleRecord_WakeupBusy

	ContainsSTR "Expired" "$(in_Description)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Goto HandleRecord_WakeupExpired

	ContainsSTR "Deleted" "$(in_Description)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Goto HandleRecord_WakeupDeleted

	ContainsSTR "System Error" "$(in_Description)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Goto HandleRecord_WakeupSystemError

Return

:HandleRecord_WakeupSet

	CreateSetWakeup "$(in_Extension)" "" "<in_Time:TIME:4:HHMM>" "<in_Date:DATE:8:YYYYMMDD>"

Return

:HandleRecord_WakeupSetFailed

Return

:HandleRecord_WakeupChanged

	CreateClearAllWakeup "$(in_Extension)" ""
	CreateSetWakeup "$(in_Extension)" "" "<in_Time:TIME:4:HHMM>" "<in_Date:DATE:8:YYYYMMDD>"

Return

:HandleRecord_WakeupCanceled

	if "$(in_Time)" EQ ""
		CreateClearAllWakeup "$(in_Extension)" ""
	if "$(in_Time)" NE ""
		CreateClearWakeup "$(in_Extension)" "" "$(in_Time)" "$(in_Date)"

Return

:HandleRecord_WakeupAcknowledged

	CreateWakeupDelivered "$(in_Extension)" "" "$(in_Date)" "$(in_Time)" "4"

Return

:HandleRecord_WakeupNoAnswer

	CreateWakeupAdvice "$(in_Extension)" "" "$(in_WakeupDate)" "$(in_WakeupTime)" "5"

Return

:HandleRecord_WakeupBusy

	CreateWakeupAdvice "$(in_Extension)" "" "$(in_Date)" "$(in_Time)" "7"

Return

:HandleRecord_WakeupExpired

	CreateWakeupFailed "$(in_Extension)" "" "$(in_Date)" "$(in_Time)" "5"

Return

:HandleRecord_WakeupDeleted

	if "$(in_Time)" EQ ""
		CreateClearAllWakeup "$(in_Extension)" ""
	if "$(in_Time)" NE ""
		CreateClearWakeup "$(in_Extension)" "" "$(in_Time)" "$(in_Date)"

Return

:HandleRecord_WakeupSystemError

	CreateWakeupAdvice "$(in_Extension)" "" "$(in_Date)" "$(in_Time)" "11"

Return
; ************************************************************************


; ************************************************************************
;  ClearVariables
;    This label is called when we need to clear down old variables
:ClearVariables

	Assign in_Action ""
	Assign in_Date ""
	Assign in_Day ""
	Assign in_Description ""
	Assign in_Dummy ""
	Assign in_Extension ""
	Assign in_Month ""
	Assign in_MonthText ""
	Assign in_Time ""
	Assign in_TimeText ""
	Assign in_Year ""

Return
; ************************************************************************


; ************************************************************************
;  SendRecord
;    This label is called when we have a record to send
:SendRecord

Return
; ************************************************************************


; ************************************************************************
;  HandleOKAndExit
;    This will flag that the event is processed and exit the script.
:HandleOKAndExit

	FlagProcessed OK

Exit
; ************************************************************************


; ************************************************************************
;  IgnoreRecord
;    This will flag that the event is processed and exit the script effectively
;    ignoring the record.
:IgnoreRecord

	FlagProcessed OK

Exit
; ************************************************************************
