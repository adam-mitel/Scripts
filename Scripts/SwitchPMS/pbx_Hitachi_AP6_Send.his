; Coded For: 6.0.0.0
; Script Version: 50.0.0.1
; ************************************************************************
;
;  This is the HI configuration script for an interface to a Hitachi PBX
;  using their AP6 protocol.
;
;  We connect to the Hitachi as Client via TCP port 8001.
;
;                                                              AU-20210120
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;
define ReceivedRec
define RecType
define SendRec
define WorkVal
;
define f_TransactionNumber
;
define g_GuestName
define g_VIP
define g_LangCode
;
define in_TransactionNumber
;
; ************************************************************************
;  INIT
;   Executed before the main processing gets under way to allow variables
;   to be initialised.
:INIT

	CreateAutoIncNumber TransID 1 9999 1

// 	OPT: If we are using Serial uncomment the next line.
;	OpenPort

Exit
; ************************************************************************


; ************************************************************************
;  PortOpened
;   The script is called once the IP connection is opened
:PORT_OPENED

Exit
; ************************************************************************


; ************************************************************************
;  CallRecord
;   This label is executed when we have a call record event to send.
:CallRecord

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomStatus
;   This label is executed when we have a room status event to send.
:RoomStatus

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Minibar
;   This label is executed when we have a minibar event to send.
:Minibar

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   This label is executed when we have a message waiting event to send.
:MessageWaiting

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  WakeupCall
;   This label is executed when we have a wakeup call event to send.
:WakeupCall

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Checkin
;   This label is executed when we have a checkin event to send.
:Checkin

//	Set the Name
	Assign g_GuestName "<_EV_NAMEDISPLAY:TEXT:255:AN>"

//	Set the language
	Assign g_LangCode "<_EV_LANGCODE:TEXT:1:LJ,SP>"
	if "<_EV_LANGCODE:TEXT:1:LJ,SP>" LT "0"
		Assign g_LangCode "1"
	if "<_EV_LANGCODE:TEXT:1:LJ,SP>" GT "9"
		Assign g_LangCode "1"

//	Set the VIP Code
	Assign g_VIP "<_EV_CIVIP:TEXT:1:LJ,ZP>"
	if "<_EV_CIVIP:TEXT:1:LJ,ZP>" LT "0"
		Assign g_VIP "0"
	if "<_EV_CIVIP:TEXT:1:LJ,ZP>" GT "9"
		Assign g_VIP "0"

	Assign SendRec "IN<_EV_EXTNNUMBER:TEXT:6:RJ,SP>000<_EV_CIGUESTGROUP:TEXT:6:RJ,ZP>11<g_LangCode:TEXT:1:LJ,SP><g_VIP:TEXT:1:LJ,SP><g_GuestName:TEXT:15:LJ,SP>               000000000<#3>"
	GetNextAutoIncNumber TransID
	Assign f_TransactionNumber "<_G_RESULT:NUMBER:4:RJ,ZP>"
	Assign SendRec "<#2>HDT  <f_TransactionNumber:NUMBER:4:RJ,ZP>$(SendRec)"
	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkout
;   This label is executed when we have a checkout event to send.
:Checkout

	Assign SendRec "CO<_EV_EXTNNUMBER:TEXT:6:RJ,SP><#3>"
	GetNextAutoIncNumber TransID
	Assign f_TransactionNumber "<_G_RESULT:NUMBER:4:RJ,ZP>"
	Assign SendRec "<#2>HDT  <f_TransactionNumber:NUMBER:4:RJ,ZP>$(SendRec)"
	Call SendRecord


Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   This label is executed when we have a class of service event to send.
:ClassOfService

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   This label is executed when we have a room update event to send.
:RoomUpdate

//	Set the Name
	Assign g_GuestName "<_EV_NAMEDISPLAY:TEXT:255:AN>"

//	Set the language
	Assign g_LangCode "<_EV_LANGCODE:TEXT:1:LJ,SP>"
	if "<_EV_LANGCODE:TEXT:1:LJ,SP>" LT "0"
		Assign g_LangCode "1"
	if "<_EV_LANGCODE:TEXT:1:LJ,SP>" GT "9"
		Assign g_LangCode "1"

//	Set the VIP Code
	Assign g_VIP "<_EV_CIVIP:TEXT:1:LJ,ZP>"
	if "<_EV_CIVIP:TEXT:1:LJ,ZP>" LT "0"
		Assign g_VIP "0"
	if "<_EV_CIVIP:TEXT:1:LJ,ZP>" GT "9"
		Assign g_VIP "0"

	Assign SendRec "RP<_EV_EXTNNUMBER:TEXT:6:RJ,SP>000<_EV_CIGUESTGROUP:TEXT:6:RJ,ZP>11<g_LangCode:TEXT:1:LJ,SP><g_VIP:TEXT:1:LJ,SP><g_GuestName:TEXT:15:LJ,SP>               000000000<#3>"
	GetNextAutoIncNumber TransID
	Assign f_TransactionNumber "<_G_RESULT:NUMBER:4:RJ,ZP>"
	Assign SendRec "<#2>HDT  <f_TransactionNumber:NUMBER:4:RJ,ZP>$(SendRec)"
	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   This label is executed when we have a budget limit event to send.
:BudgetLimit

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   This label is executed when we have a room transfer event to send.
:RoomTransfer

	Assign SendRec "RC<_EV_EXTNNUMBER:TEXT:6:RJ,SP><_EV_TRDESTEXTNNUMBER:TEXT:6:RJ,SP><#3>"
	GetNextAutoIncNumber TransID
	Assign f_TransactionNumber "<_G_RESULT:NUMBER:4:RJ,ZP>"
	Assign SendRec "<#2>HDT  <f_TransactionNumber:NUMBER:4:RJ,ZP>$(SendRec)"
	Call SendRecord


Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   This label is executed when we have an extra guest event to send.
:ExtraGuest

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   This label is executed when we have a do not disturb event to send.
:DoNotDisturb

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  PIN
;   This label is executed when we have a pin event to send.
:PIN

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DDI
;   This label is executed when we have a ddi event to send.
:DDI

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  GuestInfo
;   This label is executed when we have a guest info event to send.
:GuestInfo

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillEnquiry
;   This label is executed when we have a bill enquiry event to send.
:BillEnquiry

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckout
;   This label is executed when we have an express checkout event to send.
:ExpressCheckout

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillResponse
;   This label is executed when we have a bill response event to send.
:BillResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckoutResponse
;   This label is executed when we have an express checkout response event
;   to send.
:ExpressCheckoutResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  TvRights
;   This label is executed when we have a tv rights event to send.
:TvRights

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  CallPackage
;   This label is executed when we have a call package event to send.
:CallPackage

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  GenericPassthrough
;   This label is executed when we have a generic passthrough event to send.
:GenericPassthrough

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  CheckIncoming
;    Execution is periodically carried out from here by the program to
;    check for incoming data during idle times.
:CheckIncoming

//	Read a character
	ReadFromPort 1

//	If there is a character that we're not expecting, echo it.
	if "$(_PORTCHARS)" NE ""
		Echo Rx: $(_PORTCHARS)

Exit
; ************************************************************************
	

; ************************************************************************
;  ReceiveRecord
;    This label is Called when we have received an ENQ from the PMS
:ReceiveRecord

Exit
; ************************************************************************


; ************************************************************************
;  SendRecord
;   Execution is sent here whenever we have a record in SendRec to send
;   to the Mitel.
; ************************************************************************
:SendRecord

//	Send the Record
	Send $(SendRec)
	Echo Tx: $(SendRec)

//	Start a Wait Timer for the ACK to our Sent Record
	StartWaitTimer 10

:SendRecord_WaitForSTX

//	Sleep to slow the processing down a little.
	Sleep 100

//	Read a Character
	ReadFromPort 1

//	If it is an STX, read the rest of the record
	if "$(_PORTCHARS)" EQ "<#2>"
		Assign ReceivedRec "<#2>"
	if "$(_PORTCHARS)" EQ "<#2>"
		Goto SendRecord_GotSTX

//	If the Timeout has expired, quit
	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Exit

	if "$(_PORTCHARS)" NE ""
		Echo Rx: $(_PORTCHARS)

//	We are still waiting for an ACK to the record so go back
	Goto SendRecord_WaitForSTX

:SendRecord_GotSTX

	ReadFromPort 1 1

//	If it isn't blank add it to the ReceivedRec
	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"

//	If it is an ETX we have finished
	if "$(_PORTCHARS)" EQ "<#3>"
		Echo Rx: $(ReceivedRec)
	if "$(_PORTCHARS)" EQ "<#3>"
		Goto SendRecord_GotACK

//	If the Timer Expires we need to quit.
	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Exit

//	Loop until we get an ETX or timeout
	Goto SendRecord_GotSTX

:SendRecord_GotACK

    AssignAsIs _G_IN_RECORDFORMAT "<#2>HAK  <in_TransactionNumber:TEXT:4:LJ,SP><#3>"
	Assign _G_IN_RECORD "$(ReceivedRec)"
	parseInRecord

	if "$(in_TransactionNumber)" NE "$(f_TransactionNumber)"
		Echo Er: ACK for wrong record. Expecting ACK for "$(f_TransactionNumber)" got "$(in_TransactionNumber)"
	if "$(in_TransactionNumber)" NE "$(f_TransactionNumber)"
		Exit

Return
; ************************************************************************


; ************************************************************************
;  HandleOKAndExit
;    This will flag that the event is processed and Exit.
:HandleOKAndExit

	FLAGPROCESSED OK

Exit
; ************************************************************************


; ************************************************************************
;  IgnoreRecord
;    This will flag that the event is processed and exit the script
;    ignoring the record.
:IgnoreRecord

	FLAGPROCESSED OK

Exit
; ************************************************************************