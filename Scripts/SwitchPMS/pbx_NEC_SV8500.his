; Coded For: 50.0.0.1
; Script Version: 50.0.6.0
; ************************************************************************
;
;  This is the HI configuration script for interfacing to either an
;  NEC SV8300 or an SV8500.
;
;                                                              AU-20100201
;
;  Modifications - AU - 03/06/2015 - 50.0.6.0
;	* Added support for Database Swap request from the PBX. If we have not
;	  processed an event it will use extension 9999 for the GenericPassthrough
;	  event
;
;  Modifications - AU - 24/09/2014 - 50.0.5.0
;	* Changed Room Transfer to always use Checkout then Checkin
;	* Modified default setting s_LanguageBeforeName default to "NO"
;
;  Modifications - AU - 28/08/2014 - 50.0.4.0
;	* Added processing for DDI responses
;	* Removed setting for s_DDI and moved to Extension Facilities
;	* Removed Language Translations with logic to only send numbers
;
;  Modifications - AU - 10/11/2013 - 50.0.3.0
;	* Modified incoming Room Status events to strip any * or # characters which
;	  was causing our program to crash
;	* Modified s_ReverseMaidStatus default to FALSE as NEC have improved their
;	  Room Status capabilities
;
;  Modifications - AU - 21/10/2013 - 50.0.2.0
;	* Added option for Minibar events. If the Data Entry record sends Item*Quantity
;	  then we will send itemised to Opera. If it does not contain a * then we will
;	  send the value as a total charge.
;	* Resolved issue with creating Message Waiting events
;	* Added VIP code logic to Checkin, Room Update and Room Transfer
;
;  Modifications - AU - 17/10/2013 - 50.0.1.0
;	* Updated to utilise V50 specific features
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;
define ReceivedRec
define RecType
define SendRec
define WorkVal
;
define EquipNo
;
define f_LastSeqNoSent
define f_ReplyNo
;
define g_DisplayLang
define g_GuestName
define g_LangCode
define g_VIP
;
define in_DataEntry
define in_DDINumber
define in_DDIResult
define in_EquipNo
define in_Extn
define in_FeatureCode
define in_FunctionCode
define in_Item
define in_LineEquipNo
define in_MaidID
define in_MsgCounter
define in_Quantity
define in_SeqNo
define in_Status
define in_TextID
define in_WakeupTime
define in_WakeupResult
;
define s_LanguageBeforeName
define s_MessageWaiting
define s_Minibar
define s_ReverseMaidStatus
define s_Wakeups
;
; ************************************************************************
;  INIT
;   This label is executed when the program starts up.
:INIT

//	OPT: Set to "ON" or "OFF" depending on whether we want to prefix
//	     the Guest Names with their respective Language Code.
	Assign s_LanguageBeforeName "OFF"

//	OPT: Set to "ON" or "OFF" depending on whether we want to send
//	     Message Waiting commands.
	Assign s_MessageWaiting "OFF"

//	OPT: Set to "ON" or "OFF" depending on whether we want to create
//	     Minibar commands.
	Assign s_Minibar "OFF"

//	OPT: Set to "ON" or "OFF" depending on whether we want to send
//	     Wakeup commands.
	Assign s_Wakeups "OFF"

//	OPT: If the Hotel requires more than 4 different types of Room Status
//	     then this will need to be set to TRUE, and the PBX engineer will
//	     need to use the MaidID entry as the status.  Else, set to FALSE.
	Assign s_ReverseMaidStatus "FALSE"

//	OPT: Set this value to the Equipment number configured on the PBX
//	     for the PMS. This is normally fixed to "0" so should not need
//	     changing.
	Assign EquipNo "0"

	CreateAutoIncNumber SeqNo 0 199 0

Exit
; ************************************************************************


; ************************************************************************
;  PORT_OPENED
;   This label is executed when an IP connection is established.
:PORT_OPENED

//	Build the Base Record
	Assign SendRec "<#2>1!L7007F  <#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

Exit
; ************************************************************************


; ************************************************************************
;  CallRecord
;   This label is executed when we have a call record to send.
:CallRecord

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomStatus
;   This label is executed when we have a room status event to send.
:RoomStatus

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Minibar
;   This label is executed when we have a minibar event to send.
:Minibar

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   This label is executed when we have a message waiting event to send.
:MessageWaiting

	if "$(s_MessageWaiting)" EQ "OFF"
		Goto IgnoreRecord

//	Assign WorkVal to 0 or 1 dependant on the Lamp State
	Assign WorkVal "0"
	if "$(_EV_MWSTATE)" EQ "TRUE"
		Assign WorkVal "1"

//	Build the Base Record
	Assign SendRec "<#2>1!L53151<_EV_EXTNNUMBER:TEXT:6:LJ,SP>$(WorkVal)000<#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  WakeupCall
;   This label is executed when we have a wakeup call event to send.
:WakeupCall

	if "$(s_Wakeups)" EQ "OFF"
		Goto IgnoreRecord

//	Check the action and perform the relevant command.
	if "$(_EV_WKACTION)" EQ "CLEAR"
		Goto WK_CLEAR
	if "$(_EV_WKACTION)" EQ "CLEARALL"
		Goto WK_CLEAR
	if "$(_EV_WKACTION)" EQ "SET"
		Goto WK_SET

	Echo If: Unsupported WKACTION: "$(_EV_WKACTION)".
	Goto IgnoreRecord

:WK_Clear

//	Build the Base Record
	Assign SendRec "<#2>1!L19165<_EV_EXTNNUMBER:TEXT:6:LJ,SP>    5<#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

	Goto WK_DONE

:WK_Set

//	Build the Base Record
	Assign SendRec "<#2>1!L19164<_EV_EXTNNUMBER:TEXT:6:LJ,SP><_EV_WKTIME:TIME:4:HHMM>4<#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

:WK_Done

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkin
;   This label is executed when we have a check in event to send.
:Checkin

//	Define the Language Display
	Assign g_DisplayLang "<_EV_CILANGCODE:TEXT:2:RJ>"

//	Define the Language Code
	Assign g_LangCode "<_EV_LANGCODE:TEXT:1:LJ,ZP>"
	if "$(g_LangCode)" GT "9"
		Assign g_LangCode "0"

	Assign g_GuestName "<_EV_NAMEDISPLAY:TEXT:16:AN,LJ,SP>"
	if "$(s_LanguageBeforeName)" EQ "ON"
		Assign g_GuestName "<g_DisplayLang:TEXT:2:LJ,SP> <_EV_NAMEDISPLAY:TEXT:13:AN,LJ,SP>"

	Assign g_VIP "0"
	if "$(_EV_CIVIP)" NE "0"
		Assign g_VIP "1"
	if "$(_EV_CIVIP)" EQ ""
		Assign g_VIP "0"

//	Build the Base Record
	Assign SendRec "<#2>1!L56461<_EV_EXTNNUMBER:TEXT:6:LJ,SP>      101<g_VIP:TEXT:1:LJ,ZP><g_LangCode:TEXT:1:LJ,ZP><g_GuestName:TEXT:16:AN,LJ,SP>        <#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkout
;   This label is executed when we have a check out event to send.
:Checkout

//	Build the Base Record
	Assign SendRec "<#2>1!L56142<_EV_EXTNNUMBER:TEXT:6:LJ,SP>030<#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   This label is executed when we have a class of service event to send.
:ClassOfService

	Assign WorkVal "1"
	if "$(_EV_COSALLOWOUTGOING)" EQ "TRUE"
		Assign WorkVal "0"

//	Build the Base Record
	Assign SendRec "<#2>1!L15141<_EV_EXTNNUMBER:TEXT:6:LJ,SP><WorkVal:TEXT:1:LJ,ZP>  <#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   This label is executed when we have a room update event to send.
:RoomUpdate

//	Define the Language Display
	Assign g_DisplayLang "<_EV_RULANGCODE:TEXT:2:RJ>"

//	Define the Language Code
	Assign g_LangCode "<_EV_LANGCODE:TEXT:1:LJ,ZP>"
	if "$(g_LangCode)" GT "9"
		Assign g_LangCode "0"

	Assign g_GuestName "<_EV_NAMEDISPLAY:TEXT:16:AN,LJ,SP>"
	if "$(s_LanguageBeforeName)" EQ "ON"
		Assign g_GuestName "<g_DisplayLang:TEXT:2:LJ,SP> <_EV_NAMEDISPLAY:TEXT:13:AN,LJ,SP>"

	Assign g_VIP "0"
	if "$(_EV_RUVIP)" NE "0"
		Assign g_VIP "1"
	if "$(_EV_RUVIP)" EQ ""
		Assign g_VIP "0"

//	Build the Base Record
	Assign SendRec "<#2>1!L61461<_EV_EXTNNUMBER:TEXT:6:LJ,SP>      101<g_VIP:TEXT:1:LJ,ZP><g_LangCode:TEXT:1:LJ,ZP><g_GuestName:TEXT:16:AN,LJ,SP>        <#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   This label is executed when we have a room transfer event to send.
:RoomTransfer

//	Test the Source Extension
	if "$(_EV_EXTNNUMBER)" EQ ""
		Echo Er: Blank Source Extension during Room Transfer Event $(_EV_ID); Skipping Checkout.
	if "$(_EV_EXTNNUMBER)" EQ ""
		Goto TR_SkipCheckout

//	Checkout the Source Extension

//	Build the Base Record
	Assign SendRec "<#2>1!L56142<_EV_EXTNNUMBER:TEXT:6:LJ,SP>030<#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

:TR_SkipCheckout

//	Test the Destination Extension
	if "$(_EV_TRDESTEXTNNUMBER)" EQ ""
		Echo Er: Blank Source Extension during Room Transfer Event $(_EV_ID); Skipping Checkout.
	if "$(_EV_TRDESTEXTNNUMBER)" EQ ""
		Goto TR_SkipCheckin

//	Define the Language Display
	Assign g_DisplayLang "<_EV_LANGCODE:TEXT:2:RJ>"

//	Define the Language Code
	Assign g_LangCode "<_EV_LANGCODE:TEXT:1:LJ,ZP>"
	if "$(g_LangCode)" GT "9"
		Assign g_LangCode "0"

	Assign g_GuestName "<_EV_NAMEDISPLAY:TEXT:16:AN,LJ,SP>"
	if "$(s_LanguageBeforeName)" EQ "ON"
		Assign g_GuestName "<g_DisplayLang:TEXT:2:LJ,SP> <_EV_NAMEDISPLAY:TEXT:13:AN,LJ,SP>"

	Assign g_VIP "0"
	if "$(_EV_TRVIP)" NE "0"
		Assign g_VIP "1"
	if "$(_EV_TRVIP)" EQ ""
		Assign g_VIP "0"

//	Build the Base Record
	Assign SendRec "<#2>1!L56461<_EV_TRDESTEXTNNUMBER:TEXT:6:LJ,SP>      101<g_VIP:TEXT:1:LJ,ZP><g_LangCode:TEXT:1:LJ,ZP><g_GuestName:TEXT:16:AN,LJ,SP>        <#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

:TR_SkipCheckin

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   This label is executed when we have a budget limit event to send.
:BudgetLimit

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   This label is executed when we have an extra guest event to send.
:ExtraGuest

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   This label is executed when we have a do not disturb event to send.
:DoNotDisturb

//	Check if the extension is allowed to make outgoing calls
	Assign WorkVal "1"
	if "$(_EV_ALLOWOUTGOING)" EQ "1"
		Assign WorkVal "0"

	if "$(_EV_DNDACTION)" EQ "DONOTDISTURB"
		Assign WorkVal "$(WorkVal)" + 5

//	Build the Base Record
	Assign SendRec "<#2>1!L15141<_EV_EXTNNUMBER:TEXT:6:LJ,SP>$(WorkVal)  <#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
  	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  PIN
;   This label is executed when we have a pin event to send.
:PIN

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DDI
;   This label is executed when we have a DDI event to send.
:DDI

	ContainsStr "DDI" "<_EV_EXTNFACILITIES:TEXT:255:UC>" "FALSE"
	if "$(_G_RESULT)" NE "TRUE"
		Goto IgnoreRecord

	if "$(_EV_DDIACTION)" EQ "SET"
		Goto DDI_Set

	if "$(_EV_DDIACTION)" EQ "CLEAR"
		Goto DDI_Clear

	Echo If: Unsupported DDIACTION: "$(_EV_DDIACTION)".
	Goto IgnoreRecord

:DDI_Set

//	Build the Base Record
	Assign SendRec "<#2>1!L62217<_EV_EXTNNUMBER:TEXT:6:LJ,SP><_EV_DDI:TEXT:8:LJ,SP>4 <#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

	Goto DDI_Done

:DDI_Clear

//	Build the Base Record
	Assign SendRec "<#2>1!L62138<_EV_EXTNNUMBER:TEXT:6:LJ,SP>4 <#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

	Goto DDI_Done

:DDI_Done

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  GuestInfo
;   This label is executed when we have a Guest Information event to send.
:GuestInfo

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillEnquiry
;   This label is executed when we have a Bill Enquiry event to send.
:BillEnquiry

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckout
;   This label is executed when we have an Express Checkout event to send.
:ExpressCheckout

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillResponse
;   This label is executed when we have a Bill Response event to send.
:BillResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckoutResponse
;   This label is executed when we have an Express Checkout Response
;   event to send.
:ExpressCheckoutResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  TVRights
;   This label is executed when we have a Television Rights event to send.
:TVRights

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  CallPackage
;   This label is executed when we have a Call Package event to send.
:CallPackage

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  GenericPassthrough
;   This label is executed when we have a Generic Passthrough
;   event to send.
:GenericPassthrough

	if "$(_EV_GPTMSGTYPE)" EQ "DatabaseSwap"
		Goto GenericPassthrough_DatabaseSwap

	Goto IgnoreRecord

:GenericPassthrough_DatabaseSwap

	if "$(_EV_GPTCFGFIELD_1)" EQ "Request"
		Goto IgnoreRecord

	Assign SendRec ""
//	Build the Base Record for Database Swap Start/End
	if "$(_EV_GPTCFGFIELD_1)" EQ "Start"
		Assign SendRec "<#2>1!L70073  <#3>"
	if "$(_EV_GPTCFGFIELD_1)" EQ "End"
		Assign SendRec "<#2>1!L70074  <#3>"

	if "$(SendRec)" EQ ""
		Goto IgnoreRecord

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  PeriodicCheck
;   This label is executed periodically by the program.
:PeriodicCheck

//	Build the Base Record
	Assign SendRec "<#2>1!L7007F  <#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

Exit
; ************************************************************************


; ************************************************************************
;  CheckIncoming
;   This label is executed periodically by the program during idle times.
:CheckIncoming

	ReadFromPort 1

	if "$(_PORTCHARS)" EQ ""
		Exit

	if "$(_PORTCHARS)" EQ "2"
		Assign ReceivedRec "2"
	if "$(_PORTCHARS)" EQ "2"
		Goto ReceiveRecord

	if "$(_PORTCHARS)" EQ "6"
		Assign ReceivedRec "6"
	if "$(_PORTCHARS)" EQ "6"
		Goto ReceiveConnectionRelease

	Echo Rx: $(_PORTCHARS)

Exit
; ************************************************************************


; ************************************************************************
;  ReceiveConnectionRelease
;   This label is executed when we receive a "6" character.
:ReceiveConnectionRelease

	StartWaitTimer 10

:RCR_Start

	ReadFromPort 4 2

	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Echo Er: Failed to read Connection Release Record - Closing the Connection
	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Goto RCR_ResetConnection

	if "$(_PORTCHARS)" EQ ""
		Goto RCR_Start

	Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"

	Echo Rx: $(ReceivedRec)

	Echo If: Received connection release - Closing the Connection

:RCR_ResetConnection

	ClosePort
	Sleep 3000
	OpenPort

Goto PORT_OPENED
; ************************************************************************


; ************************************************************************
;  ReceiveRecord
;   This label is executed when we have received a "2" from the PBX.
:ReceiveRecord

	Assign RecType ""
	StartWaitTimer 2

:RR_WaitForSTX

	ReadFromPort 1

	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Goto RR_TimeoutWaitingForSTX

	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"

	if "$(_PORTCHARS)" EQ "<#2>"
		Goto RR_GotSTX

	Goto RR_WaitForSTX

:RR_GotSTX

//	The next 3 characters should be System Address, Unit Address and Entry Index
	ReadFromPort 3 2

	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"

	if "$(_PORTCHARS)" EQ ""
		Goto RR_GotSTX

:RR_ReadFeatureCode

//	The next 2 characters should be the feature code
	ReadFromPort 2 2

	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"
	if "($_PORTCHARS)" NE ""
		Assign in_FeatureCode "$(_PORTCHARS)"

:RR_ReadMessageCount

//	The next 2 characters should be the Message Counter
	ReadFromPort 2 2

	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"
	if "($_PORTCHARS)" NE ""
	Assign in_MsgCounter "$(_PORTCHARS)"

:RR_ReadFunctionCode

//	The next character should be the Function Code
	ReadFromPort 1 1

	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"
	if "($_PORTCHARS)" NE ""
		Assign in_FunctionCode "$(_PORTCHARS)"

//	Start a Wait Timer for the rest of the Record
	StartWaitTimer 10

:RR_ContinueReceiving

	ReadFromPort 1

	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Goto RR_TimeoutReceiving

	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"

	if "$(_PORTCHARS)" EQ "<#3>"    
		Goto RR_ReadFinished

	Goto RR_ContinueReceiving

:RR_TimeoutReceiving

	Echo Rx: $(ReceivedRec)
	Echo Er: Timed out while receiving record.  Record is incomplete.

Exit

:RR_ReadFinished

//	We now need to process the complete record
	if "$(in_FeatureCode)" EQ "11"
		Call MAIDSTATUS_GUESTROOM
	if "$(in_FeatureCode)" EQ "12"
		Call MAIDSTATUS_PREDEFINED
	if "$(in_FeatureCode)" EQ "19"
		Call WAKEUP_RECORD
	if "$(in_FeatureCode)" EQ "53"
		Call MW_RECORD
	if "$(in_FeatureCode)" EQ "59"
		Call DATAENTRY_RECORD
	if "$(in_FeatureCode)" EQ "62"
		Call DDI_RECORD
	if "$(in_FeatureCode)" EQ "70"
		Call STATUS_RECORD

	Echo Rx: $(ReceivedRec)

//	We now have the RecType, if we are not interested in it, Skip Processing
	if "$(RecType)" EQ ""
		Goto RR_SkipProcessIncoming

	Echo Rectype: "$(RecType)"

	Assign _G_IN_RECORD "$(ReceivedRec)"
	ParseInRecord

	if "$(_G_IN_RECORDPARSEERROR)" EQ "TRUE"
		Call ReceiveError

	if "$(RecType)" EQ "RS"
		Call HandleMaidStatus
	if "$(RecType)" EQ "MW"
		Call HandleMessageWaiting
	if "$(RecType)" EQ "WK"
		Call HandleWakeup
	if "$(RecType)" EQ "DE"
		Call HandleDataEntry
	if "$(RecType)" EQ "DDI"
		Call HandleDDI
	if "$(RecType)" EQ "ST"
		Call HandleStatus

:RR_SkipProcessIncoming

Exit
; ************************************************************************


; ************************************************************************
;  ReceiveError
;    This label is executed when we timeout waiting for an STX.
:RR_TimeoutWaitingForSTX

	Echo Er: Timeout waiting for STX while reading record.
	Echo Er: Received '$(ReceivedRec)'

Return
; ************************************************************************


; ************************************************************************
;  ReceiveError
;    This label is executed when we have an error while parsing a record.
:ReceiveError

	Echo Er: Error with Received Record - Record ignored
	Echo Er: Received '$(ReceivedRec)'

Return
; ************************************************************************


; ************************************************************************
;  MAIDSTATUS_GUESTROOM
;   Set up for receiving a Maid Status event originating from a guest
;   room.
:MAIDSTATUS_GUESTROOM

	Assign RecType "RS"

	if "$(s_ReverseMaidStatus)" EQ "TRUE"
		Goto MSG_ReverseMaidStatus

	AssignAsIs _G_IN_RECORDFORMAT "<in_TextID:TEXT:1:LJ,SP><in_EquipNo:TEXT:1:RJ,ZP><in_SeqNo:TEXT:3:RJ,ZP><#2>1!L1117<in_Status:TEXT:1:LJ,SP><in_Extn:TEXT:6:LJ,SP><in_MaidID:TEXT:6:LJ,SP><#3>"

Return

:MSG_ReverseMaidStatus

	AssignAsIs _G_IN_RECORDFORMAT "<in_TextID:TEXT:1:LJ,SP><in_EquipNo:TEXT:1:RJ,ZP><in_SeqNo:TEXT:3:RJ,ZP><#2>1!L1117<in_MaidID:TEXT:1:LJ,SP><in_Extn:TEXT:6:LJ,SP><in_Status:TEXT:6:LJ,SP><#3>"

Return
; ************************************************************************


; ************************************************************************
;  MAIDSTATUS_PREDEFINED
;   Set up for receiving a Maid Status event originating from a front
;   desk console.
:MAIDSTATUS_PREDEFINED

	Assign RecType "RS"

	if "$(s_ReverseMaidStatus)" EQ "TRUE"
		Goto MSP_ReverseMaidStatus

	AssignAsIs _G_IN_RECORDFORMAT "<in_TextID:TEXT:1:LJ,SP><in_EquipNo:TEXT:1:RJ,SP><in_SeqNo:TEXT:3:RJ,ZP><#2>1!L1217<in_Status:TEXT:1:LJ,SP><in_Extn:TEXT:6:LJ,SP><in_MaidID:TEXT:2:LJ,SP><#3>"

Return

:MSP_ReverseMaidStatus

	AssignAsIs _G_IN_RECORDFORMAT "<in_TextID:TEXT:1:LJ,SP><in_EquipNo:TEXT:1:RJ,SP><in_SeqNo:TEXT:3:RJ,ZP><#2>1!L1217<in_MaidID:TEXT:1:LJ,SP><in_Extn:TEXT:6:LJ,SP><in_Status:TEXT:6:LJ,SP><#3>"

Return
; ************************************************************************


; ************************************************************************
;  MW_RECORD
;   Set up for receiving a Message Waiting event from the PBX.
:MW_RECORD

	Assign RecType "MW"

	AssignAsIs _G_IN_RECORDFORMAT "<in_TextID:TEXT:1:LJ,SP><in_EquipNo:TEXT:1:RJ,SP><in_SeqNo:TEXT:3:RJ,ZP><#2>1!L5311<in_Status:TEXT:1:LJ,SP><in_Extn:TEXT:6:LJ,SP><#3>"

Return
; ************************************************************************


; ************************************************************************
;  WAKEUP_RECORD
;   Set up for receiving a Wakeup record
:WAKEUP_RECORD

	Assign RecType "WK"

	AssignAsIs _G_IN_RECORDFORMAT "<in_TextID:TEXT:1:LJ,SP><in_EquipNo:TEXT:1:RJ,SP><in_SeqNo:TEXT:3:RJ,ZP><#2>1!L1916<in_Status:TEXT:1:LJ,SP><in_Extn:TEXT:6:LJ,SP><in_WakeupTime:TEXT:4:LJ,SP><in_WakeupResult:TEXT:1:LJ,ZP><#3>"

Return
; ************************************************************************


; ************************************************************************
;  DATAENTRY_RECORD
;   Set up for receiving a Direct Data Entry Record
:DATAENTRY_RECORD

	Assign RecType "DE"

	Assign in_Item ""
	Assign in_Quantity ""

	ContainsSTR "*" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<in_TextID:TEXT:1:LJ,SP><in_EquipNo:TEXT:1:RJ,SP><in_SeqNo:TEXT:3:RJ,ZP><#2>1!L59471<in_Extn:TEXT:6:LJ,SP><in_Item:TEXT:5:>*<in_Quantity:TEXT:5:>  <in_LineEquipNo:TEXT:6:LJ,SP><#3>"
	if "$(_G_RESULT)" NE "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<in_TextID:TEXT:1:LJ,SP><in_EquipNo:TEXT:1:RJ,SP><in_SeqNo:TEXT:3:RJ,ZP><#2>1!L59471<in_Extn:TEXT:6:LJ,SP><in_DataEntry:TEXT:30:LJ,SP><in_LineEquipNo:TEXT:6:LJ,SP><#3>"

Return
; ************************************************************************


; ************************************************************************
;  DDI_RECORD
;   Set up for receiving a DDI Record
:DDI_RECORD

	Assign RecType "DDI"

	AssignAsIs _G_IN_RECORDFORMAT "<in_TextID:TEXT:1:LJ,SP><in_EquipNo:TEXT:1:RJ,SP><in_SeqNo:TEXT:3:RJ,ZP><#2>1!L6219<in_Status:TEXT:1:LJ,SP><in_Extn:TEXT:6:LJ,SP><in_DDINumber:TEXT:8:LJ,SP>4<in_DDIResult:TEXT:1:LJ,SP><#3>"

	if "$(in_MsgCounter)" EQ "13"
		AssignAsIs _G_IN_RECORDFORMAT "<in_TextID:TEXT:1:LJ,SP><in_EquipNo:TEXT:1:RJ,SP><in_SeqNo:TEXT:3:RJ,ZP><#2>1!L6213<in_Status:TEXT:1:LJ,SP><in_Extn:TEXT:6:LJ,SP>4<in_DDIResult:TEXT:1:LJ,SP><#3>"

Return
; ************************************************************************


; ************************************************************************
;  STATUS_RECORD
;   Set up for receiving a Link Status record
:STATUS_RECORD

	Assign RecType "ST"
	AssignAsIs _G_IN_RECORDFORMAT "<in_TextID:TEXT:1:LJ,SP><in_EquipNo:TEXT:1:RJ,SP><in_SeqNo:TEXT:3:RJ,ZP><#2>1!L7007<in_Status:TEXT:1:LJ,SP>  <#3>"

Return
; ************************************************************************


; ************************************************************************
;  HandleMaidStatus
;   Execution is sent here whenever we receive a Maid Status message from
;   the PBX.
:HandleMaidStatus

//	Strip any * or #
	ReplaceStr "$(in_Status)" "*" "" "TRUE" "FALSE"
	Assign in_Status "$(_G_RESULT)"
	ReplaceStr "$(in_Status)" "#" "" "FALSE" "TRUE"
	Assign in_Status "$(_G_RESULT)"

//	Create the event if it's not blank
	if "$(in_Status)" NE ""
		CreateRoomStatus "$(in_Extn)" "$(in_Status)"

//	Echo if it's blank
	if "$(inStatus)" EQ ""
		Echo Er: Skipping Room Status with invalid character

Return
; ************************************************************************


; ************************************************************************
;  HandleMessageWaiting
;   Execution is sent here whenever we receive a Message Waiting message
;   from the PBX.
:HandleMessageWaiting

	Assign WorkVal "FALSE"
	if "$(in_Status)" EQ "1"
		Assign WorkVal "TRUE"

	CreateMessageWaiting "$(in_Extn)" "$(WorkVal)"

Return
; ************************************************************************


; ************************************************************************
;  HandleWakeup
;   Execution is sent here whenever we receive a Wakeup message from
;   the PBX.
:HandleWakeup

	if "$(in_Status)" EQ "1"
		Goto HW_Set
	if "$(in_Status)" EQ "2"
		Goto HW_Cancel
	if "$(in_Status)" EQ "3"
		Goto HW_Result

	Goto HandleWakeup_Done

:HW_Set

	Echo If: Wakeup Set for $(in_WakeupTime) on Extension $(in_Extn).
	CreateSetWakeup "$(in_Extn)" "" "<in_WakeupTime:TIME:4:HHMM>"

Goto HW_Done

:HW_Cancel

	Echo If: All Wakeups Cleared on Extension $(in_Extn).
	CreateClearAllWakeup "$(in_Extn)" ""

Goto HW_Done

:HW_Result

	if "$(in_WakeupResult)" EQ "1"
		Echo If: Wakeup call for $(in_WakeupTime) on Extension $(in_Extn) was answered.
	if "$(in_WakeupResult)" EQ "1"
		CreateWakeupDelivered "$(in_Extn)" "" "" "<in_WakeupTime:TIME:4:HHMM>"

	if "$(in_WakeupResult)" EQ "2"
		Echo If: Wakeup call for $(in_WakeupTime) on Extension $(in_Extn) failed because the line was busy.
	if "$(in_WakeupResult)" EQ "2"
		CreateWakeupFailed "$(in_Extn)" "" "" "<in_WakeupTime:TIME:4:HHMM>"

	if "$(in_WakeupResult)" EQ "3"
		Echo If: Wakeup call for $(in_WakeupTime) on Extension $(in_Extn) failed because there was no answer.
	if "$(in_WakeupResult)" EQ "3"
		CreateWakeupFailed "$(in_Extn)" "" "" "<in_WakeupTime:TIME:4:HHMM>"

	if "$(in_WakeupResult)" EQ "4"
		Echo If: Wakeup call for $(in_WakeupTime) on Extension $(in_Extn) failed because it was blocked.
	if "$(in_WakeupResult)" EQ "4"
		CreateWakeupFailed "$(in_Extn)" "" "" "<in_WakeupTime:TIME:4:HHMM>"

:HW_Done

Return
; ************************************************************************


; ************************************************************************
;  HandleDataEntry
;   Execution is sent here whenever we receive a Direct Data Entry message
;   from the PBX.
:HandleDataEntry

	if "$(s_Minibar)" NE "ON"
		Goto HDE_SendNegativeReply

	if "$(in_Item)" NE ""
		Echo If: Creating Minibar - Extn: $(in_Extn) - Item: $(in_Item) - Quantity: $(in_Quantity)
	if "$(in_Item)" NE ""
		CreateMiniBar "$(in_Extn)" "" "$(in_Item)" "$(in_Quantity)" "0" ""

	if "$(in_Item)" EQ ""
		Echo If: Creating Minibar - Extn: $(in_Extn) - Total Amount: $(in_DataEntry)
	if "$(in_Item)" EQ ""
		CreateMiniBar "$(in_Extn)" "" "999" "1" "$(in_DataEntry)" ""

:HDE_SendPositiveReply

//	Build the Base Record
	Assign SendRec "<#2>1!L59179<in_Extn:TEXT:6:LJ,SP><in_LineEquipNo:TEXT:6:LJ,SP><#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

Return

:HDE_SendNegativeReply

//	Build the Base Record
	Assign SendRec "<#2>1!L59178<in_Extn:TEXT:6:LJ,SP><in_LineEquipNo:TEXT:6:LJ,SP><#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

Return
; ************************************************************************


; ************************************************************************
;  HandleDDI
;   Execution is sent here whenever we receive a DDI message
;   from the PBX.
:HandleDDI

	if "$(in_Status)" EQ "9"
		Goto HandleDDI_Set
	if "$(in_Status)" EQ "A"
		Goto HandleDDI_Clear

Return

:HandleDDI_Set

	if "$(in_DDIResult)" EQ "0"
		Echo If: Successfully set DDI [$(in_DDINumber)] for [$(in_Extn)]
	if "$(in_DDIResult)" EQ "1"
		Echo If: Failed to set DDI [$(in_DDINumber)] for [$(in_Extn)] - Input Error
	if "$(in_DDIResult)" EQ "2"
		Echo If: Failed to set DDI [$(in_DDINumber)] for [$(in_Extn)] - DDI does not exist
	if "$(in_DDIResult)" EQ "3"
		Echo If: Failed to set DDI [$(in_DDINumber)] for [$(in_Extn)] - No register area
	if "$(in_DDIResult)" EQ "4"
		Echo If: Failed to set DDI [$(in_DDINumber)] for [$(in_Extn)] - Extension does not exist
	if "$(in_DDIResult)" EQ "9"
		Echo If: Failed to set DDI [$(in_DDINumber)] for [$(in_Extn)] - Other Error
  
Return

:HandleDDI_Clear

	if "$(in_DDIResult)" EQ "0"
		Echo If: Successfully cleared DDI for [$(in_Extn)]
	if "$(in_DDIResult)" EQ "1"
		Echo If: Failed to clear DDI for [$(in_Extn)] - Input Error
	if "$(in_DDIResult)" EQ "2"
		Echo If: No DDI is present for [$(in_Extn)]
	if "$(in_DDIResult)" EQ "4"
		Echo If: Failed to clear DDI for [$(in_Extn)] - Extension does not exist
	if "$(in_DDIResult)" EQ "9"
		Echo If: Failed to clear DDI for [$(in_Extn)] - Other Error

Return
; ************************************************************************


; ************************************************************************
;  HandleStatus
;   Execution is sent here whenever we receive a Link Status message from
;   the PBX.
:HandleStatus

	if "$(in_Status)" EQ "0"
		Goto HS_Done

//	If the Status is two we need to do a Database Swap
	if "$(in_Status)" EQ "2"
		Goto HS_DBSwap

	if "$(in_Status)" EQ "6"
		Goto HS_Done

Goto HS_Done

:HS_DBSwap

	if "$(_EV_ROOMNUMBER)" NE ""
		CreateGenericPassThrough "$(_EV_ROOMNUMBER)" "DatabaseSwap" "Request"
	if "$(_EV_ROOMNUMBER)" EQ ""
		CreateGenericPassThrough "9999" "DatabaseSwap" "Request"

//	Build the Base Record for Database Swap Start
	Assign SendRec "<#2>1!L70073  <#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

//	Build the Base Record for Database Swap End
	Assign SendRec "<#2>1!L70074  <#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:3:RJ,ZP>$(SendRec)"

	Call SendRecord

:HandleStatus_Done

Return
; ************************************************************************


; ************************************************************************
;  SendRecord
;   Execution is sent here whenever we have a record in SendRec to send
;   to the PBX.
:SendRecord

	Send $(SendRec)
	Echo Tx: $(SendRec)

Return
; ************************************************************************


; ************************************************************************
;  IgnoreRecord
;   Flag that the processing was successful and exit the script.
:IgnoreRecord

	FLAGPROCESSED OK

Exit
; ************************************************************************


; ************************************************************************
;  HandleOKAndExit
;   Flag that the processing was successful and exit the script.
:HandleOKAndExit

	FLAGPROCESSED OK

Exit
; ************************************************************************
