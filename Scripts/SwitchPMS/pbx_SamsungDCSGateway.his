; Coded For: 6.0.0.0
; Script Version: 50.0.0.1
; ************************************************************************
;
;  Interface configuration script for controlling a Samsung Gateway PBX
;  through the Samsung DCS Gateway protocol.
;
;  Protocol defined by document:-
;
;      Title:     PMS Interface Protocol of Samsung GW DCS - User Guide
;      Revision:  ED 1 : 200.02.11
;
;
;                                                               ph-120401
;
;  Modifications - AU - 17/10/2013
;	* Updated to utilise V50 specific features
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;

define SendRec
define ReceiveRec
define RecType

define WorkVal
define f_sending
define send_tally

define msg_counter

define out_msgcntandcode
define out_RoomNumber
define out_DestRoomNumber
define out_GuestName
define out_COS
define in_BCC
define in_seq_no
define in_portno
define in_extnno
define out_portno

define in_Room
define in_MW_State
define MW_state

; ************************************************************************
;  INIT
;   This part of the script is run once at the program start-up
;
:INIT

assign f_sending "FALSE"
assign msg_counter 0

openport

Exit
; ************************************************************************


; ************************************************************************
;  CallRecord
;   The script is executed from this label when we have a call record to
;   send.
:CallRecord

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomStatus
;   The script is executed from this label when we have a room status
;   event to send.
:RoomStatus

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Minibar
;   The script is executed from this label when we have a minibar event
;   to send.
:Minibar

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   The script is executed from this label when we have a message waiting
;   event to send.
:MessageWaiting

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  WakeupCall
;   The script is executed from this label when we have a wakeup call
;   event to send.
:WakeupCall

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkin
;   The script is executed from this label when we have a checkin event to
;   send.
:Checkin

; OPT: If, for some *highly* unlikely reason, you do not want checkin
;      details to be sent to the DCS, uncomment this next line.
//goto HandleOKAndExit

JoinNibbles "$(msg_counter)" "1"
assign out_msgcntandcode "$(_G_RESULT)"

EncryptSamsungRoom "$(_EV_ROOMNUMBER)"
assign out_RoomNumber "$(_G_RESULT)"

EncryptSamsungName "$(_EV_NAMEDISPLAY)"
assign out_GuestName "$(_G_RESULT)"

; Build the record and its BCC character
;assign SendRec "<#22><out_msgcntandcode:text:1:SP><out_RoomNumber:TEXT:4:SP><#162><#170><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#162><#164><#162><#164><#162><#164><#255><#255><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#255><#3>"
assign SendRec "<#22><out_msgcntandcode:text:1:SP><out_RoomNumber:TEXT:4:SP><#162><#170><out_GuestName:text:64:SP><#255><#255><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#255><#3>"

GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#2>$(SendRec)$(_G_BCC)"

; Go on to send it
call SendRecord
call NextMsgcounter
goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkout
;   The script is executed from this label when we have a checkout event
;   to send.
:Checkout

; OPT: If, for some *highly* unlikely reason, you do not want checkout
;      details to be sent to the DCS, uncomment this next line.
//goto HandleOKAndExit

JoinNibbles "$(msg_counter)" "2"
assign out_msgcntandcode "$(_G_RESULT)"

EncryptSamsungRoom "$(_EV_ROOMNUMBER)"
assign out_RoomNumber "$(_G_RESULT)"

EncryptSamsungName " "
assign out_GuestName "$(_G_RESULT)"

; Build the record and its BCC character
assign SendRec "<#22><out_msgcntandcode:text:1:SP><out_RoomNumber:TEXT:4:SP><#162><#170><out_GuestName:text:64:SP><#255><#255><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#255><#3>"

GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#2>$(SendRec)$(_G_BCC)"

; Go on to send it
call SendRecord
call NextMsgcounter
goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   The script is executed from this label when we have a class of service
;   event to send.
:ClassOfService

; If we are allowed to make calls then we send a checkin next.
if "$(_EV_COSALLOWOUTGOING)" EQ "TRUE"
	assign out_COS "<#170>"
if "$(_EV_COSALLOWOUTGOING)" NE "TRUE"
	assign out_COS "<#162>"

JoinNibbles "$(msg_counter)" "1"
assign out_msgcntandcode "$(_G_RESULT)"

EncryptSamsungRoom "$(_EV_ROOMNUMBER)"
assign out_RoomNumber "$(_G_RESULT)"

assign SendRec "<#23><out_msgcntandcode:text:1:SP><out_RoomNumber:TEXT:4:SP><out_COS:TEXT:1:SP><#255><#255><#3>"

GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#2>$(SendRec)$(_G_BCC)"

; Go on to send it
call SendRecord
call NextMsgcounter
goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   The script is executed from this label when we have a room update
;   event to send.
:RoomUpdate

; OPT: If, for some *highly* unlikely reason, you do not want room update
;      details to be sent to the DCS, uncomment this next line.
//goto HandleOKAndExit

JoinNibbles "$(msg_counter)" "4"
assign out_msgcntandcode "$(_G_RESULT)"

EncryptSamsungRoom "$(_EV_ROOMNUMBER)"
assign out_RoomNumber "$(_G_RESULT)"

EncryptSamsungName "$(_EV_NAMEDISPLAY)"
assign out_GuestName "$(_G_RESULT)"

; Build the record and its BCC character
assign SendRec "<#22><out_msgcntandcode:text:1:SP><out_RoomNumber:TEXT:4:SP><#162><#170><out_GuestName:text:64:SP><#255><#255><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0><#255><#3>"

GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#2>$(SendRec)$(_G_BCC)"

; Go on to send it
call SendRecord
call NextMsgcounter
goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   The script is executed from this label when we have a Budget Limit
;   event to send.
:BudgetLimit

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   The script is executed from this label when we have a Room Transfer
;   event to send.
:RoomTransfer

; OPT: If, for some reason, you do not want room transfer details to be sent
;      to the DCS, uncomment this next line.
//goto HandleOKAndExit

JoinNibbles "$(msg_counter)" "2"
assign out_msgcntandcode "$(_G_RESULT)"

EncryptSamsungRoom "$(_EV_ROOMNUMBER)"
assign out_RoomNumber "$(_G_RESULT)"

EncryptSamsungRoom "$(_EV_TRDESTROOMNUMBER)"
assign out_DestRoomNumber "$(_G_RESULT)"

; Build the record and its BCC character
assign SendRec "<#32><out_msgcntandcode:text:1:SP><out_RoomNumber:TEXT:4:SP><out_DestRoomNumber:TEXT:4:SP><#255><#03>"

GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#2>$(SendRec)$(_G_BCC)"

; Go on to send it
call SendRecord
call NextMsgcounter
goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   The script is executed from this label when we have a Extra Guest
;   event to send.
:ExtraGuest

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   The script is executed from this label when we have a Do Not Disturb
;   event to send.
:DoNotDisturb

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  PIN
;   The script is executed from this label when we have a PIN event to
;   send.
:PIN

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  DDI
;   The script is executed from this label when we have a DDI event to
;   send.
:DDI

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ReceiveRecord
; ************************************************************************
:ReceiveRecord

; Allow up to 5 seconds for the record to come in.
StartWaitTimer 5

; We have already received the STX and it is in ReceivedRec

; Read the next 1 characters from the port, it is the message Length and 0x03.
ReadFromPort 2 2

; If there is one, add it to the record.
if "$(_PORTCHARS)" NE ""
  assign ReceiveRec "$(ReceiveRec)" "$(_PORTCHARS)"

ReadFromPort 1 1

; If there is one, add it to the record.
if "$(_PORTCHARS)" NE ""
  assign ReceiveRec "$(ReceiveRec)" "$(_PORTCHARS)"

if "$(_PORTCHARS)" NE ""
  call GetRecType

:ReceiveRecord_ReadPort

ReadFromPort 1

; If there is one, add it to the record.
if "$(_PORTCHARS)" NE ""
  assign ReceiveRec "$(ReceiveRec)" "$(_PORTCHARS)"

; If it is an ETX, we need to process the record
if "$(_PORTCHARS)" EQ "<#3>"
  goto FINISHEDRECEIVING

; if our 5 seconds are up, ignore what we have so far.
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	goto QUITRECEIVING

goto ReceiveRecord_ReadPort


:FINISHEDRECEIVING

if "$(RecType)" EQ ""
  goto ACKANDIGNORERECORD

; Extract the fields from the record and process them to create the events.
assign _G_IN_RECORD "$(ReceiveRec)"
ParseInRecord
if "$(_G_IN_RECORDPARSEERROR)" EQ "TRUE"
	goto ReceiveError


:ACKANDIGNORERECORD

Echo Rx: $(ReceiveRec)
Send <#6>
Echo Tx: <#6>

goto SKIPQUIT

:QUITRECEIVING

Echo Rx: $(ReceiveRec)

:SKIPQUIT

; If we are receiving part way through sending a record, we need to setup
; the wait timer again and return.
if "$(f_sending)" EQ "TRUE"
  StartWaitTimer 5
if "$(f_sending)" EQ "TRUE"
  Return

; If we are not part way through sending we need to exit the script.
Exit

; ************************************************************************
;  GetRecType
;   We have received 2 characters in $(_PORTCHARS) which indicates the
;   record type.  We need to setup for the record.
; ************************************************************************
:GetRecType

assign RecType ""

Return
; ************************************************************************

; ************************************************************************
;  ReceiveError
;    Sent here when an error is found in the formatting of the record.
; ************************************************************************
:ReceiveError
  Echo Error with Received Record - Record ignored
Exit
; ************************************************************************

; ************************************************************************
;  CreateMWEvent
;    Creates the message waiting event.
:CreateMWEvent

assign MW_State "FALSE"
if "<in_MW_state:TEXT:1:>" NE "0"
	assign MW_State "TRUE"

CreateMessageWaiting "$(in_Room)" "$(MW_State)"

Return
; ************************************************************************

; ************************************************************************
;  SendRecord
;   Execution is sent here whenever we have a record in SendRec to send
;   to the CaraHost.
; ************************************************************************
:SendRecord

; Send the ENQ
call SENDENQ

; OPT: We have sent and ENQ and we need to wait for an ACK in response to it.
;      The parameter on the following line will allow you to change the amount
;      of time we will wait for.
StartWaitTimer 5

:WAITFORACKTOENQ

; Sleep to slow the processing down a bit.
Sleep 100

; Read a single character from the port
ReadFromPort 1

if "$(_PORTCHARS)" NE ""
	Echo Rx: $(_PORTCHARS)

; if it is an ACK
if "$(_PORTCHARS)" EQ "<#6>"
	Goto GOTACKTOENQ

; If it is an ENQ, we have to yield
if "$(_PORTCHARS)" EQ "<#5>"
	Call ReceiveRecord

; If the wait timeout has expired...
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	Goto SendRecord

; We are still waiting for the ACK so go back
Goto WAITFORACKTOENQ

; We have sent an ENQ character and received an ACK in response to it.
:GOTACKTOENQ

; Set a sending flag for use later
assign f_sending "TRUE"
assign send_tally 0

:SendRecord_SendTheRecord

if "$(send_tally)" GT "4"
  goto HandleFailedAndExit

; Send the record and display it
Send $(SendRec)
Echo Tx: $(SendRec)
assign send_tally $(send_tally) + 1

; Start the await ACK timer
StartWaitTimer 5

:AWAITACKTOREC

ReadFromPort 1

; Timer has expired so we're obviously not being sent anything.  Quit
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
  Goto SendRecord_SendTheRecord

; If we haven't had a response go back and wait
if "$(_PORTCHARS)" EQ ""
  Goto AWAITACKTOREC

; If we get an ACK flag as handled and exit.
if "$(_PORTCHARS)" EQ "<#6>"
  Echo Rx: <#6>
if "$(_PORTCHARS)" EQ "<#6>"
  CALL HANDLEOK
if "$(_PORTCHARS)" EQ "<#6>"
  Return

; If we get an ACK flag as handled and exit.
if "$(_PORTCHARS)" EQ "<#21>"
  Echo Rx: <#21>
if "$(_PORTCHARS)" EQ "<#21>"
  goto HANDLEFAILEDANDEXIT

; If we get an SOH, we need to receive an incoming record
if "$(_PORTCHARS)" EQ "<#1>"
  assign ReceiveRec "<#1>"
if "$(_PORTCHARS)" EQ "<#1>"
  call ReceiveRecord

Goto AWAITACKTOREC

; ************************************************************************
;  CheckIncoming
;    Execution is periodically carried out from here by the program to
;    check for incoming data during idle times.
; ************************************************************************
:CheckIncoming

assign f_sending "FALSE"

; Read a character
ReadFromPort 1

; If there is one and it is STX, start the receive record with it.
if "$(_PORTCHARS)" EQ "<#2>"
  assign ReceiveRec "<#2>"
if "$(_PORTCHARS)" EQ "<#2>"
  goto ReceiveRecord

; If there are no characters, we have finished
if "$(_PORTCHARS)" NE ""
  Echo Rx: $(_PORTCHARS)

; If it is an ENQ, Send an ACK and stop receiving.
if "$(_PORTCHARS)" EQ "<#5>"
	Send <#6>
if "$(_PORTCHARS)" EQ "<#5>"
	Echo Tx: <#6>

; Release back to the program, we have not received an STX
GOTO FINISHED

; ************************************************************************
; NextMsgCounter
;  Moves to the next msg counter.
; ************************************************************************
:NextMsgCounter

  assign msg_counter $(msg_counter) + 1
  if "$(msg_counter)" GT "9"
    assign msg_counter 0

Return
; ************************************************************************


; ************************************************************************
;  SENDENQ
;   Sends an Enq (#5) character out of the port and echoes it to the
;   communications display.

:SENDENQ
  Send <#5>
  Echo Tx: <#5>
RETURN

; ************************************************************************
; HandleOKAndExit
;  Flag that the processing was successful and exit the script.
:HandleOKAndExit

FLAGPROCESSED OK
Exit
; ************************************************************************

; ************************************************************************
; HandleFailedAndExit
;  Flag that the processing has failed and exit the script.
:HandleFailedAndExit

FLAGPROCESSED FAIL

Exit
; ************************************************************************

; ************************************************************************
; HANDLEOK
;  Flag that the processing was successful.
; ************************************************************************
:HANDLEOK

FLAGPROCESSED OK

RETURN
; ************************************************************************

; ************************************************************************
; FINISHED
;  End the script.
; ************************************************************************
:FINISHED

EXIT


