; Coded For: 50.0.0.1
; Script Version: 50.0.1.0
; ************************************************************************
;
;  This is the HI configuration script for interfacing to an
;  NEC HS1000 (Previously NEHOPS)/ This interface is for outgoing messages
;  and should be set as a client on port 60022.
;
;                                                              AU-20171030
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;
define ReceivedRec
define RecType
define SendRec
define WorkVal
;
define EquipNo
;
define g_CIType
define g_DateArrive
define g_DateDepart
define g_GuestName
define g_LangCode
define g_TimeArrive
define g_TimeDepart
define g_VIP
;
define s_MessageWaiting
define s_Wakeups
;
; ************************************************************************
;  INIT
;   This label is executed when the program starts up.
:INIT

//	OPT: Set to "ON" or "OFF" depending on whether we want to send
//	     Message Waiting commands.
	Assign s_Wakeups "ON"

//	OPT: Set to "ON" or "OFF" depending on whether we want to send
//	     Message Waiting commands.
	Assign s_MessageWaiting "ON"

//	OPT: Set this value to the Equipment number configured on the PBX
//	     for the PMS. This is normally fixed to "00" so should not need
//	     changing.
	Assign EquipNo "00"

	CreateAutoIncNumber SeqNo 1 9999 1

Exit
; ************************************************************************


; ************************************************************************
;  PORT_OPENED
;   This label is executed when an IP connection is established.
:PORT_OPENED

Exit
; ************************************************************************


; ************************************************************************
;  CallRecord
;   This label is executed when we have a call record to send.
:CallRecord

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomStatus
;   This label is executed when we have a room status event to send.
:RoomStatus

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Minibar
;   This label is executed when we have a minibar event to send.
:Minibar

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   This label is executed when we have a message waiting event to send.
:MessageWaiting

	if "$(s_MessageWaiting)" EQ "OFF"
		Goto IgnoreRecord

//	Assign WorkVal to 0 or 1 dependant on the Lamp State
	Assign WorkVal "0"
	if "$(_EV_MWSTATE)" EQ "TRUE"
		Assign WorkVal "1"

//	Build the Base Record
	Assign SendRec "<#2>MA<_EV_ROOMNUMBER:TEXT:6:RJ,ZP>$(WorkVal)<#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:4:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  WakeupCall
;   This label is executed when we have a wakeup call event to send.
:WakeupCall

	if "$(s_Wakeups)" EQ "OFF"
		Goto IgnoreRecord

	if "$(_EV_WKACTION)" EQ "SET"
		Assign WorkVal "1<_EV_WKTIME:TIME:4:HHMM>"
	if "$(_EV_WKACTION)" EQ "CLEAR"
		Assign WorkVal "2    "
	if "$(_EV_WKACTION)" EQ "CLEARALL"
		Assign WorkVal "2    "

//	Build the Base Record
	Assign SendRec "<#2>MS<_EV_ROOMNUMBER:TEXT:6:RJ,ZP>$(WorkVal)<#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:4:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkin
;   This label is executed when we have a check in event to send.
:Checkin

//	Set the Checkin Record Type
	Assign g_CIType "CI"
	if "$(_EV_CISWAPFLAG)" EQ "TRUE"
		Assign g_CIType "SR"

//	Define the Language Code
	Assign g_LangCode "<_EV_LANGCODE:TEXT:1:LJ,ZP>"
	if "$(g_LangCode)" GT "2"
		Assign g_LangCode "0"

//	Set the Name
	Assign g_GuestName "<_EV_NAMEDISPLAY:TEXT:20:LJ,SP>"

//	Set the VIP Code
	Assign g_VIP "0"
	if "$(_EV_CIVIP)" NE "0"
		Assign g_VIP "1"
	if "$(_EV_CIVIP)" EQ ""
		Assign g_VIP "0"

//	Calculate which dates we have
	if "<_EV_CIDATEARRIVE:TEXT:1:LJ>" EQ ""
		Goto Checkin_NoDate
	if "<_EV_CIDATEARRIVE:TEXT:1:LJ>" EQ "'"
		Goto Checkin_NoDate

	Goto Checkin_GotDate

:Checkin_NoDate

//	No valid date, use today for both

	Assign g_DateArrive "<_G_NOW:DATE:4:MMDD>"
	Assign g_DateDepart "<_G_NOW:DATE:4:MMDD>"

	Goto Checkin_BuildRecord

:Checkin_GotDate

	AssignAsIs _G_IN_RECORDFORMAT "<g_DateArrive:DATE:6:YYMMDD><g_DateDepart:DATE:6:YYMMDD>"
	Assign _G_IN_RECORD "$(_EV_CIDATEARRIVE)$(_EV_CIDATEDEPART)"
	ParseInRecord

	Assign g_DateArrive "<g_DateArrive:DATE:4:MMDD>"
	Assign g_DateDepart "<g_DateDepart:DATE:4:MMDD>"

	Goto Checkin_BuildRecord

:Checkin_BuildRecord

//	Build the Base Record
	Assign SendRec "<#2><g_CIType:TEXT:2:LJ,SP><_EV_ROOMNUMBER:TEXT:6:RJ,ZP><_EV_CIGUESTGROUP:TEXT:6:RJ,ZP>1<g_LangCode:TEXT:1:LJ,ZP>     <g_VIP:TEXT:1:LJ,ZP>00000<g_DateArrive:TEXT:4:LJ,SP>0000<g_DateDepart:TEXT:4:LJ,SP>2359<g_GuestName:TEXT:20:LJ,SP>                                                            <#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:4:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkout
;   This label is executed when we have a check out event to send.
:Checkout

//	Build the Base Record
	Assign SendRec "<#2>CO<_EV_ROOMNUMBER:TEXT:6:RJ,ZP>2<_G_NOW:DATE:4:MMDD>0000<#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:4:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   This label is executed when we have a class of service event to send.
:ClassOfService

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   This label is executed when we have a room update event to send.
:RoomUpdate

//	Define the Language Code
	Assign g_LangCode "<_EV_LANGCODE:TEXT:1:LJ,ZP>"
	if "$(g_LangCode)" GT "2"
		Assign g_LangCode "0"

//	Set the Name
	Assign g_GuestName "<_EV_NAMEDISPLAY:TEXT:20:LJ,SP>"

//	Set the VIP Code
	Assign g_VIP "0"
	if "$(_EV_CIVIP)" NE "0"
		Assign g_VIP "1"
	if "$(_EV_CIVIP)" EQ ""
		Assign g_VIP "0"

//	Calculate which dates we have
	if "<_EV_RUDATEARRIVE:TEXT:1:LJ>" EQ ""
		Goto RoomUpdate_NoDate
	if "<_EV_RUDATEARRIVE:TEXT:1:LJ>" EQ "'"
		Goto RoomUpdate_NoDate

	Goto RoomUpdate_GotDate

:RoomUpdate_NoDate

//	No valid date, use today for both

	Assign g_DateArrive "<_G_NOW:DATE:4:MMDD>"
	Assign g_DateDepart "<_G_NOW:DATE:4:MMDD>"

	Goto RoomUpdate_BuildRecord

:RoomUpdate_GotDate

	AssignAsIs _G_IN_RECORDFORMAT "<g_DateArrive:DATE:6:YYMMDD><g_DateDepart:DATE:6:YYMMDD>"
	Assign _G_IN_RECORD "$(_EV_CIDATEARRIVE)$(_EV_CIDATEDEPART)"
	ParseInRecord

	Assign g_DateArrive "<g_DateArrive:DATE:4:MMDD>"
	Assign g_DateDepart "<g_DateDepart:DATE:4:MMDD>"

	Goto RoomUpdate_BuildRecord

:RoomUpdate_BuildRecord

//	Build the Base Record
	Assign SendRec "<#2>RP<_EV_ROOMNUMBER:TEXT:6:RJ,ZP><_EV_RUGUESTGROUP:TEXT:6:RJ,ZP>1<g_LangCode:TEXT:1:LJ,ZP>     <g_VIP:TEXT:1:LJ,ZP>00000<g_DateArrive:TEXT:4:LJ,SP>0000<g_DateDepart:TEXT:4:LJ,SP>2359<g_GuestName:TEXT:20:LJ,SP>                                                            <#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:4:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   This label is executed when we have a room transfer event to send.
:RoomTransfer

//	Build the Base Record
	Assign SendRec "<#2>RC<_EV_ROOMNUMBER:TEXT:6:RJ,ZP><_EV_TRDESTROOMNUMBER:TEXT:6:RJ,ZP><#3>"

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:4:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   This label is executed when we have a budget limit event to send.
:BudgetLimit

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   This label is executed when we have an extra guest event to send.
:ExtraGuest

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   This label is executed when we have a do not disturb event to send.
:DoNotDisturb

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  PIN
;   This label is executed when we have a pin event to send.
:PIN

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DDI
;   This label is executed when we have a DDI event to send.
:DDI

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  GuestInfo
;   This label is executed when we have a Guest Information event to send.
:GuestInfo

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillEnquiry
;   This label is executed when we have a Bill Enquiry event to send.
:BillEnquiry

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckout
;   This label is executed when we have an Express Checkout event to send.
:ExpressCheckout

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillResponse
;   This label is executed when we have a Bill Response event to send.
:BillResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckoutResponse
;   This label is executed when we have an Express Checkout Response
;   event to send.
:ExpressCheckoutResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  TVRights
;   This label is executed when we have a Television Rights event to send.
:TVRights

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  CallPackage
;   This label is executed when we have a Call Package event to send.
:CallPackage

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  GenericPassthrough
;   This label is executed when we have a Generic Passthrough
;   event to send.
:GenericPassthrough

	if "$(_EV_GPTMSGTYPE)" EQ "DatabaseSwap"
		Goto GenericPassthrough_DatabaseSwap

	Goto IgnoreRecord

:GenericPassthrough_DatabaseSwap

	if "$(_EV_GPTCFGFIELD_1)" EQ "Request"
		Goto IgnoreRecord

	Assign SendRec ""
//	Build the Base Record for Database Swap Start/End
	if "$(_EV_GPTCFGFIELD_1)" EQ "Start"
		Assign SendRec "<#2>SS<#3>"
	if "$(_EV_GPTCFGFIELD_1)" EQ "End"
		Assign SendRec "<#2>SE<#3>"

	if "$(SendRec)" EQ ""
		Goto IgnoreRecord

//	Build the Complete Record
	GetNextAutoIncNumber SeqNo
	Assign SendRec "1$(EquipNo)<_G_RESULT:TEXT:4:RJ,ZP>$(SendRec)"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  PeriodicCheck
;   This label is executed periodically by the program.
:PeriodicCheck

Exit
; ************************************************************************


; ************************************************************************
;  CheckIncoming
;   This label is executed periodically by the program during idle times.
:CheckIncoming

	ReadFromPort 1

	if "$(_PORTCHARS)" EQ ""
		Exit
	if "$(_PORTCHARS)" EQ "<#13>"
		Exit
	if "$(_PORTCHARS)" EQ "<#10>"
		Exit

	if "$(_PORTCHARS)" EQ "6"
		Assign ReceivedRec "6"
	if "$(_PORTCHARS)" EQ "6"
		Goto ReceiveConnectionRelease

	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(_PORTCHARS)"
	if "$(_PORTCHARS)" NE ""
		Goto ReceiveRecord

Exit
; ************************************************************************


; ************************************************************************
;  ReceiveConnectionRelease
;   This label is executed when we receive a "6" character.
:ReceiveConnectionRelease

	StartWaitTimer 10

:RCR_Start

	ReadFromPort 4 2

	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Echo Er: Failed to read Connection Release Record - Closing the Connection
	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Goto RCR_ResetConnection

	if "$(_PORTCHARS)" EQ ""
		Goto RCR_Start

	Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"

	Echo Rx: $(ReceivedRec)

	Echo If: Received connection release - Closing the Connection

:RCR_ResetConnection

	ClosePort
	Sleep 3000
	OpenPort

Goto PORT_OPENED
; ************************************************************************


; ************************************************************************
;  ReceiveRecord
;   This label is executed when we have received a "2" from the PBX.
:ReceiveRecord

	Assign RecType ""
	StartWaitTimer 2

:RR_WaitForCRLF

	ReadFromPort 7 1

	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"

	Echo Rx: $(ReceivedRec)

Exit

:RR_Timeout

	Echo Er: Timeout
	Echo Rx: $(ReceivedRec)

Exit

; ************************************************************************


; ************************************************************************
;  SendRecord
;   Execution is sent here whenever we have a record in SendRec to send
;   to the PBX.
:SendRecord

	Send $(SendRec)
	Echo Tx: $(SendRec)

Return
; ************************************************************************


; ************************************************************************
;  IgnoreRecord
;   Flag that the processing was successful and exit the script.
:IgnoreRecord

	FLAGPROCESSED OK

Exit
; ************************************************************************


; ************************************************************************
;  HandleOKAndExit
;   Flag that the processing was successful and exit the script.
:HandleOKAndExit

	FLAGPROCESSED OK

Exit
; ************************************************************************
