; Coded For: 6.0.0.0
; Script Version: 50.0.2.0
; ************************************************************************
;
;  Interface configuration script for controlling a Samsung PBX through
;  the Samsung IDCS protocol.
;
;  Protocol defined by document:-
;
;      Title:     Samsung iDCS 500 - PMS Interface Protocol - User Guide
;      Revision:  ED 1 : 2002.03.26
;
;
;                                                               ph-300402
;
;	Room Status Codes from this PBX:
;		ID - PBX Desc (Tiger Desc)
;		95 - Available (Vacant Clean)
;		96 - Occupied (Occupied?)
;		97 - Needs Cleaning (Vacant Dirty)
;		98 - Fix Room (??)
;		99 - Hold (??)
;
;  Modifications - AU - 03/11/2014
;	* Resolved issue where we processed blank Room Status events
;
;  Modifications - AU - 17/10/2013
;	* Updated to utilise V50 specific features
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;

define SendRec
define ReceiveRec
define RecType

define WorkVal
define f_sending
define send_tally

define f_DownloadingDialPlan
define f_GotReply

define in_seqno
define in_portno
define in_extnno
define out_portno
define MsgLength
define MsgCount
define srcName
define WkTime

define in_Room
define in_Date
define in_Time
define in_Status
define in_Desc
define in_MaidID
define in_Cost

; ************************************************************************
;  INIT
;   This part of the script is run once at the program start-up
;
:INIT

Exit
; ************************************************************************

:PORT_OPENED

assign f_sending "FALSE"

Sleep 2000

Echo Info: Sending PMS Connection On...
assign SendRec "<#0><#10><#3><#17><#0><#0><#0><#0><#0><#0><#153><#153>"

call SendRecord

Sleep 2000

call PeriodicCheck

Exit

; ************************************************************************
;  CallRecord
;   The script is executed from this label when we have a call record to
;   send.
:CallRecord

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomStatus
;   The script is executed from this label when we have a room status
;   event to send.
:RoomStatus

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Minibar
;   The script is executed from this label when we have a minibar event
;   to send.
:Minibar

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   The script is executed from this label when we have a message waiting
;   event to send.
:MessageWaiting

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  WakeupCall
;   The script is executed from this label when we have a wakeup call
;   event to send.
:WakeupCall

; OPT: If you do not want wakeup events to be sent to the DCS, 
;      uncomment this next line.
//goto HandleOKAndExit

; Determine the port number
BCDEncode "<_EV_EXTNNUMBER:TEXT:4:LJ,SP>" "LH"
assign out_portno "$(_G_RESULT)"

if "$(_EV_WKACTION)" EQ "SET"
	goto WakeupCall_Set
if "$(_EV_WKACTION)" EQ "CLEAR"
	goto WakeupCall_Clear
if "$(_EV_WKACTION)" EQ "CLEARALL"
	goto WakeupCall_Clear

Echo Info: Unhandled Wakeup Call Action "$(_EV_WKACTION)".

goto WakeupCall_Done

:WakeupCall_Set

echo Info: Sending Set Wakeup Call Extn Extn Number: "$(_EV_EXTNNUMBER)", Port: "$(out_portno)", Time: "<_EV_WKTIME:TIME:5:HH:MM>"

BCDEncode "<_EV_WKTIME:TIME:4:HHMM>" "LH"
assign WKTime "$(_G_RESULT)"
assign SendRec "<#0><#18><#3><#10><#0><#0><#0><#0><out_portno:TEXT:2:LJ,SP><WKTime:TEXT:2:LJ,SP><#1><#0><#0><#0><#0><#0><#0><#0>"

Call SendRecord

goto WakeupCall_Done

:WakeupCall_Clear

echo Info: Sending Clear Wakeup Calls Extn Extn Number: "$(_EV_EXTNNUMBER)", Port: "$(out_portno)"

assign SendRec "<#0><#18><#3><#10><#0><#0><#0><#0><out_portno:TEXT:2:LJ,SP><#0><#0><#0><#0><#0><#0><#0><#0><#0><#0>"

Call SendRecord

goto WakeupCall_Done

:WakeupCall_Done

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkin
;   The script is executed from this label when we have a checkin event to
;   send.
:Checkin

; OPT: If, for some *highly* unlikely reason, you do not want checkin
;      details to be sent to the DCS, uncomment this next line.
//goto HandleOKAndExit

; Determine the port number
BCDEncode "<_EV_EXTNNUMBER:TEXT:4:LJ,SP>" "LH"
assign out_portno "$(_G_RESULT)"

echo Info: Check In Extn "$(_EV_EXTNNUMBER)"

:RetryCheckin

echo Info: Sending Make Available Extn Number: "$(_EV_EXTNNUMBER)", Port: "$(out_portno)"
assign SendRec "<#0><#11><#3><#11><#0><#0><#0><#0><out_portno:TEXT:2:LJ,SP><#5><#153><#153>"

; Go on to send it
call SendRecord

echo Info: Sending Check In Extn Number: "$(_EV_EXTNNUMBER)", Port: "$(out_portno)"
assign SendRec "<#0><#26><#3><#2><#0><#0><#0><#0><out_portno:TEXT:2:LJ,SP><#0><#0><#0><#0><#0><_EV_NAMEDISPLAY:TEXT:11:LJ,SP><#153><#153>"
;               ^    ^   ^   ^               ^                        ^               ^   ^                              ^
;               |    |   |   Prefixed        Station Number           Phone Deposit   |   |                              Staff Code
;               |    |   Msg ID                                                       |   Name
;               |    Prefixed                                                         Pay Method
;               Msg Length

; Go on to send it
call SendRecord

if "$(in_Status)" EQ "116"
	Echo Info: Got Error Reply - Checking Out Room and Retrying.
if "$(in_Status)" EQ "116"
	goto CheckoutThenCheckin

Echo Info: Retrieving Extra Reply...

Assign f_GotReply "FALSE"

:CI_WaitForSecondReply

ReadFromPort 1

if "$(_PORTCHARS)" EQ "<#0>"
	Assign f_GotReply "TRUE"
if "$(_PORTCHARS)" EQ "<#0>"
	Assign ReceiveRec "$(_PORTCHARS)"
if "$(_PORTCHARS)" EQ "<#0>"
	Call ReceiveRecord

if "$(f_GotReply)" EQ "TRUE"
  Goto CI_GotSecondReply

goto CI_WaitForSecondReply

:CI_GotSecondReply

goto HandleOKAndExit

:CheckoutThenCheckin

echo Info: Sending Check Out Extn Number: "$(_EV_EXTNNUMBER)", Port: "<out_portno:TEXT:2:LJ,SP>"

; Build the record and its BCC character
assign SendRec "<#0><#10><#3><#5><#0><#0><#0><#0><out_portno:TEXT:2:LJ,SP><#153><#153>"
;               ^    ^   ^   ^               ^                        ^
;               |    |   |   Prefixed        Station Number           Staff Code
;               |    |   Msg ID
;               |    Prefixed
;               Msg Length

; Go on to send it
call SendRecord

Echo Info: Retrieving Extra Reply...

Assign f_GotReply "FALSE"

:CICO_WaitForSecondReply

ReadFromPort 1

if "$(_PORTCHARS)" EQ "<#0>"
	Assign f_GotReply "TRUE"
if "$(_PORTCHARS)" EQ "<#0>"
	Assign ReceiveRec "$(_PORTCHARS)"
if "$(_PORTCHARS)" EQ "<#0>"
	Call ReceiveRecord

if "$(f_GotReply)" EQ "TRUE"
  Goto CICO_GotSecondReply

goto CICO_WaitForSecondReply

:CICO_GotSecondReply

Goto RetryCheckin
; ************************************************************************


; ************************************************************************
;  Checkout
;   The script is executed from this label when we have a checkout event
;   to send.
:Checkout

; OPT: If, for some *highly* unlikely reason, you do not want checkout
;      details to be sent to the DCS, uncomment this next line.
//goto HandleOKAndExit

if "$(f_DownloadingDialPlan)" EQ "TRUE"
  FlagProcessed NOT
if "$(f_DownloadingDialPlan)" EQ "TRUE"
  goto CheckIncoming

; Determine the port number
BCDEncode "<_EV_EXTNNUMBER:TEXT:4:LJ,SP>" "LH"
assign out_portno "$(_G_RESULT)"

echo Info: Check Out Extn Number: "$(_EV_EXTNNUMBER)"
echo Info: Sending Check Out Extn Number: "$(_EV_EXTNNUMBER)", Port: "<out_portno:TEXT:2:LJ,SP>"

; Build the record and its BCC character
assign SendRec "<#0><#10><#3><#5><#0><#0><#0><#0><out_portno:TEXT:2:LJ,SP><#153><#153>"
;               ^    ^   ^   ^               ^                        ^
;               |    |   |   Prefixed        Station Number           Staff Code
;               |    |   Msg ID
;               |    Prefixed
;               Msg Length

; Go on to send it
call SendRecord
goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   The script is executed from this label when we have a class of service
;   event to send.
:ClassOfService
; OPT: If, for some *highly* unlikely reason, you do not want class of 
;      service details to be sent to the DCS, uncomment this next line.
//goto HandleOKAndExit

; Determine the port number
BCDEncode "<_EV_EXTNNUMBER:TEXT:4:LJ,SP>" "LH"
assign out_portno "$(_G_RESULT)"

if "$(_EV_COSALLOWOUTGOING)" EQ "TRUE"
  goto COS_UNBAR

; *** Bar the line

echo Info: Class of Service - Bar Extn Number: "$(_EV_EXTNNUMBER)"
echo Info: Sending Check Out Extn Number: "$(_EV_EXTNNUMBER)", Port: "<out_portno:TEXT:2:LJ,SP>"

; Build the record and its BCC character
assign SendRec "<#0><#10><#3><#5><#0><#0><#0><#0><out_portno:TEXT:2:LJ,SP><#153><#153>"
;               ^    ^   ^   ^               ^                        ^
;               |    |   |   Prefixed        Station Number           Staff Code
;               |    |   Msg ID
;               |    Prefixed
;               Msg Length

; Go on to send it
call SendRecord

goto COS_DONE

:COS_UNBAR

echo Info: Class of Service - Unbar Extn Number: "$(_EV_EXTNNUMBER)"
echo Info: Sending Make Available Extn Number: "$(_EV_EXTNNUMBER)", Port: "<out_portno:TEXT:2:LJ,SP>"

assign SendRec "<#0><#11><#3><#11><#0><#0><#0><#0><out_portno:TEXT:2:LJ,SP><#5><#153><#153>"

; Go on to send it
call SendRecord

echo Info: Sending Checkin Extn Number: "$(_EV_EXTNNUMBER)", Port: "<out_portno:TEXT:2:LJ,SP>"

; Build the record and its BCC character
assign SendRec "<#0><#26><#3><#2><#0><#0><#0><#0><out_portno:TEXT:2:LJ,SP><#0><#0><#0><#0><#0><_EV_NAMEDISPLAY:TEXT:11:LJ,SP><#153><#153>"
;               ^    ^   ^   ^               ^                        ^               ^   ^                                ^
;               |    |   |   Prefixed        Station Number           Phone Deposit   |   |                                Staff Code
;               |    |   Msg ID                                                       |   Name 
;               |    Prefixed                                                         Pay Method
;               Msg Length

; Go on to send it
call SendRecord

:COS_DONE

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   The script is executed from this label when we have a room update
;   event to send.
; ************************************************************************
:RoomUpdate

; OPT: If, for some *highly* unlikely reason, you do not want room update
;      details to be sent to the DCS, uncomment this next line.
//goto HandleOKAndExit

; Determine the port number
assign out_portno "<_EV_EXTNNUMBER:TEXT:4:LJ,SP>"
BCDEncode "<_EV_EXTNNUMBER:TEXT:4:LJ,SP>" "LH"
assign out_portno "$(_G_RESULT)"

Echo Info: Sending Room Update Extn Number: "$(_EV_EXTNNUMBER)", Port: "<out_portno:TEXT:2:LJ,SP>"

; Build the record and its BCC character
assign SendRec "<#0><#21><#3><#3><#0><#0><#0><#0><out_portno:TEXT:2:LJ,SP><_EV_NAMEDISPLAY:TEXT:11:LJ,SP><#153><#153>"
;               ^        ^   ^   ^               ^                        ^                              ^
;               |        |   |   Prefixed        Station Number           |                              Staff Code
;               |        |   Msg ID                                       Name
;               |        Prefixed
;               Msg Length

; Go on to send it
call SendRecord
goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   The script is executed from this label when we have a Budget Limit
;   event to send.
:BudgetLimit

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   The script is executed from this label when we have a Room Transfer
;   event to send.
:RoomTransfer
; OPT: If, for some *highly* unlikely reason, you do not want room transfer
;      details to be sent to the DCS, uncomment this next line.
//goto HandleOKAndExit

; Check in Destination

if "$(f_DownloadingDialPlan)" EQ "TRUE"
  FlagProcessed NOT
if "$(f_DownloadingDialPlan)" EQ "TRUE"
  goto CheckIncoming

; Determine the port number
BCDEncode "<_EV_TRDESTEXTNNUMBER:TEXT:4:LJ,SP>" "LH"
assign out_portno "$(_G_RESULT)"

echo Info: Room Transfer Src Extn: "$(_EV_EXTNNUMBER)" Dest Extn: "$(_EV_TRDESTEXTNNUMBER)"

; Set status to available
echo Info: Sending Make Available Extn Number: "$(_EV_EXTNNUMBER)", Port: "<out_portno:TEXT:2:LJ,SP>"

assign SendRec "<#0><#11><#3><#11><#0><#0><#0><#0><out_portno:TEXT:2:LJ,SP><#5><#153><#153>"

; Go on to send it
call SendRecord

; Check in dest room.

echo Info: Sending Check In Extn Number: "$(_EV_EXTNNUMBER)", Port: "<out_portno:TEXT:2:LJ,SP>"

; Build the record and its BCC character
assign SendRec "<#0><#26><#3><#2><#0><#0><#0><#0><out_portno:TEXT:2:LJ,SP><#0><#0><#0><#0><#0><_EV_NAMEDISPLAY:TEXT:11:LJ,SP><#153><#153>"
;               ^        ^   ^   ^               ^                        ^               ^   ^                            ^
;               |        |   |   Prefixed        Station Number           Phone Deposit   |   |                            Staff Code
;               |        |   Msg ID                                                       |   Name
;               |        Prefixed                                                         Pay Method
;               Msg Length

; Go on to send it
call SendRecord

; Checkout Source

; Determine the port number
BCDEncode "<_EV_EXTNNUMBER:TEXT:4:LJ,SP>" "LH"
assign out_portno "$(_G_RESULT)"

echo Info: Sending Check Out Extn Number: "$(_EV_EXTNNUMBER)", Port: "<out_portno:TEXT:2:LJ,SP>"

; Build the record and its BCC character
assign SendRec "<#0><#10><#3><#5><#0><#0><#0><#0><out_portno:TEXT:2:LJ,SP><#153><#153>"
;               ^    ^   ^   ^               ^                        ^
;               |    |   |   Prefixed        Station Number           Staff Code
;               |    |   Msg ID
;               |    Prefixed
;               Msg Length

; Go on to send it
call SendRecord

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   The script is executed from this label when we have a Extra Guest
;   event to send.
:ExtraGuest

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   The script is executed from this label when we have a Do Not Disturb
;   event to send.
:DoNotDisturb

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  PIN
;   The script is executed from this label when we have a PIN event to
;   send.
:PIN

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  DDI
;   The script is executed from this label when we have a DDI event to
;   send.
:DDI

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ReceiveRecord
; ************************************************************************
:ReceiveRecord

; Allow up to 5 seconds for the record to come in.
StartWaitTimer 5

; Read the next character from the port, it is the message Length
ReadFromPort 1 1

; If there is one, add it to the record.
if "$(_PORTCHARS)" NE ""
  assign ReceiveRec "$(ReceiveRec)" "$(_PORTCHARS)"
if "$(_PORTCHARS)" NE ""
  assign MsgLength "$(_PORTCHARS)"

Assign MsgCount 0
; Read the next 1 characters from the port, it is the 0x03.
ReadFromPort 1 1

; If there is one, add it to the record.
if "$(_PORTCHARS)" NE ""
  assign ReceiveRec "$(ReceiveRec)" "$(_PORTCHARS)"

Assign MsgCount $(MsgCount) + 1

ReadFromPort 1 1

; If there is one, add it to the record.
if "$(_PORTCHARS)" NE ""
  assign ReceiveRec "$(ReceiveRec)" "$(_PORTCHARS)"

if "$(_PORTCHARS)" NE ""
  call GetRecType

Echo Info: Incoming message Type = "$(RecType)"

Assign MsgCount $(MsgCount) + 1

:ReceiveRecord_ReadPort

ReadFromPort 1
Assign MsgCount $(MsgCount) + 1

; If there is one, add it to the record.
if "$(_PORTCHARS)" NE ""
  assign ReceiveRec "$(ReceiveRec)" "$(_PORTCHARS)"

if "$(RecType)" EQ "REPLY"
  goto CHECKREPLYLENGTH
if "$(RecType)" EQ "HBEAT"
  goto CHECKHBEATLENGTH
if "$(RecType)" EQ "DIALPLAN"
  goto CHECKDPLANLENGTH

:CHECKREPLYLENGTH
if "$(MsgCount)" EQ "86"
  goto FINISHEDRECEIVING
Goto CheckLenDone

:CHECKHBEATLENGTH
if "$(MsgCount)" EQ "8"
  goto FINISHEDRECEIVING
Goto CheckLenDone

:CHECKDPLANLENGTH
if "$(MsgCount)" EQ "16"
  goto FINISHEDRECEIVING
if "$(MsgCount)" EQ "10"
  goto FINISHEDRECEIVING
Goto CheckLenDone

:CheckLenDone

; if our 5 seconds are up, ignore what we have so far.
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	goto QUITRECEIVING

goto ReceiveRecord_ReadPort


:FINISHEDRECEIVING

Echo Rx: $(ReceiveRec)

Echo Dbg: Rec Type = "$(RecType)"

if "$(RecType)" EQ ""
  goto IGNORERECORD

; Extract the fields from the record and process them to create the events.
assign _G_IN_RECORD "$(ReceiveRec)"
ParseInRecord
if "$(_G_IN_RECORDPARSEERROR)" EQ "TRUE"
	goto ReceiveError

If "$(RecType)" EQ "REPLY"
  Goto CreateRSEvent

:IGNORERECORD

:QUITRECEIVING

; If we are receiving part way through sending a record, we need to setup
; the wait timer again and return.
if "$(f_sending)" EQ "TRUE"
  StartWaitTimer 5
if "$(f_sending)" EQ "TRUE"
  Return

; If we are not part way through sending we need to exit the script.
Exit
; ************************************************************************

; ************************************************************************
;  GetRecType
;   We have received 2 characters in $(_PORTCHARS) which indicates the
;   record type.  We need to setup for the record.
; ************************************************************************
:GetRecType

assign RecType ""
if "$(_PORTCHARS)" EQ "<#208>"
  assign RecType "DIALPLAN"

if "$(_PORTCHARS)" EQ "<#240>"
  assign RecType "REPLY"

if "$(_PORTCHARS)" EQ "<#224>"
  assign RecType "HBEAT"

if "$(RecType)" EQ "DIALPLAN"
  assignasis _G_IN_RECORDFORMAT "<#0><#16><#3><#208><in_seqno:TEXT:2:SP><#0><#0><in_portno:TEXT:2:SP><in_extnno:TEXT:4:SP>"

// <NUL>V<ETX><#240><NUL><NUL><NUL><NUL><NUL><NUL>     8102    04/07    14:27     98     Fix Room             0000          0.00
if "$(RecType)" EQ "REPLY"
  assignasis _G_IN_RECORDFORMAT "<#0><#86><#3><#240><#0><#0><#0><#0><#0><#0>     <in_extnno:TEXT:4:SP>    <in_Date:TEXT:5:SP>    <in_Time:TEXT:5:SP>    <in_Status:TEXT:3:RJ,SP>     <in_Desc:TEXT:18:SP>   <in_MaidID:TEXT:8:SP>  <in_Cost:TEXT:8:SP>"

Return
; ************************************************************************

; ************************************************************************
;  StoreDialplan
;   This routine stores the dial plan translation in in_portno and
;   in_extnno.
; ************************************************************************
:StoreDialplan

  if "$(f_DownloadingDialPlan)" EQ "FALSE"
    Return

  assign in_extnno "<in_extnno:TEXT:4:LJ,SP,AN>"
  Echo Storing Dialplan entry: |$(in_portno)| |$(in_extnno)|
  AddTranslationItem "DIALPLAN" "$(in_portno)" "$(in_extnno)"
  
  if "$(MsgLength)" EQ "<#0><#10>"
    echo Finished Dialplan download
  if "$(MsgLength)" EQ "<#0><#10>"
    assign ReceiveRec ""
  if "$(MsgLength)" EQ "<#0><#10>"
    assign f_DownloadingDialPlan "FALSE"
  if "$(MsgLength)" EQ "<#0><#10>"
    Return

Return
; ************************************************************************

; ************************************************************************
;  ReceiveError
;    Sent here when an error is found in the formatting of the record.
; ************************************************************************
:ReceiveError
  Echo Error with Received Record - Record ignored
Exit
; ************************************************************************

; ************************************************************************
;  CreateRSEvent
;    Creates the Room Status event.
:CreateRSEvent

Echo Status code '$(in_Status)'

if $(in_Status) GT 99
  goto SKIPRSEVENT

if $(in_Status) LT 95
  goto SKIPRSEVENT

if "$(in_Status)" EQ ""
  goto SKIPRSEVENT

Echo Creating Room Status "$(in_Status)" for extn "$(in_extnno)"

CreateRoomStatus "$(in_extnno)" "$(in_Status)"

:SKIPRSEVENT
Return
; ************************************************************************

; ************************************************************************
;  SendRecord
;   Execution is sent here whenever we have a record in SendRec to send
;   to the DCS.
; ************************************************************************
:SendRecord

assign f_Sending "TRUE"
assign f_GotReply "FALSE"

; Set a sending flag for use later
assign send_tally 0

:SendRecord_SendTheRecord

if "$(send_tally)" GT "4"
  return

; Send the record and display it
Send $(SendRec)
Echo Tx: $(SendRec)
assign send_tally $(send_tally) + 1

StartWaitTimer 5

; Wait for a reply.
:WAITFORREPLY

ReadFromPort 1

if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
  Echo Error: Timeout waiting for Reply Message
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
  Goto SendRecord_SendTheRecord

if "$(_PORTCHARS)" EQ "<#0>"
  Assign f_GotReply "TRUE"
if "$(_PORTCHARS)" EQ "<#0>"
  Assign ReceiveRec "<#0>"
if "$(_PORTCHARS)" EQ "<#0>"
  Call ReceiveRecord

if "$(f_GotReply)" EQ "TRUE"
  Goto GotReply

goto WAITFORREPLY

:GotReply

Return
; ************************************************************************

; ************************************************************************
;  PeriodicCheck
;    Execution is periodically carried out from here by the program
;    during idle times. This can be used to send a Heartbeat.
; ************************************************************************
:PeriodicCheck

Echo Info: Sending Heartbeat
Assign SendRec "<#0><#8><#3><#224><#0><#0><#0><#0><#0><#0>"

Call SendRecord

Exit

; ************************************************************************
;  CheckIncoming
;    Execution is periodically carried out from here by the program to
;    check for incoming data during idle times.
; ************************************************************************
:CheckIncoming

assign f_sending "FALSE"

; Read a character
ReadFromPort 1

; If there is one and it is NULL, start the receive record with it.
if "$(_PORTCHARS)" EQ "<#0>"
  assign ReceiveRec "<#0>"
if "$(_PORTCHARS)" EQ "<#0>"
  goto ReceiveRecord

; If there are no characters, we have finished
if "$(_PORTCHARS)" NE ""
  Echo Rx: $(_PORTCHARS)

; Release back to the program, we have not received an STX
GOTO FINISHED

; ************************************************************************
; HandleOKAndExit
;  Flag that the processing was successful and exit the script.
:HandleOKAndExit

FLAGPROCESSED OK
Exit
; ************************************************************************

; ************************************************************************
; HandleFailedAndExit
;  Flag that the processing has failed and exit the script.
:HandleFailedAndExit

FLAGPROCESSED FAIL

Exit
; ************************************************************************

; ************************************************************************
; HANDLEOK
;  Flag that the processing was successful.
; ************************************************************************
:HANDLEOK

FLAGPROCESSED OK

RETURN

; ************************************************************************
; FINISHED
;  End the script.
; ************************************************************************
:FINISHED

EXIT


