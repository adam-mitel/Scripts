; Coded For: 6.0.0.0
; Script Version: 50.0.0.1
; ************************************************************************
;
;  This is the HI configuration script for an interface to a Hitachi PBX
;  using their AP6 protocol. This interface will only receive messages.
;
;  The Hitachi will connect to us on port 8003.
;
;  CDR passthrough uses Monarch_Enhanced.conf
;
;                                                              AU-20210120
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;
define ReceivedRec
define RecordFormatAssigned
define RecType
define SendRec
define WorkVal
;
define in_Extn
define in_Charge
define in_StartDay
define in_StartTime
define in_Duration
define in_DurationMinutes
define in_DurationSeconds
define in_Destination
define in_Status
define in_MaidID
define in_Time
define in_TransactionNumber
;
; ************************************************************************
;  INIT
;   Executed before the main processing gets under way to allow variables
;   to be initialised.
:INIT

// 	OPT: If we are using Serial uncomment the next line.
;	OpenPort

Exit
; ************************************************************************


; ************************************************************************
;  PortOpened
;   The script is called once the IP connection is opened
:PORT_OPENED

Exit
; ************************************************************************


; ************************************************************************
;  CallRecord
;   This label is executed when we have a call record event to send.
:CallRecord

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomStatus
;   This label is executed when we have a room status event to send.
:RoomStatus

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Minibar
;   This label is executed when we have a minibar event to send.
:Minibar

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   This label is executed when we have a message waiting event to send.
:MessageWaiting

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  WakeupCall
;   This label is executed when we have a wakeup call event to send.
:WakeupCall

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Checkin
;   This label is executed when we have a checkin event to send.
:Checkin

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Checkout
;   This label is executed when we have a checkout event to send.
:Checkout

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   This label is executed when we have a class of service event to send.
:ClassOfService

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   This label is executed when we have a room update event to send.
:RoomUpdate

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   This label is executed when we have a budget limit event to send.
:BudgetLimit

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   This label is executed when we have a room transfer event to send.
:RoomTransfer

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   This label is executed when we have an extra guest event to send.
:ExtraGuest

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   This label is executed when we have a do not disturb event to send.
:DoNotDisturb

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  PIN
;   This label is executed when we have a pin event to send.
:PIN

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DDI
;   This label is executed when we have a ddi event to send.
:DDI

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  GuestInfo
;   This label is executed when we have a guest info event to send.
:GuestInfo

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillEnquiry
;   This label is executed when we have a bill enquiry event to send.
:BillEnquiry

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckout
;   This label is executed when we have an express checkout event to send.
:ExpressCheckout

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillResponse
;   This label is executed when we have a bill response event to send.
:BillResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckoutResponse
;   This label is executed when we have an express checkout response event
;   to send.
:ExpressCheckoutResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  TvRights
;   This label is executed when we have a tv rights event to send.
:TvRights

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  CallPackage
;   This label is executed when we have a call package event to send.
:CallPackage

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  GenericPassthrough
;   This label is executed when we have a generic passthrough event to send.
:GenericPassthrough

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  CheckIncoming
;    Execution is periodically carried out from here by the program to
;    check for incoming data during idle times.
:CheckIncoming

//	Read a character
	ReadFromPort 1

//	If it is an STX receieve the record
	if "$(_PORTCHARS)" EQ "<#2>"
		Assign ReceivedRec "<#2>"
	if "$(_PORTCHARS)" EQ "<#2>"
		Goto ReceiveRecord

//	If there is a character that we're not expecting, echo it.
	if "$(_PORTCHARS)" NE ""
		Echo Rx: $(_PORTCHARS)

//	Release back to the program, we have not got a character we want.

Exit
; ************************************************************************
	

; ************************************************************************
;  ReceiveRecord
;    This label is Called when we have received the start of a record
:ReceiveRecord

//	Clear out old field records
	Call ClearFields

//	Start a Wait Timer for the SOH to arrive.
	StartWaitTimer 10

:ReceiveRecord_ReadPDT

//	Slow the processing down a little.
	Sleep 100

//	Read PDT and 2 spaces
	ReadFromPort 5 1

//	If there is a Character add it to the ReceivedRec
	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"

//	If the timer has expired, quit.
	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Goto SkipProcessIncoming

//	The timer hasn't expired but we haven't received anything, go back and try again.
	if "$(_PORTCHARS)" EQ ""
		Goto ReceiveRecord_ReadPDT

:ReceiveRecord_ReadTransactionNumber

//	Read the next 4 characters which is the transaction code
	ReadFromPort 4 1

//	Add them to the ReceivedRec
	if "$(_PORTCHARS)" NE ""
		assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"

//	Start a Wait Timer for the rest of the Record
	StartWaitTimer 10

//	The timer hasn't expired but we haven't received anything, go back and try again.
	if "$(_PORTCHARS)" EQ ""
		Goto ReceiveRecord_ReadTransactionNumber
	
//	Assign the 4 characters as the in_TransactionNumber.
	Assign in_TransactionNumber "$(_PORTCHARS)"

:ReceiveRecord_ReadRecType

//	Read the next 2 characters which is the RecType
	ReadFromPort 2 1

//	Add them to the ReceivedRec
	if "$(_PORTCHARS)" NE ""
		assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"
		
//	Assign the 2 characters as the RecType.
	Assign RecType "$(_PORTCHARS)"

:ReceiveRecord_ReadRecord

	ReadFromPort 1 1

//	If it isn't blank add it to the ReceivedRec
	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"

//	If it is an ETX we have finished
	if "$(_PORTCHARS)" EQ "<#3>"
		echo Rx: $(ReceivedRec)
	if "$(_PORTCHARS)" EQ "<#3>"
		goto FinishedReceiving

//	If the Timer Expires we need to quit.
	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		goto SkipProcessIncoming

Goto ReceiveRecord_ReadRecord
; ************************************************************************


; ************************************************************************
;  FinishedReceiving
;    We now have a complete record, time to process it.
:FinishedReceiving

//	Assign the Format
	if "$(RecType)" EQ "BT"
		Call FormatBT
	if "$(RecType)" EQ "OT"
		Call FormatOT
	if "$(RecType)" EQ "CL"
		Call FormatCL

//	If the Record is formatted, go and parse it.
	if "$(RecordFormatAssigned)" EQ "TRUE"
		Goto RecordFormatAssigned

//	To get here we do not recognise the RecType, echo it, send an ACK and quit.
	Call SendACK
	Echo Er: Unrecognised RecType "$(RecType)", no events generated.
	Goto SkipProcessIncoming

:RecordFormatAssigned

//	Extract the fields from the record and process them to create the events.
	Assign _G_IN_RECORD "$(ReceivedRec)"
	parseInRecord
	if "$(_G_IN_RECORDPARSEERROR)" EQ "TRUE"
		goto ReceiveError

//	There is no error with the record, send an ACK and create the event.

	Call SendACK

	if "$(RecType)" EQ "BT"
		Call CreateCDR
	if "$(RecType)" EQ "OT"
		Call CreateCDR
	if "$(RecType)" EQ "CL"
		Call CreateCL

	Goto SkipProcessIncoming

:ReceiveError

	Echo Er: Error when parsing the Received Record.

:SkipProcessIncoming

Exit
; ************************************************************************


; ************************************************************************
;  FormatBT
;    Sets up the expected format for BT records - Domestic Calls
:FormatBT

	AssignAsIs _G_IN_RECORDFORMAT "<#2>PDT  <in_TransactionNumber:TEXT:4:RJ,ZP>BT<in_Extn:TEXT:6:RJ,SP><in_Charge:TEXT:6:RJ,ZP><in_StartDay:TEXT:2:RJ,SP><in_StartTime:TIME:6:HHMMSS><in_DurationMinutes:TEXT:3:RJ,ZP><in_DurationSeconds:TEXT:2:RJ,ZP><in_Destination:TEXT:15:LJ,SP><#3>"
	Assign RecordFormatAssigned "TRUE"

Return
; ************************************************************************


; ************************************************************************
;  FormatOT
;    Sets up the expected format for OT records - International Calls
:FormatOT

	AssignAsIs _G_IN_RECORDFORMAT "<#2>PDT  <in_TransactionNumber:TEXT:4:RJ,ZP>OT<in_Extn:TEXT:6:RJ,SP><in_Charge:TEXT:6:RJ,ZP><in_StartDay:TEXT:2:RJ,ZP><in_StartTime:TIME:6:HHMMSS><in_DurationMinutes:TEXT:3:RJ,ZP><in_DurationSeconds:TEXT:2:RJ,ZP><in_Destination:TEXT:14:LJ,SP><#3>"
	Assign RecordFormatAssigned "TRUE"

Return
; ************************************************************************


; ************************************************************************
;  FormatCL
;    Sets up the expected format for CL records - Room Status
:FormatCL

	AssignAsIs _G_IN_RECORDFORMAT "<#2>PDT  <in_TransactionNumber:TEXT:4:RJ,ZP>CL<in_Extn:TEXT:6:RJ,SP><in_Status:TEXT:1:RJ,SP><in_MaidID:TEXT:6:RJ,ZP><in_Time:TEXT:4:LJ,SP><#3>"
	Assign RecordFormatAssigned "TRUE"

Return
; ************************************************************************


; ************************************************************************
;  CreateCDR
;    Creates a Call Record event.
:CreateCDR

//	If the minutes is blank, set it to 0 so the math works
	if "$(in_DurationMinutes)" EQ ""
		Assign in_DurationMinutes 0

//	Convert the minutes into seconds
	Assign in_Duration $(in_DurationMinutes) * 60

//	Add the seconds
	Assign in_Duration $(in_Duration) + $(in_DurationSeconds)

//	Convert the total seconds to HH:MM:SS
	SecsToTime "$(in_Duration)" ":" "HHMMSS"

	PassToDataCollection 0      <in_StartDay:TEXT:2:RJ,ZP>:<_G_NOW:DATE:5:MM:YY><#13>
	Sleep 100
	PassToDataCollection <in_Extn:TEXT:5:RJ,SP>   <in_StartTime:TIME:5:HH:MM> <_G_RESULT:TEXT:8:LJ,SP>  01              <in_Destination:TEXT:15:LJ,SP><#13>

Return
; ************************************************************************


; ************************************************************************
;  CreateCL
;    Creates a room status event.
:CreateCL

	CreateRoomStatus "$(in_Extn)" "$(in_Status)" "$(in_MaidID)"

Return
; ************************************************************************


; ************************************************************************
;  SendRecord
;   Execution is sent here whenever we have a record in SendRec to send
;   to the Mitel.
; ************************************************************************
:SendRecord

Return
; ************************************************************************


; ************************************************************************
;  HandleOKAndExit
;    This will flag that the event is processed and Exit.
:HandleOKAndExit

	FLAGPROCESSED OK

Exit
; ************************************************************************


; ************************************************************************
;  IgnoreRecord
;    This will flag that the event is processed and exit the script
;    ignoring the record.
:IgnoreRecord

	FLAGPROCESSED OK

Exit
; ************************************************************************


; ************************************************************************
;  SendACK
;   Sends an Ack (#6) character out of the port and echoes it to the
;   communications display.
:SendACK

	Assign SendRec "<#2>PAK  <in_TransactionNumber:TEXT:4:RJ,ZP><#3>"
	Send $(SendRec)
	Echo Tx: $(SendRec)

Return
; ************************************************************************


; ************************************************************************
;  ClearFields
;   Clears out all the old field data from previous events
:ClearFields

	Assign RecordFormatAssigned "FALSE"
	Assign _G_IN_RECORD ""
	Assign _G_IN_RECORDFORMAT ""
	Assign RecType ""
	Assign in_Extn ""
	Assign in_Charge ""
	Assign in_StartDay ""
	Assign in_StartTime ""
	Assign in_Duration ""
	Assign in_DurationMinutes ""
	Assign in_DurationSeconds ""
	Assign in_Destination ""
	Assign in_Status ""
	Assign in_MaidID ""
	Assign in_Time ""
	Assign in_TransactionNumber ""

Return
; ************************************************************************