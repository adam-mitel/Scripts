; Coded For: 50.0.0.1
; Script Version: 50.0.0.1
; ************************************************************************
;
;  This is the HI configuration script for interfacing to Cisco Call
;  Manager exchange through the SOAP/AXL Interface.
;
;                                                               ph-161001
;
;  Modifications - AU - 17/10/2013
;	* Updated to utilise V50 specific features
;
;  Modifications - AU - 15/04/2013
;	* Resolved issue with HandleFailAndExit
;
;  Modifications - AU - 22/08/2012
;	* Added RoomStatus section to create RoomStatus events from Call Records
;	* Modified g_GuestName to only send the language code if we have one
;
;  Modifications - AU - 02/07/2012
;	* Moved from using GUESTNAME to NAMEDISPLAY
;	* Added options to set Services and Idle URL's in the INIT
;
;  Modifications - AU - 02/02/2012
;	* Added support for Do Not Disturb
;
;  Modifications - AU - 09/02/2011
;	* Modified Checkout to send a Bar command after resetting the name
;	* Added an option in the INIT to decide whether we need to send enhanced
;	  CSS values to the CallManager
;	* Modified ClassOfService label to use the default values received from
;	  FIAS interfaces if we are sending enhanced CSS commands
;	* Resolved issue with Guestnames in Checkin and RoomUpdate
;	* Modified RoomTransfer to use TRSRCGUESTNAME and new option for enhanced
;	  CSS values
;	* Added missing event labels
;	* Added support for Reset on Checkout with options in the INIT
;	* Added support to send an Unbar command on Checkin with an option in the INIT
;
;  Modifications - AU - 13/01/2011
;	* Added options at the top for s_TotalNameLength
;	* Modified all labels to allow for the new setting
;	* Modified echos in RoomUpdate, COS, Checkin and Checkout
;
;  Modifications - AU - 12/01/2011
;	* Modified Room Transfer label to tidy it up and remove additional
;	  unrequired work for the program
;	* Limited the guest names to 25 characters and applied an Alpha Numeric
;	  rule to resolve an issue with non-standard characters in XML strings.
;	* Modified Checkin, RoomUpdate and RoomTransfer to send the Language
;	  Code rather than the Language Description as we no longer receive
;	  this from the old Fidelio protocol.
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;
define WorkVal
;
define BarCSS
define UnbarCSS
define LocalCSS
define NationalCSS
;
define g_GuestName
;
define s_DoEnhancedCSS
define s_TotalNameLength
define s_NameLength
define s_UnbarOnCheckin
define s_ResetOnCheckout
define s_DoHardReset
define s_DoNotDisturb
define s_SetIdleURL
define s_SetServicesURL
define s_IdleURL
define s_ServicesURL
;
; ************************************************************************
;  INIT
;   This label is called at program startup.
:INIT

//	OPT: Assign the total name length here.  If you use the NamePadding
//	     option in the INI, you must minus the total amount of letters
//	     you used from 30 in this setting
	Assign s_TotalNameLength "30"

//	Leave this parameter alone
	Assign s_NameLength $(s_TotalNameLength) - 5

//	OPT: Assign the CSS names set in the Cisco CallManager
	Assign BarCSS "Barred"
	Assign UnbarCSS "Unbarred"
	Assign LocalCSS "Local"
	Assign NationalCSS "National"

//	OPT: Set whether we need to send Local and National CSS values to
//	     the Cisco CallManager.  This should only be enabled if the
//	     PMS system supports it
	Assign s_DoEnhancedCSS "FALSE"

//	OPT: Set whether we want to Unbar the phone on Checkin.  This should
//	     be enabled if we don't get a COS event from the PMS on Checkin
	Assign s_UnbarOnCheckin "FALSE"

//	OPT: Set whether we want to reset the phone on Checkout
	Assign s_ResetOnCheckout "FALSE"

//	OPT: Set whether we want to do a hard reset rather than a soft reset
	Assign s_DoHardReset "TRUE"

//	OPT: Set whether we want to process Do Not Disturb events
	Assign s_DoNotDisturb "FALSE"

//	OPT: Set whether we want to update the Idle URL on Checkin and Checkout
	Assign s_SetIdleURL "TRUE"

//	OPT: Set whether we want to update the Services URL on Checkin and Checkout
	Assign s_SetServicesURL "FALSE"

//	OPT: Set the Checkout Idle URL.  Do not include http://
	Assign s_IdleURL "192.168.137.119/Cisco/ClearCallHistory.xml"

//	OPT: Set the Services URL.  Do not include http://
	Assign s_ServicesURL ""

Exit
; ************************************************************************


; ************************************************************************
;  CallRecord
;   The script is executed from this label when we have a call record to
;   send.
:CallRecord

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomStatus
;   The script is executed from this label when we have a room status
;   event to send.
:RoomStatus

	if "$(_EV_RSCODE)" NE ""
		Echo If: [RS] Creating Room Status $(_EV_RSCODE) for $(_EV_ROOMNUMBER).
	if "$(_EV_RSCODE)" NE ""
		CreateRoomStatus "$(_EV_ROOMNUMBER)" "$(_EV_RSCODE)"

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Minibar
;   The script is executed from this label when we have a minibar event
;   to send.
:Minibar

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   The script is executed from this label when we have a message waiting
;   event to send.
:MessageWaiting

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  WakeupCall
;   The script is executed from this label when we have a wakeup call
;   event to send.
:WakeupCall

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkin
;   The script is executed from this label when we have a checkin event to
;   send.
:Checkin
  
  if "$(_EV_LANGCODE)" EQ ""
    Assign g_GuestName "<_EV_NAMEDISPLAY:TEXT:$(s_TotalNameLength):AN>"
  if "$(_EV_LANGCODE)" NE ""
    Assign g_GuestName "<_EV_NAMEDISPLAY:TEXT:$(s_NameLength):AN> (<_EV_LANGCODE:TEXT:2:AN>)"

  Echo CI: Setting name to "$(g_GuestName)" for Extension $(_EV_EXTNNUMBER).

  SOAPSetName "1" "$(_EV_EXTNNUMBER)" "<g_GuestName:TEXT:$(s_TotalNameLength):AN>"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo CI: Checkin failed for $(g_GuestName) on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto HandleFailAndExit

  if "$(_G_RESULT)" EQ "RETRY"
    Sleep 10000
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit

:CI_SkipName

  if "$(s_UnbarOnCheckin)" NE "TRUE"
    Goto CI_CheckIdleURL

  Echo CI: Setting CSS to $(UnbarCSS) on $(_EV_EXTNNUMBER).

  SOAPSetCOS "1" "$(_EV_EXTNNUMBER)" "$(UnbarCSS)"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo CI: Failed to set CSS to $(UnbarCSS) on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto HandleFailAndExit

  if "$(_G_RESULT)" EQ "RETRY"
    Sleep 10000
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit

:CI_CheckIdleURL

  if "$(s_SetIdleURL)" NE "TRUE"
    Goto CI_CheckServicesURL

  if "$(s_SetServicesURL)" EQ "TRUE"
    Echo CI: Setting Idle URL on $(_EV_EXTNNUMBER) to http:\/\/$(s_ServicesURL)?Room=$(_EV_ROOMNUMBER)
  if "$(s_SetServicesURL)" EQ "TRUE"
    SOAPSetIdleURL "$(_EV_EXTNNUMBER)" "http:\/\/$(s_ServicesURL)?Room=$(_EV_ROOMNUMBER)" "120"

  if "$(s_SetServicesURL)" NE "TRUE"
    Echo CI: Clearing Idle URL on $(_EV_EXTNNUMBER).
  if "$(s_SetServicesURL)" NE "TRUE"
    SOAPSetIdleURL "$(_EV_EXTNNUMBER)" "" ""

  if "$(_G_RESULT)" EQ "FALSE"
    Echo CI: Failed to set Idle URL on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto HandleFailAndExit

  if "$(_G_RESULT)" EQ "RETRY"
    Echo CI: Failed to set Idle URL on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit

:CI_CheckServicesURL

  if "$(s_SetServicesURL)" NE "TRUE"
    Goto CI_Complete

  Echo CI: Setting Services URL on $(_EV_EXTNNUMBER) to http:\/\/$(s_ServicesURL)?Room=$(_EV_ROOMNUMBER)
  SOAPSetServicesURL "$(_EV_EXTNNUMBER)" "http:\/\/$(s_ServicesURL)?Room=$(_EV_ROOMNUMBER)"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo CI: Failed to set Services URL on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto HandleFailAndExit

  if "$(_G_RESULT)" EQ "RETRY"
    Echo CI: Failed to set Services URL on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit

:CI_Complete

  Echo CI: Checkin complete for $(g_GuestName) on $(_EV_EXTNNUMBER).

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkout
;   The script is executed from this label when we have a checkout event
;   to send.
:Checkout

  Echo CO: Setting name to "Vacant $(_EV_ROOMNUMBER)" for Extension $(_EV_EXTNNUMBER).

  SOAPSetName "1" "$(_EV_EXTNNUMBER)" "Vacant $(_EV_ROOMNUMBER)"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo CO: Checkout failed on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto HandleFailAndExit

  if "$(_G_RESULT)" EQ "RETRY"
    Sleep 10000
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit

  Echo CO: Setting CSS to "$(BarCSS)" for Extension $(_EV_EXTNNUMBER).

  SOAPSetCOS "1" "$(_EV_EXTNNUMBER)" "$(BarCSS)"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo CO: Checkout failed on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto HandleFailAndExit

  if "$(_G_RESULT)" EQ "RETRY"
    Sleep 10000
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit

  if "$(s_ResetOnCheckout)" NE "TRUE"
    Goto CO_CheckIdleURL

  if "$(s_DoHardReset)" EQ "TRUE"
    Echo CO: Starting a Hard Reset on $(_EV_EXTNNUMBER).
  if "$(s_DoHardReset)" EQ "TRUE"
    SOAPRESETPHONE "1" "$(_EV_EXTNNUMBER)" "TRUE"

  if "$(s_DoHardReset)" NE "TRUE"
    Echo CO: Starting a Soft Reset on $(_EV_EXTNNUMBER).
  if "$(s_DoHardReset)" NE "TRUE"
    SOAPRESETPHONE "1" "$(_EV_EXTNNUMBER)" "FALSE"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo CO: Checkout failed on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto HandleFailAndExit

  if "$(_G_RESULT)" EQ "RETRY"
    Sleep 10000
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit

:CO_CheckIdleURL

  if "$(s_SetIdleURL)" NE "TRUE"
    Goto CO_Complete

    Echo CO: Setting Idle URL on $(_EV_EXTNNUMBER) to http:\/\/$(s_IdleURL)
    SOAPSetIdleURL "$(_EV_EXTNNUMBER)" "http:\/\/$(s_IdleURL)" "120"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo CI: Failed to set Idle URL on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto HandleFailAndExit

  if "$(_G_RESULT)" EQ "RETRY"
    Echo CI: Failed to set Idle URL on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit

:CO_Complete

  Echo CO: Checkout complete for $(_EV_EXTNNUMBER).

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   The script is executed from this label when we have a class of service
;   event to send.
:ClassOfService

  if "$(_EV_COSALLOWOUTGOING)" NE "TRUE"
    Assign WorkVal "$(BarCSS)"
  if "$(_EV_COSALLOWOUTGOING)" EQ "TRUE"
    Assign WorkVal "$(UnbarCSS)"

  if "$(s_DoEnhancedCSS)" NE "TRUE"
    Goto COS_SkipEnhancedCSS

  if "$(_EV_COSCOVERAGEPATH)" EQ "0"
    Assign WorkVal "$(BarCSS)"
  if "$(_EV_COSCOVERAGEPATH)" EQ "1"
    Assign WorkVal "$(LocalCSS)"
  if "$(_EV_COSCOVERAGEPATH)" EQ "2"
    Assign WorkVal "$(NationalCSS)"
  if "$(_EV_COSCOVERAGEPATH)" EQ "3"
    Assign WorkVal "$(UnbarCSS)"

:COS_SkipEnhancedCSS

  SOAPSetCOS "1" "$(_EV_EXTNNUMBER)" "$(WorkVal)"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo COS: Failed to set CSS to $(WorkVal) on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto HandleFailAndExit

  if "$(_G_RESULT)" EQ "RETRY"
    Sleep 10000
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit
    
  Echo COS: Completed update of CSS $(WorkVal) on $(_EV_EXTNNUMBER).

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   The script is executed from this label when we have a room update
;   event to send.
:RoomUpdate

  if "$(_EV_LANGCODE)" EQ ""
    Assign g_GuestName "<_EV_NAMEDISPLAY:TEXT:$(s_TotalNameLength):AN>"
  if "$(_EV_LANGCODE)" NE ""
    Assign g_GuestName "<_EV_NAMEDISPLAY:TEXT:$(s_NameLength):AN> (<_EV_LANGCODE:TEXT:2:AN>)"

  SOAPSetName "1" "$(_EV_EXTNNUMBER)" "<g_GuestName:TEXT:$(s_TotalNameLength):AN>"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo RU: Failed to change name to $(g_GuestName) on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto HandleFailAndExit

  if "$(_G_RESULT)" EQ "RETRY"
    Sleep 10000
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit

  Echo RU: Completed name change to $(g_GuestName) on $(_EV_EXTNNUMBER).

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   The script is executed from this label when we have a Budget Limit
;   event to send.
:BudgetLimit

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   The script is executed from this label when we have a Room Transfer
;   event to send.
:RoomTransfer

  if "<_EV_EXTNNUMBER:TEXT:6:RJ,SP>" EQ "      "
    goto TRSkip

  Echo TR: Transfer from $(_EV_EXTNNUMBER) to $(_EV_TRDESTEXTNNUMBER).

:TR_RetryName
; We need to check out the source room.
  Echo TR: Checking out $(_EV_EXTNNUMBER).

  SOAPSetName "1" "$(_EV_EXTNNUMBER)" "Vacant $(_EV_ROOMNUMBER)"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo TR: Failed to Checkout $(_EV_EXTNNUMBER).

  if "$(_G_RESULT)" EQ "RETRY"
    Sleep 10000
  if "$(_G_RESULT)" EQ "RETRY"
    Goto TR_RetryName

:TR_RetryCOS

  Echo TR: Set CSS to $(BarCSS) for $(_EV_EXTNNUMBER).

  SOAPSetCOS "1" "$(_EV_EXTNNUMBER)" "$(BarCSS)"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo TR: Failed to update CSS on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto HandleFailAndExit

  if "$(_G_RESULT)" EQ "RETRY"
    Sleep 10000
  if "$(_G_RESULT)" EQ "RETRY"
    Goto TR_RetryCOS

  if "$(s_ResetOnCheckout)" NE "TRUE"
    Goto TR_CheckIdleURL

  if "$(s_DoHardReset)" EQ "TRUE"
    Echo CO: Starting a Hard Reset on $(_EV_EXTNNUMBER).
  if "$(s_DoHardReset)" EQ "TRUE"
    SOAPRESETPHONE "1" "$(_EV_EXTNNUMBER)" "TRUE"

  if "$(s_DoHardReset)" NE "TRUE"
    Echo CO: Starting a Soft Reset on $(_EV_EXTNNUMBER).
  if "$(s_DoHardReset)" NE "TRUE"
    SOAPRESETPHONE "1" "$(_EV_EXTNNUMBER)" "FALSE"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo TR: Checkout failed on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto TR_CheckoutCompleteNoEcho

  if "$(_G_RESULT)" EQ "RETRY"
    Sleep 10000
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit

:TR_CheckIdleURL

  if "$(s_SetIdleURL)" NE "TRUE"
    Goto TR_CheckoutComplete

    Echo TR: Setting Idle URL on $(_EV_EXTNNUMBER) to http:\/\/$(s_IdleURL)
    SOAPSetIdleURL "$(_EV_EXTNNUMBER)" "http:\/\/$(s_IdleURL)" "120"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo TR: Failed to set Idle URL on $(_EV_EXTNNUMBER).

  if "$(_G_RESULT)" EQ "RETRY"
    Echo TR: Failed to set Idle URL on $(_EV_EXTNNUMBER).
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit

:TR_CheckoutComplete

  Echo TR: Checkout of $(_EV_EXTNNUMBER) Complete

:TR_CheckoutCompleteNoEcho

  if "<_EV_TRDESTEXTNNUMBER:TEXT:6:RJ,SP>" EQ "      "
    goto TRSkip

; If can make outgoing calls, we check the destination in
  if "$(_EV_TRALLOWOUTGOING)" NE "TRUE"
     Assign WorkVal "$(BarCSS)"
  if "$(_EV_TRALLOWOUTGOING)" EQ "TRUE"
     Assign WorkVal "$(UnbarCSS)"

  if "$(s_DoEnhancedCSS)" NE "TRUE"
    Goto TR_SkipEnhancedCSS

  if "$(_EV_TRCOVERAGEPATH)" EQ "0"
    Assign WorkVal "$(BarCSS)"
  if "$(_EV_TRCOVERAGEPATH)" EQ "1"
    Assign WorkVal "$(LocalCSS)"
  if "$(_EV_TRCOVERAGEPATH)" EQ "2"
    Assign WorkVal "$(NationalCSS)"
  if "$(_EV_TRCOVERAGEPATH)" EQ "3"
    Assign WorkVal "$(UnbarCSS)"

:TR_RetryDstName
:TR_SkipEnhancedCSS

  if "$(_EV_LANGCODE)" EQ ""
    Assign g_GuestName "<_EV_NAMEDISPLAY:TEXT:$(s_TotalNameLength):AN>"
  if "$(_EV_LANGCODE)" NE ""
    Assign g_GuestName "<_EV_NAMEDISPLAY:TEXT:$(s_NameLength):AN> (<_EV_LANGCODE:TEXT:2:AN>)"

  SOAPSetName "1" "$(_EV_TRDESTEXTNNUMBER)" "<g_GuestName:TEXT:$(s_TotalNameLength):AN>"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo TR: Failed to Check in $(_EV_EXTNNUMBER).

  if "$(_G_RESULT)" EQ "RETRY"
    Sleep 10000
  if "$(_G_RESULT)" EQ "RETRY"
    Goto TR_RetryDstName

  Echo TR: Checkin complete for $(g_GuestName) on $(_EV_TRDESTEXTNNUMBER).

:TR_RetryDstCOS
  Echo TR: Set CSS to $(WorkVal) for $(_EV_TRDESTEXTNNUMBER).
  SOAPSetCOS "1" "$(_EV_TRDESTEXTNNUMBER)" "$(WorkVal)"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo TR: Failed to update CSS on $(_EV_TRDESTEXTNNUMBER).

  if "$(_G_RESULT)" EQ "RETRY"
    Sleep 10000
  if "$(_G_RESULT)" EQ "RETRY"
    Goto TR_RetryDstCOS

:TRSkip

:TR_CICheckIdleURL

  if "$(s_SetIdleURL)" NE "TRUE"
    Goto TR_CICheckServicesURL

  if "$(s_SetServicesURL)" EQ "TRUE"
    Echo TR: Setting Idle URL on $(_EV_TRDESTEXTNNUMBER) to http:\/\/$(s_ServicesURL)?Room=$(_EV_TRDESTROOMNUMBER)
  if "$(s_SetServicesURL)" EQ "TRUE"
    SOAPSetIdleURL "$(_EV_TRDESTEXTNNUMBER)" "http:\/\/$(s_ServicesURL)?Room=$(_EV_TRDESTROOMNUMBER)" "120"

  if "$(s_SetServicesURL)" NE "TRUE"
    Echo TR: Clearing Idle URL on $(_EV_TRDESTEXTNNUMBER).
  if "$(s_SetServicesURL)" NE "TRUE"
    SOAPSetIdleURL "$(_EV_TRDESTEXTNNUMBER)" "" ""

  if "$(_G_RESULT)" EQ "FALSE"
    Echo TR: Failed to set Idle URL on $(_EV_TRDESTEXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto HandleFailAndExit

  if "$(_G_RESULT)" EQ "RETRY"
    Echo TR: Failed to set Idle URL on $(_EV_TRDESTEXTNNUMBER).
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit

:TR_CICheckServicesURL

  if "$(s_SetServicesURL)" NE "TRUE"
    Goto TR_CheckinComplete

  Echo TR: Setting Services URL on $(_EV_TRDESTEXTNNUMBER) to http:\/\/$(s_ServicesURL)?Room=$(_EV_TRDESTROOMNUMBER)
  SOAPSetServicesURL "$(_EV_TRDESTEXTNNUMBER)" "http:\/\/$(s_ServicesURL)?Room=$(_EV_TRDESTROOMNUMBER)"

  if "$(_G_RESULT)" EQ "FALSE"
    Echo CI: Failed to set Services URL on $(_EV_TRDESTEXTNNUMBER).
  if "$(_G_RESULT)" EQ "FALSE"
    Goto HandleFailAndExit

  if "$(_G_RESULT)" EQ "RETRY"
    Echo CI: Failed to set Services URL on $(_EV_TRDESTEXTNNUMBER).
  if "$(_G_RESULT)" EQ "RETRY"
    Goto HandleFailAndExit

:TR_CheckinComplete

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   The script is executed from this label when we have a Extra Guest
;   event to send.
:ExtraGuest

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   The script is executed from this label when we have a Do Not Disturb
;   event to send.
:DoNotDisturb

	if "$(s_DoNotDisturb)" NE "TRUE"
		Goto HandleOKAndExit

	Assign WorkVal "FALSE"
	if "$(_EV_DNDACTION)" EQ "DONOTDISTURB"
		Assign WorkVal "TRUE"

	SOAPSetDND "$(_EV_EXTNNUMBER)" "$(WorkVal)"

	if "$(_G_RESULT)" EQ "FALSE"
		Echo DND: Failed to set DND to $(WorkVal) on $(_EV_EXTNNUMBER).
	if "$(_G_RESULT)" EQ "FALSE"
		Goto HandleOkAndExit

	if "$(_G_RESULT)" EQ "RETRY"
		Sleep 10000
	if "$(_G_RESULT)" EQ "RETRY"
		Goto HandleFailAndExit

	Echo DND: Completed setting DND to $(WorkVal) on $(_EV_EXTNNUMBER).

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  PIN
;   The script is executed from this label when we have a PIN event to
;   send.
:PIN

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  DDI
;   The script is executed from this label when we have a DDI event to
;   send.
:DDI

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  GuestInfo
;   This label is executed by the program when we have a Guest Information
;   event to send.
:GuestInfo

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  BillEnquiry
;   This label is executed by the program when we have a Bill Enquiry
;   event to send.
:BillEnquiry

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ExpressCheckout
;   This label is executed by the program when we have an Express Checkout
;   event to send.
:ExpressCheckout

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  BillResponse
;   This label is executed by the program when we have a Bill Response
;   event to send.
:BillResponse

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ExpressCheckoutResponse
;   This label is executed by the program when we have an Express Checkout
;   Response event to send.
:ExpressCheckoutResponse

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  TVRights
;   This label is executed by the program when we have a Television Rights
;   event to send.
:TVRights

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  CallPackage
;   This label is executed by the program when we have a Call Package
;   event to send.
:CallPackage

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  CheckIncoming
;    Execution is periodically carried out from here by the program to
;    check for incoming data during idle times.
:CheckIncoming

Exit
; ************************************************************************


; ************************************************************************
;  HandleFailAndExit
;   This label is called when we have failed to send a record and need
;   to flag it as processed to move on to the next event.
:HandleFailAndExit

	Sleep 5000
	FlagProcessed OK

Exit
; ************************************************************************


; ************************************************************************
;  HandleOKAndExit
;   This label is called when we have completed sending a record and need
;   to flag it as processed to move on to the next event.
:HandleOKAndExit

	FlagProcessed OK

Exit
; ************************************************************************


; ************************************************************************
;  IgnoreRecord
;   This label is called when we are not interested in a particular record
;   and need to flag it as processed to move on to the next event.
:IgnoreRecord

	FlagProcessed OK

Exit
; ************************************************************************