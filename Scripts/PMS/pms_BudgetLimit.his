; Coded For: 50.0.0.1
; Script Version: 50.0.0.1
; ************************************************************************
;
;  This is the HI configuration script for processing Call Records to the
;  budget limit
;
;                                                               ph-061000
;
;  Modifications - AU - 17/10/2013
;	* Updated to utilise V50 specific features
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;

define COS_Result
define SendRec
define COS_Check_Enabled

; ************************************************************************
;  INIT
;   Called at program start-up.  Gives you the opportunity to initialise
;   any script variables.
:INIT

; Set this value to TRUE to make HI check the COS of an extn before posting
; the charge and then pop up a message if the line should be barred

assign COS_Check_Enabled "FALSE"

exit
; ************************************************************************


; ************************************************************************
;  CallRecord
;   The script is executed from this label when we have a call record to
;   send.
:CallRecord

;If the Option in the INIT section is set to FALSE do not do these checks
if "$(COS_Check_Enabled)" EQ "FALSE"
goto IgnoreCheck

;Ask HI to check the Extension that has made a call is allowed to make outgoing calls
QueryAllowCalls "$(_EV_ROOMNUMBER)"

;Assign the result (TRUE or FALSE) to the varible COS_Result
Assign COS_Result "$(_G_RESULT)"

;If the result is false goto COS_FALSE
if "$(COS_Result)" EQ "FALSE" 
goto COS_FALSE

:IgnoreCheck

AddPhoneChargeToRS "$(_EV_ROOMNUMBER)" "$(_EV_CALLCHARGEPENCE)"
echo <_EV_CALLDATE:DATE:8:DD/MM/YY> <_EV_CALLTIME:TIME:5:HH:MM> Room: <_EV_ROOMNUMBER:TEXT:10:LJ,SP> Charge: <_EV_CALLCHARGE:NUMBER:8:LJ,SP,2DP> DD: <_EV_CALLDIALLEDDIGITS:TEXT:18:LJ,SP> DUR: <_EV_CALLDURATION:TIME:8:HH:MM:SS>

goto IgnoreRecord

:COS_FALSE

;You will only get here if the extension should not be able to make calls

;Handle the call as normal
AddPhoneChargeToRS "$(_EV_ROOMNUMBER)" "$(_EV_CALLCHARGEPENCE)"
echo <_EV_CALLDATE:DATE:8:DD/MM/YY> <_EV_CALLTIME:TIME:5:HH:MM> Room: <_EV_ROOMNUMBER:TEXT:10:LJ,SP> Charge: <_EV_CALLCHARGE:NUMBER:8:LJ,SP,2DP> DD: <_EV_CALLDIALLEDDIGITS:TEXT:18:LJ,SP> DUR: <_EV_CALLDURATION:TIME:8:HH:MM:SS>

;Enter an additional line to the log file identifying the room made a call
echo Info: Outgoing call from Barred Room! Room Number: <_EV_ROOMNUMBER:TEXT:10:LJ,SP> Date: <_EV_CALLDATE:DATE:8:DD/MM/YY> Time: <_EV_CALLTIME:TIME:5:HH:MM> DD: <_EV_CALLDIALLEDDIGITS:TEXT:18:LJ,SP> Charge: <_EV_CALLCHARGE:NUMBER:8:LJ,SP,2DP>"

assign SendRec "Info: Outgoing call from Barred Room! Room Number: <_EV_ROOMNUMBER:TEXT:10:LJ,SP> Date: <_EV_CALLDATE:DATE:8:DD/MM/YY> Time: <_EV_CALLTIME:TIME:5:HH:MM> DD: <_EV_CALLDIALLEDDIGITS:TEXT:18:LJ,SP> Charge: <_EV_CALLCHARGE:NUMBER:8:LJ,SP,2DP>"

;Use TigPopUp to inform the user that a call has been made from a barred extension
;PopupBroadcast $(SendRec)

goto IgnoreRecord

; ************************************************************************


; ************************************************************************
;  RoomStatus
;   The script is executed from this label when we have a room status
;   event to send.
:RoomStatus

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Minibar
;   The script is executed from this label when we have a minibar event
;   to send.
:Minibar

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   The script is executed from this label when we have a message waiting
;   event to send.
:MessageWaiting

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  WakeupCall
;   The script is executed from this label when we have a wakeup call
;   event to send.
:WakeupCall

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Checkin
;   The script is executed from this label when we have a check in event
;   to send.
:Checkin

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Checkout
;   The script is executed from this label when we have a check out event
;   to send.
:Checkout

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   The script is executed from this label when we have a class of service
;   event to send.
:ClassOfService

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   The script is executed from this label when we have a room update
;   event to send.
:RoomUpdate

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   The script is executed from this label when we have a budget limit
;   event to send.
:BudgetLimit

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   The script is executed from this label when we have a room transfer
;   event to send.
:RoomTransfer

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   The script is executed from this label when we have an extra guest
;   event to send.
:ExtraGuest

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   The script is executed from this label when we have a do not disturb
;   event to send.
:DoNotDisturb

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  PIN
;   The script is executed from this label when we have a set or clear pin
;   event to send.
:PIN

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DDI
;   The script is executed from this label when we have a set or clear ddi
;   event to send.
:DDI

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  CheckIncoming
;    Execution is periodically carried out from here by the program to
;    check for incoming data during idle times.
; ************************************************************************
:CheckIncoming

Exit
; ************************************************************************


; ******************************************************************************
;  IgnoreRecord
;    This will flag that the event is processed and exit the script effectively
;    ignoring the record.

:IgnoreRecord
  FLAGPROCESSED OK
EXIT
; ******************************************************************************
