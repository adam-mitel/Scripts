; Coded For: 50.0.0.1
; Script Version: 50.0.3.0
; ************************************************************************
;
;  This is the HI configuration script for interfacing to a Fidelio
;  Iface PC.
;
;                                                               ph-210700
;
;  Modifications - AU - 08/01/2018 - 50.0.3.0
;	* Modified maximum charge to be an option, disabled by default
;
;  Modifications - AU - 23/10/2014 - 50.0.2.0
;	* Added support for DND commands
;
;  Modifications - AU - 17/10/2013
;	* Updated to utilise V50 specific features
;
;  Modifications - AU - 01/02/2013
;	* Modified CallRecord to send a maximum charge of £99.99 pence due to an
;	  Opera limitation
;
;  Modifications - AU - 30/05/2012
;	* Resolved an issue with the label QUITRECEIVING
;
;  Modifications - AU - 01/03/2012
;	* Modified CreateSREvents so we create a Class of Service when we receive
;	  a 2, as this is what we now receive in IFC8 for a bar
;	* Modified CheckIncoming so we process a record if we receive an SOH
;
;  Modifications - AU - 29/10/2010
;	* Added a clause to not process DN commands
;	* Removed echo from PeriodicCheck
;	* Added an option in the INIT to set whether to process incoming events
;
;  Modifications - AU - 20/06/2010
;	* Added ENQ Heartbeat to PeriodicCheck
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;
; *** Variable definitions
; SendRec is the record that we use to send data
define SendRec          // The record we build to send to Carahost
define ReceivedRec      // The record we receive
define RecType		// The record type that we have received
define WorkVal		// General purpose work variable used at regular
				//  intervals throughout the script.

define CDRFormat		//options are OLD or NEW, NEW is HHMMSS for Duration
define MBFormat		//options are OLD or NEW, NEW is ITEM and Quantity OLD is price
define IF_Comms		//options are SERIAL or IP
define MaximumCharge
define ProcessIncomingMessages

; Variables used for incoming data items.  These items are the seperate fields
;  we can receive.
define in_Room
define in_LNStatus
define in_Reservation
define in_GuestID
define in_Wakeup1
define in_Wakeup2
define in_LanguageDesc
define in_LanguageCode
define in_COS
define in_MWStatus
define in_RmStatus
define in_GuestName
define in_FlagValue
define in_VNType
define in_VNNumber
define in_DestRoom
define in_StationID
define in_BCCChar
define in_Date
define in_Time

define flg_SendingAfterReceive
define flg_NextIsBCC

define g_Charge

; Options available for Fidelio


; ************************************************************************
;  INIT
;   Called at program start-up.  Gives you the opportunity to initialise
;   any script variables.
; ************************************************************************
:INIT

  assign flg_SendingAfterReceive "FALSE"

;Set the call record format to either OLD or NEW.  New is used in IFC8 or above.
  assign CDRFormat "OLD"

;Set the Mini Bar Record format to either OLD or NEW.  New is used in IFC8 or above.
  Assign MBFormat "NEW"

;Set to TRUE if we want to cap the maximum amount we send to Opera at 99.99
  Assign MaximumCharge "FALSE"

;Specify "SERIAL" or "IP".  Please ensure the quotes remain there.
  Assign IF_Comms "IP"

;Specify whether we want to process incoming events, YES or NO.
  Assign ProcessIncomingMessages "YES"

if "$(IF_Comms)" EQ "SERIAL"
	Sleep 1000

if "$(IF_Comms)" EQ "SERIAL"
	OpenPort

Exit
; ************************************************************************


; ************************************************************************
;  PORT_OPENED
;   Called once the IP connection has been established
:PORT_OPENED

Exit
; ************************************************************************


; ************************************************************************
;  CallRecord
;   The script is executed from this label when we have a call record to
;   send.
; ************************************************************************
:CallRecord

; OPT: If we are to ignore call records and not send them, you should uncomment
;      this next line.
//goto IgnoreRecord

if "$(MaximumCharge)" NE "TRUE"
	Assign g_Charge "$(_EV_CALLCHARGEPENCE)"
if "$(MaximumCharge)" NE "TRUE"
	Goto CallRecord_SkipMaxCharge

Assign g_Charge "$(_EV_CALLCHARGEPENCE)"
if $(_EV_CALLCHARGEPENCE) GT 9999
	Echo If: Actual Call charge is $(g_Charge) - Sending 9999 due to Opera limitation.
if $(_EV_CALLCHARGEPENCE) GT 9999
	Assign g_Charge "9999"

:CallRecord_SkipMaxCharge

if "$(CDRFormat)" EQ "OLD"
	assign SendRec "CR<#2><_EV_CALLTIME:TIME:4:HHMM> <_EV_ROOMNUMBER:TEXT:5:RJ,ZP> <_EV_CALLTALKTIME:TIME:4:^MM^SS> <_EV_CALLDIALLEDDIGITS:TEXT:18:LJ,SP> <g_Charge:TEXT:6:RJ,ZP><#3>"
If "$(CDRFormat)" EQ "NEW"
	assign SendRec "CR<#2><_EV_CALLTIME:TIME:4:HHMM> <_EV_ROOMNUMBER:TEXT:5:RJ,ZP> <_EV_CALLDURATION:TIME:6:HHMMSS> <_EV_CALLDIALLEDDIGITS:TEXT:18:LJ,SP> <g_Charge:TEXT:6:RJ,ZP><#3>"

GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#1>$(SendRec)$(_G_BCC)"

; OPT: Only enable the following line if you wish to use TigHotel to control 
;      budget limits.
//AddPhoneChargeToRS "$(_EV_ROOMNUMBER)" "$(_EV_CALLCHARGEPENCE)"

echo Current Call: <_EV_CALLDATE:DATE:6:DDMMYY> <_EV_CALLTIME:TIME:4:HHMM> ID: <_EV_ID:TEXT:5:RJ,ZP>
goto SendRecord
; ************************************************************************


; ************************************************************************
;  RoomStatus
;   The script is executed from this label when we have a room status
;   event to send.
; ************************************************************************
:RoomStatus

; OPT: If we are to ignore room status events and not send them, you should
;      uncomment this next line.
//goto IgnoreRecord

; Sort out the maid id if there is one.
assignasis WorkVal "<_EV_RSMAIDID:TEXT:3:RJ,ZP>"
if "$(_EV_RSMAIDID)" EQ ""
	assign WorkVal "001"

assign SendRec "RS<#2><_EV_EVENTTIME:TIME:4:HHMM> <_EV_ROOMNUMBER:TEXT:5:RJ,ZP> <_EV_RSCODE:TEXT:2:RJ,ZP> $(WorkVal)<#3>"
GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#1>$(SendRec)$(_G_BCC)"

goto SendRecord
; ************************************************************************


; ************************************************************************
;  Minibar
;   The script is executed from this label when we have a minibar event
;   to send.
; ************************************************************************
:Minibar

; OPT: If we want to send Minibar event details to the Fidelio, comment out
;      the following line.
//goto IgnoreRecord

; Sort out the maid id if there is one.
assignasis WorkVal "<_EV_MBMAIDID:TEXT:3:RJ,ZP>"
if "$(_EV_MBMAIDID)" EQ ""
	assign WorkVal "001"

if "$(MBFormat)" EQ "OLD"
	assign SendRec "MB<#2><_EV_EVENTTIME:TIME:4:HHMM> <_EV_ROOMNUMBER:TEXT:5:RJ,ZP> $(WorkVal) <_EV_MBCHARGEPENCE:TEXT:6:RJ,ZP><#3>"
if "$(MBFormat)" EQ "NEW"
	assign SendRec "MB<#2><_EV_EVENTDATE:DATE:6:DDMMYY> <_EV_EVENTTIME:TIME:4:HHMM> <_EV_ROOMNUMBER:TEXT:6:RJ,ZP> $(WorkVal) <_EV_MBITEMCODE:TEXT:4:RJ,ZP> <_EV_MBITEMQUANTITY:TEXT:3:RJ:ZP> <_EV_MBCHARGEPENCE:TEXT:10:RJ,ZP><#3>"


GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#1>$(SendRec)$(_G_BCC)"

goto SendRecord
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   The script is executed from this label when we have a message waiting
;   event to send.
; ************************************************************************
:MessageWaiting

; OPT: If we are to ignore message waiting events and not send them, you should
;      uncomment this next line.
//goto IgnoreRecord

; Default to 0 for mw light off
assign WorkVal "4"

; set it to 1 if it is an mw light on
if "$(_EV_MWSTATE)" EQ "TRUE"
	assign WorkVal "5"

assign SendRec "MW<#2><_EV_ROOMNUMBER:TEXT:5:RJ,ZP> $(WorkVal)<#3>"
GenerateBCCChar "" "$(SendRec)"
assign SendRec "<#1>$(SendRec)$(_G_BCC)"

goto SendRecord

; ************************************************************************
;  WakeupCall
;   The script is executed from this label when we have a wakeup call
;   event to send.
; ************************************************************************
:WakeupCall

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Checkin
;   The script is executed from this label when we have a check in event
;   to send.
; ************************************************************************
:Checkin

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Checkout
;   The script is executed from this label when we have a check out event
;   to send.
; ************************************************************************
:Checkout

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   The script is executed from this label when we have a class of service
;   event to send.
; ************************************************************************
:ClassOfService

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   The script is executed from this label when we have a room update
;   event to send.
; ************************************************************************
:RoomUpdate

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   The script is executed from this label when we have a budget limit
;   event to send.
; ************************************************************************
:BudgetLimit

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   The script is executed from this label when we have a room transfer
;   event to send.
; ************************************************************************
:RoomTransfer

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   The script is executed from this label when we have an extra guest
;   event to send.
; ************************************************************************
:ExtraGuest

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   The script is executed from this label when we have a do not disturb
;   event to send.
; ************************************************************************
:DoNotDisturb

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  PIN
;   The script is executed from this label when we have a set or clear pin
;   event to send.
; ************************************************************************
:PIN

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DDI
;   The script is executed from this label when we have a set or clear ddi
;   event to send.
:DDI

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
:PeriodicCheck

if "$(IF_Comms)" EQ "SERIAL"
	ClosePort

if "$(IF_Comms)" EQ "SERIAL"
	Sleep 500

if "$(IF_Comms)" EQ "SERIAL"
	OpenPort

Echo If: Sending ENQ as Heartbeat
Send <#5>
Echo Tx: <#5>

Exit
; ************************************************************************


; ************************************************************************
;  ReceiveRecord
;    This section is Called when we have received an ENQ from the PMS
; ************************************************************************
:ReceiveRecord

; Send the ACK to the received ENQ
call SENDACK

; We now wait for the SOH character to arrive

; OPT: To change the amount of time we wait for the record to start being sent
;      after we have received an ENQ and sent an ACK, we change the parameter
;      on the next line.
StartWaitTimer 5

:AWAITRECSTART

Sleep 100

; Read the next character available at the port.
ReadFromPort 1 

; Start our ReceivedRec with the character if we have received one
if "$(_PORTCHARS)" NE ""
  assign ReceivedRec "$(_PORTCHARS)"

; Timer has expired so we're obviously not being sent anything.  Quit
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
  goto SkipProcessIncoming

; Go back if we have not received anything at all.
if "$(_PORTCHARS)" EQ ""
	goto AWAITRECSTART

; SOH Arrived.  Lets continue
if "$(_PORTCHARS)" EQ "<#1>"
	goto GETRECTYPE

; To get here, we have received something else.  Quit.
goto SkipProcessIncoming

; We now have to get the record type from the next 2 characters if we get here
:GETRECTYPE

assign _G_IN_RECORDFORMAT ""

; Read the next 2 characters
ReadFromPort 2 2

; Add them to the display record if we receive them
if "$(_PORTCHARS)" NE ""
	assign ReceivedRec "$(ReceivedRec)" "$(_PORTCHARS)"

; Test the record type and set up for the receiving of it.
assign RecType "$(_PORTCHARS)"

; OPT: We have receive the start of the record and determined its type.  We
;      need to receive the rest of the record and the next line is the amount
;      of time we should allow for it.
StartWaitTimer 10

assign flg_NextIsBCC "FALSE"

:READINGREC
; Read the next character
ReadFromPort 1 1

; Add it to ReceivedRec if there is anything
if "$(_PORTCHARS)" NE ""
	assign ReceivedRec "$(ReceivedRec)" "$(_PORTCHARS)"

; if it is an ETX we have finished
if "$(_PORTCHARS)" EQ "<#3>"
   assign flg_NextIsBCC "TRUE"
if "$(_PORTCHARS)" EQ "<#3>"
   goto READINGREC

if "$(flg_NextIsBCC)" EQ "TRUE"
	echo Rx: $(ReceivedRec)
if "$(flg_NextIsBCC)" EQ "TRUE"
  call SENDACK
if "$(flg_NextIsBCC)" EQ "TRUE"
	goto FINISHEDRECEIVING

; If we timeout, we need to quit
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	goto SkipProcessIncoming

; We are still receiving a record so go back.
goto READINGREC

; ************************************************************************
;  FINISHEDRECEIVING
;    We now have a complete record, time to process it.
; ************************************************************************
:FINISHEDRECEIVING

if "$(ProcessIncomingMessages)" NE "YES"
	Goto SkipProcessIncoming

; OPT: Comment these two lines if you want to ignore all incoming system
;      refresh records.
if "$(RecType)" EQ "SR"
  call SRRECORD

; OPT: Comment these two lines if you want to ignore all incoming checkin,
;      checkout and level 9 barring records.
if "$(RecType)" EQ "LN"
	call LNRECORD

; OPT: Comment these two lines if you want to ignore all incoming wakeup
;      records.
if "$(RecType)" EQ "WK"
	call WKRECORD

; OPT: Comment these two lines if you want to ignore all incoming message
;      waiting records.
if "$(RecType)" EQ "MW"
	call MWRECORD

; OPT: Comment these two lines if you want to ignore all incoming room transfer
;      records.
if "$(RecType)" EQ "TR"
	call TRRECORD

; OPT: Comment these two lines if you want to ignore all incoming DDI set/clear
;      records.
if "$(RecType)" EQ "VN"
	call DSRECORD

; OPT: Comment these two lines if you want to ignore all incoming DND set/clear
;      records.
if "$(RecType)" EQ "DN"
	call DNRECORD

; _G_IN_RECORDFORMAT will have the correct format for the record we are
; receiving.

; If this record is one we are not interested in, skip the next few lines.
if "$(RecType)" EQ ""
  goto SkipProcessIncoming

; Extract the fields from the record and process them to create the events.
assign _G_IN_RECORD "$(ReceivedRec)"
parseInRecord
if "$(_G_IN_RECORDPARSEERROR)" EQ "TRUE"
	goto ReceiveError

if "$(RecType)" EQ "SR"
	call CreateSREvents
if "$(RecType)" EQ "LN"
	call CreateLNEvent
if "$(RecType)" EQ "WK"
	call CreateWKEvent
if "$(RecType)" EQ "MW"
	call CreateMWEvent
if "$(RecType)" EQ "TR"
	call CreateTREvent
if "$(RecType)" EQ "VN"
	call HandleDDIRecord
if "$(RecType)" EQ "DN"
	call CreateDNEvent

:SkipProcessIncoming

Exit


; ************************************************************************
;  SRRECORD
;    Sets up the expected format for the system refresh record.
; ************************************************************************
:SRRECORD

  assign RecType "SR"

  containsstr "<#0><#3>" "$(ReceivedRec)" "FALSE"
  if "$(_G_RESULT)" EQ "TRUE"
  	assignasis _G_IN_RECORDFORMAT "<#1>SR<#2><in_Room:TEXT:5:RJ,ZP> <in_Reservation:TEXT:6:LJ,SP> <in_Wakeup1:TIME:4:HHMM> <in_Wakeup2:TIME:4:HHMM> <in_LanguageDesc:TEXT:14:LJ,SP><in_LanguageCode:NUMBER:2:RJ,ZP> <in_COS:NUMBER:1:> <in_MWStatus:NUMBER:1:> <in_RmStatus:NUMBER:2:RJ,ZP> <in_GuestName:TEXT:255:><#0><#3><in_BCCChar:TEXT:1:>"
  if "$(_G_RESULT)" EQ "TRUE"
  	Return

  assignasis _G_IN_RECORDFORMAT "<#1>SR<#2><in_Room:TEXT:5:RJ,ZP> <in_Reservation:TEXT:6:LJ,SP> <in_Wakeup1:TIME:4:HHMM> <in_Wakeup2:TIME:4:HHMM> <in_LanguageDesc:TEXT:14:LJ,SP><in_LanguageCode:NUMBER:2:RJ,ZP> <in_COS:NUMBER:1:> <in_MWStatus:NUMBER:1:> <in_RmStatus:NUMBER:2:RJ,ZP> <in_GuestName:TEXT:255:><#3><in_BCCChar:TEXT:1:>"

Return
; ************************************************************************


; ************************************************************************
;  LNRECORD
;    Sets up the expected format for the checkin, checkout and level 9
;    bar record.
; ************************************************************************
:LNRECORD
  assign RecType "LN"
  assignasis _G_IN_RECORDFORMAT "<#1>LN<#2><in_Room:TEXT:5:RJ,ZP> <in_LNStatus:NUMBER:1:> <in_Reservation:TEXT:6:LJ,SP> <in_LanguageDesc:TEXT:14:LJ,SP><in_LanguageCode:NUMBER:2:RJ,ZP> <in_GuestName:TEXT:255:><#3><in_BCCChar:TEXT:1:>"
Return
; ************************************************************************


; ************************************************************************
;  WKRECORD
;    Sets up the expected format for the wakeup call record.
; ************************************************************************
:WKRECORD
  assign RecType "WK"
  assignasis _G_IN_RECORDFORMAT "<#1>WK<#2><in_Wakeup1:TIME:4:HHMM> <in_Room:TEXT:5:RJ,ZP> <in_LanguageCode:NUMBER:2:RJ,ZP> <in_FlagValue:NUMBER:1:><#3><in_BCCChar:TEXT:1:>"
Return
; ************************************************************************


; ************************************************************************
;  MWRECORD
;    Sets up the expected format for the message waiting record.
; ************************************************************************
:MWRECORD
  assign RecType "MW"
  assignasis _G_IN_RECORDFORMAT "<#1>MW<#2><in_Room:TEXT:5:RJ,ZP> <in_FlagValue:NUMBER:1:><#3><in_BCCChar:TEXT:1:>"
Return
; ************************************************************************


; ************************************************************************
;  TRRECORD
;    Sets up the expected format for the room transfer record.
; ************************************************************************
:TRRECORD
  assign RecType "TR"
  assignasis _G_IN_RECORDFORMAT "<#1>TR<#2><in_Room:TEXT:5:RJ,ZP> <in_DestRoom:TEXT:5:RJ,ZP><#3><in_BCCChar:TEXT:1:>"
Return
; ************************************************************************


; ************************************************************************
;  DSRECORD
;    Sets up the expected format for the DDI Set/Clear record.
; ************************************************************************
:DSRECORD
  assign RecType "VN"
  assignasis _G_IN_RECORDFORMAT "<#1>VN<#2><in_Room:TEXT:8:RJ,ZP> <in_FlagValue:NUMBER:1:> <in_VNType:TEXT:1:> <in_VNNumber:NUMBER:8:><#3>"
Return
; ************************************************************************


; ************************************************************************
;  DNRECORD
;    Sets up the expected format for the DND Set/Clear record.
; ************************************************************************
:DNRECORD
  assign RecType "DN"
  assignasis _G_IN_RECORDFORMAT "<#1>DN<#2><in_Date:DATE:6:DDMMYY> <in_Time:TIME:4:HHMM> <in_Room:TEXT:6:RJ,ZP> <in_FlagValue:TEXT:1:LJ,SP><#3>"
Return
; ************************************************************************


; ************************************************************************
;  CreateSREvents
;    Potentially creates several events depending on the contents of the
;    SR record.
; ************************************************************************
:CreateSREvents

; OPT: If we are to ignore wakeup times from the system refresh records,
;      uncomment the next line.
goto SRSkipWakeup

; We do a clear all wakeup if wakeup time 1 or 2 are anything other than
; 0000 or 9999

assign WorkVal "1"
if "<in_Wakeup1:TIME:4:HHMM>" EQ "0000"
	assign WorkVal "0"
if "<in_Wakeup1:TIME:4:HHMM>" EQ "9999"
	assign WorkVal "0"
if "$(WorkVal)" EQ "1"
	Goto SRClearAll

assign WorkVal "1"
if "<in_Wakeup2:TIME:4:HHMM>" EQ "0000"
	assign WorkVal "0"
if "<in_Wakeup2:TIME:4:HHMM>" EQ "9999"
	assign WorkVal "0"
if "$(WorkVal)" EQ "1"
	Goto SRClearAll

; To get here, both wakeup 1 and wakeup 2 are either 0000 or 9999
Goto SRSkipWakeup

; there is at least 1 wakeup time in the record, we first need to create a
; clear all wakeup for room event
:SRClearAll
CreateClearAllWakeup "$(in_Room)" "<in_LanguageCode:NUMBER:2:RJ,ZP>"

; Re-test wakeup 1.  If it is anything other than 0000 or 9999, we need to
; create a wakeup set event.
assign WorkVal "1"
if "<in_Wakeup1:TIME:4:HHMM>" EQ "0000"
	assign WorkVal "0"
if "<in_Wakeup1:TIME:4:HHMM>" EQ "9999"
	assign WorkVal "0"
if "$(WorkVal)" EQ "1"
	CreateSetWakeup "$(in_Room)" "<in_LanguageCode:NUMBER:2:RJ,ZP>" "<in_Wakeup1:TIME:4:HHMM>"

; Re-test wakeup 2.  If it is anything other than 0000 or 9999, we need to
; create a wakeup set event.
assign WorkVal "1"
if "<in_Wakeup2:TIME:4:HHMM>" EQ "0000"
	assign WorkVal "0"
if "<in_Wakeup2:TIME:4:HHMM>" EQ "9999"
	assign WorkVal "0"
if "$(WorkVal)" EQ "1"
	CreateSetWakeup "$(in_Room)" "<in_LanguageCode:NUMBER:2:RJ,ZP>" "<in_Wakeup2:TIME:4:HHMM>"

:SRSkipWakeup

; Create class of service event if the value in the record requires it.
if "<in_COS:TEXT:1:>" EQ "0"
	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "TRUE" "TRUE" "TRUE" ""
if "<in_COS:TEXT:1:>" EQ "1"
	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "FALSE" "TRUE" "TRUE" ""
if "<in_COS:TEXT:1:>" EQ "2"
	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "FALSE" "TRUE" "TRUE" ""
if "<in_COS:TEXT:1:>" EQ "3"
	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "TRUE" "TRUE" "TRUE" ""

; OPT: If we are not interested in message waiting records from the PMS on a
;      system refresh record, uncomment this next line.
goto SRSkipMessageWaiting

; Create message waiting event if the value in the record requires it.NOTE FIDELIO CAN SEND EITHER
; 0 OR 2 FOR LAMP OFF, YOU WILL NEED TO SET THE CORRECT VALUE BELOW

if "<in_MWStatus:TEXT:1:>" EQ "0"
	CreateMessageWaiting "$(in_Room)" "FALSE"
if "<in_MWStatus:TEXT:1:>" EQ "1"
	CreateMessageWaiting "$(in_Room)" "TRUE"
if "<in_MWStatus:TEXT:1:>" EQ "2"
	CreateMessageWaiting "$(in_Room)" "FALSE"

:SRSkipMessageWaiting

; Create the room update event
CreateRoomUpdate "$(in_Room)" "$(in_LanguageDesc)" "<in_LanguageCode:NUMBER:2:RJ,ZP>" "$(in_GuestName)"

Return
; ************************************************************************


; ************************************************************************
;  CreateWKEvent
;    Creates a wakeup event.
; ************************************************************************
:CreateWKEvent

if "<in_FlagValue:TEXT:1:>" EQ "2"
	CreateClearAllWakeup "$(in_Room)" "<in_LanguageCode:NUMBER:2:RJ,ZP>"

if "<in_FlagValue:TEXT:1:>" EQ "1"
	CreateSetWakeup "$(in_Room)" "<in_LanguageCode:NUMBER:2:RJ,ZP>" "<in_Wakeup1:TIME:4:HHMM>"

Return
; ************************************************************************


; ************************************************************************
;  CreateLNEvent
;    Creates the checkin or checkout event followed by the class of
;    service event.
; ************************************************************************
:CreateLNEvent

Assign in_GuestID "$(in_Reservation)"

if "<in_LNStatus:TEXT:1:>" EQ "3"
	CreateCheckIn "$(in_Room)" "$(in_Reservation)" "$(in_LanguageDesc)" "$(in_LanguageCode)" "$(in_GuestName)" "" "" "" "TRUE" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "$(in_GuestID)"

if "<in_LNStatus:TEXT:1:>" EQ "2"
	CreateCheckOut "$(in_Room)" "$(in_Reservation)" "$(in_LanguageDesc)" "<in_LanguageCode:NUMBER:2:RJ,ZP>"

if "<in_LNStatus:TEXT:1:>" EQ "0"
	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "TRUE" "TRUE" "TRUE" ""

if "<in_LNStatus:TEXT:1:>" EQ "1"
	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "FALSE" "TRUE" "TRUE" ""


Return
; ************************************************************************


; ************************************************************************
;  CreateMWEvent
;    Creates the message waiting event.
; Fidelio sometimes sends 0 and other times 2 dor lamp off, the below will cater 
; for it
; ************************************************************************
:CreateMWEvent
if "<in_FlagValue:TEXT:1:>" EQ "0"
	CreateMessageWaiting "$(in_Room)" "FALSE"
if "<in_FlagValue:TEXT:1:>" EQ "1"
	CreateMessageWaiting "$(in_Room)" "TRUE"
if "<in_FlagValue:TEXT:1:>" EQ "2"
	CreateMessageWaiting "$(in_Room)" "FALSE"


Return
; ************************************************************************


; ************************************************************************
;  CreateTREvent
;    Creates a room transfer event.
; ************************************************************************
:CreateTREvent
  
  ; Query Guest Name on Source Room.
  QueryGuestName "$(in_Room)"
  Assign in_GuestName "$(_G_RESULT)"
  
  CreateRoomTransfer "$(in_Room)" "$(in_DestRoom)"
  
  // OPT: If we should create a Room Update to force the 
  // DefinityPMS to write the correct room number after transfer
  // uncomment the following line.
  ; CreateRoomUpdate "$(in_DestRoom)" "" "" "$(in_GuestName)"  CreateRoomTransfer "$(in_Room)" "$(in_DestRoom)"

Return
; ************************************************************************


; ************************************************************************
;  HandleDDIRecord
;    Creates a DDI event if necessary or will respond with the DR record.
;    The following details are available here.
;
;       in_Room = Room number
;       in_FlagValue = (0=Clear DDI; 1=Set DDI; )
;       in_VNType = (0= Used for clear all: 1= DDI; 2 = FAX: 3 = Other
;       in_VNNumber = the virtual number
; ************************************************************************
:HandleDDIRecord

  if "<in_FlagValue:TEXT:1:>" EQ "0"
    goto HandleDDIRecord_ClearDDI

  if "<in_FlagValue:TEXT:1:>" EQ "1"
    goto HandleDDIRecord_SetDDI

:HandleDDIRecord_ClearDDI

  ; Clear DDI number here.  Simply create the event.

  ; Use when we want to add several DDI
  ;CreateClearDDI "$(in_Room)" "$(in_VNType)"

  CreateClearDDI "$(in_Room)"
  goto Finished_HandleDDIRecord

:HandleDDIRecord_SetDDI

  ; Set DDI number here then create the event.

  ; Use when we can support more than one DDI
  ;CreateSetDDI "$(in_Room)" "$(in_VNNumber)" "$(in_VNType)"

  CreateSetDDI "$(in_Room)" "$(in_VNNumber)"
  goto Finished_HandleDDIRecord

:Finished_HandleDDIRecord

Return
; ************************************************************************


; ************************************************************************
;  CreateDNEvent
;    Creates a DND event.
; ************************************************************************
:CreateDNEvent
  
  if "$(in_FlagValue)" EQ "0"
    CreateDND "$(in_Room)" "FALSE"
  if "$(in_FlagValue)" EQ "1"
    CreateDND "$(in_Room)" "TRUE"

Return
; ************************************************************************


; ************************************************************************
;  ReceiveError
;    Sent here when an error is found in the formatting of the record.
; ************************************************************************
:ReceiveError
  Echo Error with Received Record - Record ignored
Return

; ************************************************************************
;  CheckIncoming
;    Execution is periodically carried out from here by the program to
;    check for incoming data during idle times.
; ************************************************************************
:CheckIncoming

; Read a character
ReadFromPort 1

; if it is an SOH process it
if "$(_PORTCHARS)" EQ "<#1>"
	Assign ReceivedRec "<#1>"
if "$(_PORTCHARS)" EQ "<#1>"
	StartWaitTimer 5
if "$(_PORTCHARS)" EQ "<#1>"
	Goto GETRECTYPE

; if it is an ENQ, show it and call ReceiveRecord
if "$(_PORTCHARS)" NE ""
	Echo Rx: $(_PORTCHARS)
if "$(_PORTCHARS)" EQ "<#5>"
	Call ReceiveRecord

; Release back to the program, we have not received an ENQ
Exit


; ************************************************************************
;  SendRecord
;   Execution is sent here whenever we have a record in SendRec to send
;   to the CaraHost.
; ************************************************************************
:SendRecord

Assign RecType ""

; Send the ENQ
call SENDENQ

; OPT: We have sent and ENQ and we need to wait for an ACK in response to it.
;      The parameter on the following line will allow you to change the amount
;      of time we will wait for.
StartWaitTimer 20

:WAITFORACKTOENQ

; Sleep to slow the processing down a bit.
Sleep 100

; Read a single character from the port
ReadFromPort 1 1

if "$(_PORTCHARS)" NE ""
	Echo Rx: $(_PORTCHARS)

; if it is an ACK
if "$(_PORTCHARS)" EQ "<#6>"
	Goto GOTACKTOENQ

; If it is an ENQ, we have to yield
if "$(_PORTCHARS)" EQ "<#5>"
	Call ReceiveRecord

; If the wait timeout has expired...
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	Goto SendRecord

Goto WAITFORACKTOENQ

; We have sent an ENQ character and received an ACK in response to it.
:GOTACKTOENQ

; Send the record to CaraHost
Send $(SendRec)
Echo Tx: $(SendRec)

; OPT: We have just sent the record and now need to wait for an ACK to it.
;      The parameter on the following line allows you to set how long we wait
;      for this response.
StartWaitTimer 10


:WAITFORACKTOREC

; sleep to slow the processing down a bit.
Sleep 100

; Read a single character from the port
ReadFromPort 1

if "$(_PORTCHARS)" NE ""
	Echo Rx: $(_PORTCHARS)

; if the received character is an ACK
if "$(_PORTCHARS)" EQ "<#6>"
	Goto GOTACKTOREC

; If the wait timeout has expired
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	Goto SendRecord

; We are still waiting for an ACK to the record so go back
Goto WAITFORACKTOREC

; We get to this if we receive an ACK to the record
:GOTACKTOREC

; If we are sending this record immediately after a receive, we need to use
; Return.
if "$(flg_SendingAfterReceive)" EQ "TRUE"
  Return

CALL HANDLEOK
EXIT

; ******************************************************************************
;  HANDLEOK
;    This will flag that the event is processed.
; ************************************************************************
:HANDLEOK
  FLAGPROCESSED OK
RETURN
; ******************************************************************************


; ******************************************************************************
;  IgnoreRecord
;    This will flag that the event is processed and exit the script effectively
;    ignoring the record.
; ************************************************************************
:IgnoreRecord
  FLAGPROCESSED OK
EXIT
; ******************************************************************************


; ************************************************************************
;  SENDENQ
;   Sends an Enq (#5) character out of the port and echoes it to the
;   communications display.
; ************************************************************************
:SENDENQ
  Send <#5>
  Echo Tx: <#5>
RETURN
; ************************************************************************


; ************************************************************************
;  SENDACK
;   Sends an Ack (#6) character out of the port and echoes it to the
;   communications display.
; ************************************************************************
:SENDACK
  Send <#6>
  Echo Tx: <#6>
RETURN
; ************************************************************************

