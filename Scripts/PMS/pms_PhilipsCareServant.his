; Coded For: 6.0.0.0
; Script Version: 50.0.0.1
; ************************************************************************
;
;  This is the HI configuration script for interfacing to a Philips
;  CareServant system.
;
;                                                            pjh-20080306
;
;  Modifications - AU - 17/10/2013
;	* Updated to utilise V50 specific features
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;
; *** Variable definitions
; SendRec is the record that we use to send data
define SendRec				// The record we build to send to Carahost
define ReceivedRec			// The record we receive
define RecType				// The record type that we have received
define WorkVal				// General purpose work variable used at regular
							// intervals throughout the script.

; Variables used for incoming data items.  These items are the seperate fields
;  we can receive.
define in_Date
define in_Time
define in_Room
define in_LNStatus
define in_Reservation
define in_GuestID
define in_Wakeup1
define in_WakeupDate1
define in_Wakeup2
define in_LanguageDesc
define in_LanguageCode
define in_COS
define in_MWStatus
define in_RmStatus
define in_GuestName
define in_FlagValue
define in_DestRoom
define in_StationID
define in_VIPCode
define in_MACAddress
define in_PatientID

define flg_SendingAfterReceive


; ************************************************************************
;  INIT
;   Called at program start-up.  Gives you the opportunity to initialise
;   any script variables.
:INIT

  assign flg_SendingAfterReceive "FALSE"

OpenPort

exit
; ************************************************************************

; ************************************************************************
;  CallRecord
;   The script is executed from this label when we have a call record to
;   send.
:CallRecord

; OPT: If we are to ignore call records and not send them, you should uncomment
;      this next line.

//goto IgnoreRecord

assign SendRec "<#1>CR<#2><_EV_CALLDATE:DATE:6:DDMMYY> <_EV_CALLTIME:TIME:4:HHMM> <_EV_ROOMNUMBER:TEXT:6:RJ,ZP> <_EV_CALLDURATION:TIME:6:HHMMSS> <_EV_CALLDIALLEDDIGITS:TEXT:18:LJ,SP> <_EV_CALLCHARGEPENCE:TEXT:10:RJ,ZP> <_EV_ID:TEXT:5:RJ,ZP> 00<#3>"
goto SendRecord
; ************************************************************************


; ************************************************************************
;  RoomStatus
;   The script is executed from this label when we have a room status
;   event to send.
:RoomStatus

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Minibar
;   The script is executed from this label when we have a minibar event
;   to send.
:Minibar

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   The script is executed from this label when we have a message waiting
;   event to send.
:MessageWaiting

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  WakeupCall
;   The script is executed from this label when we have a wakeup call
;   event to send.
:WakeupCall

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Checkin
;   The script is executed from this label when we have a check in event
;   to send.
:Checkin

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Checkout
;   The script is executed from this label when we have a check out event
;   to send.
:Checkout

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   The script is executed from this label when we have a class of service
;   event to send.
:ClassOfService

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   The script is executed from this label when we have a room update
;   event to send.
:RoomUpdate

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   The script is executed from this label when we have a budget limit
;   event to send.
:BudgetLimit

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   The script is executed from this label when we have a room transfer
;   event to send.
:RoomTransfer

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   The script is executed from this label when we have an extra guest
;   event to send.
:ExtraGuest

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   The script is executed from this label when we have a do not disturb
;   event to send.
:DoNotDisturb

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  PIN
;   The script is executed from this label when we have a set or clear pin
;   event to send.
:PIN

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DDI
;   The script is executed from this label when we have a set or clear ddi
;   event to send.
:DDI

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ReceiveRecord
;    This section is Called when we have received an ENQ from the PMS
; ************************************************************************
:ReceiveRecord

; Send the ACK to the received ENQ
call SENDACK

; We now wait for the SOH character to arrive

; OPT: To change the amount of time we wait for the record to start being sent
;      after we have received an ENQ and sent an ACK, we change the parameter
;      on the next line.
StartWaitTimer 5

:AWAITRECSTART

Sleep 100

; Read the next character available at the port.
ReadFromPort 1 

; Start our ReceivedRec with the character if we have received one
if "$(_PORTCHARS)" NE ""
  assign ReceivedRec "$(_PORTCHARS)"

; Timer has expired so we're obviously not being sent anything.  Quit
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
  goto QUITRECEIVING

; Go back if we have not received anything at all.
if "$(_PORTCHARS)" EQ ""
	goto AWAITRECSTART

; SOH Arrived.  Lets continue
if "$(_PORTCHARS)" EQ "<#1>"
	goto GETRECTYPE

; To get here, we have received something else.  Quit.
goto QUITRECEIVING

; We now have to get the record type from the next 2 characters if we get here
:GETRECTYPE

assign _G_IN_RECORDFORMAT ""

; Read the next 2 characters
ReadFromPort 2 2

; Add them to the display record if we receive them
if "$(_PORTCHARS)" NE ""
	assign ReceivedRec "$(ReceivedRec)" "$(_PORTCHARS)"

; Test the record type and set up for the receiving of it.
assign RecType ""

; OPT: Comment these two lines if you want to ignore all incoming system
;      refresh records.
if "$(_PORTCHARS)" EQ "SR"
  call SRRECORD

; OPT: Comment these two lines if you want to ignore all incoming checkin,
;      checkout and level 9 barring records.
if "$(_PORTCHARS)" EQ "LN"
	call LNRECORD

; _G_IN_RECORDFORMAT will have the correct format for the record we are
; receiving.  We now need to read the rest of the record in.

; OPT: We have receive the start of the record and determined its type.  We
;      need to receive the rest of the record and the next line is the amount
;      of time we should allow for it.
StartWaitTimer 10

:READINGREC
; Read the next character
ReadFromPort 1

; Add it to ReceivedRec if there is anything
if "$(_PORTCHARS)" NE ""
	assign ReceivedRec "$(ReceivedRec)" "$(_PORTCHARS)"

; if it is an ETX we have finished
if "$(_PORTCHARS)" EQ "<#3>"
	echo Rx: $(ReceivedRec)
if "$(_PORTCHARS)" EQ "<#3>"
  call SENDACK
if "$(_PORTCHARS)" EQ "<#3>"
	goto FINISHEDRECEIVING

; If we timeout, we need to quit
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	goto QUITRECEIVING

; We are still receiving a record so go back.
goto READINGREC

; ************************************************************************
;  FINISHEDRECEIVING
;    We now have a complete record, time to process it.
; ************************************************************************
:FINISHEDRECEIVING

; If this record is one we are not interested in, skip the next few lines.
if "$(RecType)" EQ ""
  goto SkipProcessIncoming

; Extract the fields from the record and process them to create the events.
assign _G_IN_RECORD "$(ReceivedRec)"
parseInRecord
if "$(_G_IN_RECORDPARSEERROR)" EQ "TRUE"
	goto ReceiveError

if "$(RecType)" EQ "SR"
	call CreateSREvents
if "$(RecType)" EQ "LN"
	call CreateLNEvent

:SkipProcessIncoming

Return
; ************************************************************************


; ************************************************************************
;  SRRECORD
;    Sets up the expected format for the system refresh record.
:SRRECORD
  assign RecType "SR"
  assignasis _G_IN_RECORDFORMAT "<#1>SR<#2><in_Date:TEXT:6:LJ,SP> <in_Time:TEXT:4:LJ,SP> <in_Room:TEXT:6:RJ,ZP> <in_VIPCode:TEXT:2:RJ,ZP> <in_Reservation:TEXT:10:LJ,SP> <in_Wakeup1:TIME:4:HHMM> <in_Wakeup2:TIME:4:HHMM> <in_LanguageDesc:TEXT:14:LJ,SP><in_LanguageCode:NUMBER:2:RJ,ZP> <in_COS:NUMBER:1:> <in_MWStatus:NUMBER:1:> <in_RmStatus:NUMBER:2:RJ,ZP> <in_MACAddress:TEXT:12:LJ,SP> <in_PatientID:TEXT:40:LJ,SP> <in_GuestName:TEXT:255:><#3>"
Return
; ************************************************************************


; ************************************************************************
;  LNRECORD
;    Sets up the expected format for the checkin, checkout and level 9
;    bar record.
:LNRECORD
  assign RecType "LN"
  assignasis _G_IN_RECORDFORMAT "<#1>LN<#2><in_Date:TEXT:6:LJ,SP> <in_Time:TEXT:4:LJ,SP> <in_Room:TEXT:6:RJ,ZP> <in_LNStatus:NUMBER:1:ZP> <in_VIPCode:TEXT:2:RJ,ZP> <in_Reservation:TEXT:10:LJ,SP> <in_LanguageDesc:TEXT:14:LJ,SP><in_LanguageCode:NUMBER:2:RJ,ZP> <in_GuestName:TEXT:255:><#3>"
Return
; ************************************************************************


; ************************************************************************
;  CreateSREvents
;    Potentially creates several events depending on the contents of the
;    SR record.
:CreateSREvents

; OPT: If we are to ignore wakeup times from the system refresh records,
;      uncomment the next line.
//goto SRSkipWakeup

; We do a clear all wakeup if wakeup time 1 or 2 are anything other than
; 0000 or 9999

assign WorkVal "1"
if "<in_Wakeup1:TIME:4:HHMM>" EQ "0000"
	assign WorkVal "0"
if "<in_Wakeup1:TIME:4:HHMM>" EQ "9999"
	assign WorkVal "0"
if "$(WorkVal)" EQ "1"
	Goto SRClearAll

assign WorkVal "1"
if "<in_Wakeup2:TIME:4:HHMM>" EQ "0000"
	assign WorkVal "0"
if "<in_Wakeup2:TIME:4:HHMM>" EQ "9999"
	assign WorkVal "0"
if "$(WorkVal)" EQ "1"
	Goto SRClearAll

; To get here, both wakeup 1 and wakeup 2 are either 0000 or 9999
Goto SRSkipWakeup

; there is at least 1 wakeup time in the record, we first need to create a
; clear all wakeup for room event
:SRClearAll
CreateClearAllWakeup "$(in_Room)" "<in_LanguageCode:NUMBER:2:RJ,ZP>"

; Re-test wakeup 1.  If it is anything other than 0000 or 9999, we need to
; create a wakeup set event.
assign WorkVal "1"
if "<in_Wakeup1:TIME:4:HHMM>" EQ "0000"
	assign WorkVal "0"
if "<in_Wakeup1:TIME:4:HHMM>" EQ "9999"
	assign WorkVal "0"
if "$(WorkVal)" EQ "1"
	CreateSetWakeup "$(in_Room)" "<in_LanguageCode:NUMBER:2:RJ,ZP>" "<in_Wakeup1:TIME:4:HHMM>"

; Re-test wakeup 2.  If it is anything other than 0000 or 9999, we need to
; create a wakeup set event.
assign WorkVal "1"
if "<in_Wakeup2:TIME:4:HHMM>" EQ "0000"
	assign WorkVal "0"
if "<in_Wakeup2:TIME:4:HHMM>" EQ "9999"
	assign WorkVal "0"
if "$(WorkVal)" EQ "1"
	CreateSetWakeup "$(in_Room)" "<in_LanguageCode:NUMBER:2:RJ,ZP>" "<in_Wakeup2:TIME:4:HHMM>"

:SRSkipWakeup

; Create class of service event if the value in the record requires it.
if "<in_COS:TEXT:1:>" EQ "0"
	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "TRUE" "TRUE" "TRUE" ""
if "<in_COS:TEXT:1:>" EQ "1"
	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "FALSE" "TRUE" "TRUE" ""
if "<in_COS:TEXT:1:>" EQ "2"
	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "FALSE" "TRUE" "TRUE" ""
if "<in_COS:TEXT:1:>" EQ "3"
	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "TRUE" "TRUE" "TRUE" ""

; OPT: If we are not interested in message waiting records from the PMS on a
;      system refresh record, uncomment this next line.
//goto SRSkipMessageWaiting

; Create message waiting event if the value in the record requires it.
if "<in_MWStatus:TEXT:1:>" EQ "0"
	CreateMessageWaiting "$(in_Room)" "FALSE"
if "<in_MWStatus:TEXT:1:>" EQ "1"
	CreateMessageWaiting "$(in_Room)" "TRUE"

:SRSkipMessageWaiting

; Create the room update event
CreateRoomUpdate "$(in_Room)" "$(in_LanguageDesc)" "<in_LanguageCode:NUMBER:2:RJ,ZP>" "$(in_GuestName)" "$(in_MACAddress)"

:QUITRECEIVING
Return
; ************************************************************************


; ************************************************************************
;  CreateLNEvent
;    Creates the checkin or checkout event followed by the class of
;    service event.
:CreateLNEvent

Assign in_GuestID "$(in_Reservation)"

if "<in_LNStatus:TEXT:1:>" EQ "3"
	CreateCheckIn "$(in_Room)" "$(in_Reservation)" "$(in_LanguageDesc)" "$(in_LanguageCode)" "$(in_GuestName)" "$(in_MACAddress)" "" "" "TRUE" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "$(in_GuestID)"

if "<in_LNStatus:TEXT:1:>" EQ "2"
	CreateCheckOut "$(in_Room)" "$(in_Reservation)" "$(in_LanguageDesc)" "<in_LanguageCode:NUMBER:2:RJ,ZP>"

if "<in_LNStatus:TEXT:1:>" EQ "0"
	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "TRUE" "TRUE" "TRUE" ""
if "<in_LNStatus:TEXT:1:>" EQ "1"
	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "FALSE" "TRUE" "TRUE" ""
;if "<in_LNStatus:TEXT:1:>" EQ "2"
;	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "FALSE" "TRUE" "TRUE" ""
;if "<in_LNStatus:TEXT:1:>" EQ "3"
;	CreateCOS "$(in_Room)" "$(in_Reservation)" "TRUE" "TRUE" "TRUE" "TRUE" ""

Return
; ************************************************************************

; ************************************************************************
;  ReceiveError
;    Sent here when an error is found in the formatting of the record.
; ************************************************************************
:ReceiveError
  Echo Error with Received Record - Record ignored
Return

; ************************************************************************
;  CheckIncoming
;    Execution is periodically carried out from here by the program to
;    check for incoming data during idle times.
; ************************************************************************
:CheckIncoming

; Read a character
ReadFromPort 1

; if it is an ENQ, show it and call ReceiveRecord
if "$(_PORTCHARS)" NE ""
	Echo Rx: $(_PORTCHARS)
if "$(_PORTCHARS)" EQ "<#5>"
	Call ReceiveRecord

; Release back to the program, we have not received an ENQ
Exit


; ************************************************************************
;  SendRecord
;   Execution is sent here whenever we have a record in SendRec to send
;   to the CaraHost.
; ************************************************************************
:SendRecord

; Send the ENQ
call SENDENQ

; OPT: We have sent and ENQ and we need to wait for an ACK in response to it.
;      The parameter on the following line will allow you to change the amount
;      of time we will wait for.
StartWaitTimer 10

:WAITFORACKTOENQ

; Sleep to slow the processing down a bit.
Sleep 100

; Read a single character from the port
ReadFromPort 1

if "$(_PORTCHARS)" NE ""
	Echo Rx: $(_PORTCHARS)

; if it is an ACK
if "$(_PORTCHARS)" EQ "<#6>"
	Goto GOTACKTOENQ

; If it is an ENQ, we have to yield
if "$(_PORTCHARS)" EQ "<#5>"
	Call ReceiveRecord

; If the wait timeout has expired...
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	Goto SendRecord

; We are still waiting for the ACK so go back
Goto WAITFORACKTOENQ

; We have sent an ENQ character and received an ACK in response to it.
:GOTACKTOENQ

; Send the record to CaraHost
Send $(SendRec)
Echo Tx: $(SendRec)

; OPT: We have just sent the record and now need to wait for an ACK to it.
;      The parameter on the following line allows you to set how long we wait
;      for this response.
StartWaitTimer 10


:WAITFORACKTOREC

; sleep to slow the processing down a bit.
Sleep 100

; Read a single character from the port
ReadFromPort 1

if "$(_PORTCHARS)" NE ""
	Echo Rx: $(_PORTCHARS)

; if the received character is an ACK
if "$(_PORTCHARS)" EQ "<#6>"
	Goto GOTACKTOREC

; If the wait timeout has expired
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	Goto SendRecord

; We are still waiting for an ACK to the record so go back
Goto WAITFORACKTOREC

; We get to this if we receive an ACK to the record
:GOTACKTOREC

; If we are sending this record immediately after a receive, we need to use
; Return.
if "$(flg_SendingAfterReceive)" EQ "TRUE"
  Return

CALL HANDLEOK
EXIT

; ******************************************************************************
;  HANDLEOK
;    This will flag that the event is processed.

:HANDLEOK
  FLAGPROCESSED OK
RETURN
; ******************************************************************************


; ******************************************************************************
;  IgnoreRecord
;    This will flag that the event is processed and exit the script effectively
;    ignoring the record.

:IgnoreRecord
  FLAGPROCESSED OK
EXIT
; ******************************************************************************


; ************************************************************************
;  SENDENQ
;   Sends an Enq (#5) character out of the port and echoes it to the
;   communications display.

:SENDENQ
  Send <#5>
  Echo Tx: <#5>
RETURN
; ************************************************************************


; ************************************************************************
;  SENDACK
;   Sends an Ack (#6) character out of the port and echoes it to the
;   communications display.

:SENDACK
  Send <#6>
  Echo Tx: <#6>
RETURN
; ************************************************************************


