; Coded For: 6.0.0.0
; Script Version: 50.0.0.1
; ************************************************************************
;
;  This is the HI configuration script for interfacing to a HSI Enigma
;  Iface PC.
;
;  Note: This interface does not support Reservation Numbers
;
;                                                               smu-240500
;                                                           pjh&smu-030700
;
;  Modifications - AU - 17/10/2013
;	* Updated to utilise V50 specific features
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;
; *** Variable definitions
; SendRec is the record that we use to send data
define SendRec             // The record we build to send to HSI Enigma
define ReceivedRec         // The record we receive
define RecType             // The record type that we have received
define WorkVal             // General purpose work variable used at regular
                           //  intervals throughout the script.

; Variables used for incoming data items.  These items are the seperate fields
;  we can receive.
define in_Date
define in_Time
define in_Room
define in_WakeupTime
define in_LanguageCode
define in_GuestName
define in_DestRoom
define in_VIPStatus
define in_RoomType
define in_GroupNumber


; ************************************************************************
;  INIT
;   Called at program start-up.  Gives you the opportunity to initialise
;   any script variables.
:INIT

OpenPort

exit
; ************************************************************************


; ************************************************************************
;  CallRecord
;   The script is executed from this label when we have a call record to
;   send.
:CallRecord

; OPT: If we are to ignore call records and not send them, you should uncomment
;      this next line.
//goto IgnoreRecord

;GETNEXTAUTOINCNUMBER "CALLRECS"
assign SendRec "<#2>C <_EV_CALLDATE:DATE:8:YYYYMMDD> <_EV_CALLTIME:TIME:6:HHMMSS> <_EV_ROOMNUMBER:TEXT:5:LJ,SP> S <_EV_CALLDURATION:TIME:6:HHMMSS> <_EV_CALLDIALLEDDIGITS:TEXT:15:LJ,SP> <_EV_CALLCHARGE:NUMBER:8:RJ,2DP> <_EV_ID:TEXT:4:RJ,ZP><#3>"

echo Current Call: <_EV_CALLDATE:DATE:8:DD/MM/YY> <_EV_CALLTIME:TIME:5:HH:MM> ID: <_EV_ID:TEXT:5:RJ,ZP>

goto SendRecord
; ************************************************************************


; ************************************************************************
;  RoomStatus
;   The script is executed from this label when we have a room status
;   event to send.
:RoomStatus

; OPT: If we are to ignore room status events and not send them, you should
;      uncomment this next line.
//goto IgnoreRecord

assign SendRec "<#2>R <_EV_EVENTDATE:DATE:8:YYYYMMDD> <_EV_EVENTTIME:TIME:6:HHMMSS> <_EV_ROOMNUMBER:TEXT:5:LJ,SP> <_EV_RSCODE:TEXT:1:RJ,ZP><#3>"

goto SendRecord
; ************************************************************************


; ************************************************************************
;  Minibar
;   The script is executed from this label when we have a minibar event
;   to send.
:Minibar

; OPT: If we want to send Minibar event details to the HSI Enigma, comment out
;      the following line.
goto IgnoreRecord

; Sort out the maid id if there is one.
assignasis WorkVal "<_EV_MBMAIDID:TEXT:3:RJ,ZP>
if "$(_EV_RSMAIDID)" EQ ""
	assign WorkVal "001"

assign SendRec "<#1>M <_EV_EVENTDATE:DATE:8:YYYYMMDD> <_EV_EVENTTIME:TIME:6:HHMMSS> <_EV_ROOMNUMBER:TEXT:5:LJ,SP> <_EV_MBCHARGE:TEXT:6:RJ,ZP><#3>"
goto SendRecord
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   The script is executed from this label when we have a message waiting
;   event to send.
:MessageWaiting

; OPT: If we are to ignore message waiting events and not send them, you should
;      uncomment this next line.
goto IgnoreRecord

; Default to 0 for mw light off
assign WorkVal "0"

; set it to 1 if it is an mw light on
if "$(_EV_MWSTATE)" EQ "TRUE"
	assign WorkVal "1"

assign SendRec "<#1>O <_EV_EVENTDATE:DATE:8:YYYYMMDD> <_EV_EVENTTIME:TIME:6:HHMMSS> <_EV_ROOMNUMBER:TEXT:5:LJ,SP><#3>"
goto SendRecord

; ************************************************************************
;  WakeupCall
;   The script is executed from this label when we have a wakeup call
;   event to send.
:WakeupCall

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Checkin
;   The script is executed from this label when we have a check in event
;   to send.
:Checkin

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Checkout
;   The script is executed from this label when we have a check out event
;   to send.
:Checkout

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   The script is executed from this label when we have a class of service
;   event to send.
:ClassOfService

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   The script is executed from this label when we have a room update
;   event to send.
:RoomUpdate

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   The script is executed from this label when we have a budget limit
;   event to send.
:BudgetLimit

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   The script is executed from this label when we have a room transfer
;   event to send.
:RoomTransfer

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   The script is executed from this label when we have an extra guest
;   event to send.
:ExtraGuest

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   The script is executed from this label when we have a do not disturb
;   event to send.
:DoNotDisturb

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  PIN
;   The script is executed from this label when we have a set or clear pin
;   event to send.
:PIN

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DDI
;   The script is executed from this label when we have a set or clear ddi
;   event to send.
:DDI

goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ReceiveRecord
;    This section is Called when we have received an ENQ from the PMS
; ************************************************************************
:ReceiveRecord

; Send the ACK to the received ENQ
call SENDACK

; We now wait for the STX character to arrive

; OPT: To change the amount of time we wait for the record to start being sent
;      after we have received an ENQ and sent an ACK, we change the parameter
;      on the next line.
StartWaitTimer 5

:AWAITRECSTART

Sleep 100

; Read the next character available at the port.
ReadFromPort 1 

; Start our ReceivedRec with the character if we have received one
if "$(_PORTCHARS)" NE ""
  assign ReceivedRec "$(_PORTCHARS)"

; Timer has expired so we're obviously not being sent anything.  Quit
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
  goto QUITRECEIVING

; Go back if we have not received anything at all.
if "$(_PORTCHARS)" EQ ""
	goto AWAITRECSTART

; STX Arrived.  Lets continue
if "$(_PORTCHARS)" EQ "<#2>"
	goto GETRECTYPE

; To get here, we have received something else.  Quit.
goto QUITRECEIVING

; We now have to get the record type from the next 2 characters if we get here
:GETRECTYPE

assign _G_IN_RECORDFORMAT ""

; Read the next 2 characters
ReadFromPort 1
;ReadFromPort 2 2

; Add them to the display record if we receive them
if "$(_PORTCHARS)" NE ""
	assign ReceivedRec "$(ReceivedRec)" "$(_PORTCHARS)"

; Test the record type and set up for the receiving of it.
assign RecType ""

; OPT: Comment these lines if you want to ignore all incoming system
;      refresh records.
if "$(_PORTCHARS)" EQ "G"
  call SRRECORD

; OPT: Comment these lines if you want to ignore all incoming checkin and
;      checkout records.
if "$(_PORTCHARS)" EQ "I"
   call LNRECORD
if "$(_PORTCHARS)" EQ "O"
   call CORECORD

; OPT: Comment these lines if you want to ignore all incoming wakeup
;      records.
if "$(_PORTCHARS)" EQ "W"
  call WKRECORDSET
if "$(_PORTCHARS)" EQ "X"
  call WKRECORDCLEAR

; OPT: Comment these lines if you want to ignore all incoming room transfer
;      records.
if "$(_PORTCHARS)" EQ "T"
  call TRRECORD

; _G_IN_RECORDFORMAT will have the correct format for the record we are
; receiving.  We now need to read the rest of the record in.

; OPT: We have receive the start of the record and determined its type.  We
;      need to receive the rest of the record and the next line is the amount
;      of time we should allow for it.
StartWaitTimer 10

:READINGREC
; Read the next character
ReadFromPort 1

; Add it to ReceivedRec if there is anything
if "$(_PORTCHARS)" NE ""
	assign ReceivedRec "$(ReceivedRec)" "$(_PORTCHARS)"

; if it is an ETX we have finished
if "$(_PORTCHARS)" EQ "<#3>"
	echo Rx: $(ReceivedRec)
if "$(_PORTCHARS)" EQ "<#3>"
  call SENDACK
if "$(_PORTCHARS)" EQ "<#3>"
	goto FINISHEDRECEIVING

; If we timeout, we need to quit
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	goto QUITRECEIVING

; We are still receiving a record so go back.
goto READINGREC

; ************************************************************************
;  FINISHEDRECEIVING
;    We now have a complete record, time to process it.
; ************************************************************************
:FINISHEDRECEIVING

; If this record is one we are not interested in, skip the next few lines.
if "$(RecType)" EQ ""
  goto SkipProcessIncoming

; Extract the fields from the record and process them to create the events.
assign _G_IN_RECORD "$(ReceivedRec)"
parseInRecord
if "$(_G_IN_RECORDPARSEERROR)" EQ "TRUE"
	goto ReceiveError

if "$(RecType)" EQ "I"
	call CreateLNEvents
if "$(RecType)" EQ "O"
	call CreateCOEvents
if "$(RecType)" EQ "W"
	call CreateWKSetEvent
if "$(RecType)" EQ "X"
	call CreateWKClearEvent
if "$(RecType)" EQ "T"
	call CreateTREvent
if "$(RecType)" EQ "S"
	call CreateTREvent
if "$(RecType)" EQ "G"
	call CreateRUEvent

:SkipProcessIncoming

Return


; ************************************************************************
;  SRRECORD
;    Sets up the expected format for the system refresh record.
:SRRECORD
  assign RecType "G"
  assignasis _G_IN_RECORDFORMAT "<#1>G <in_Date:DATE:8:YYYYMMDD> <in_Time:TIME:6:HHMMSS> <in_Room:TEXT:5:LJ,SP> <in_GuestName:TEXT:30:LJ,SP>      <in_VIPStatus:text:2:SP> <in_LanguageCode:NUMBER:2:RJ,ZP> <in_RoomType:TEXT:1:SP> <in_GroupNumber:TEXT:2:SP><#3>"
Return
; ************************************************************************


; ************************************************************************
;  LNRECORD
;    Sets up the expected format for the checkin, checkout and level 9
;    bar record.
:LNRECORD
  assign RecType "I"
  assignasis _G_IN_RECORDFORMAT "<#1>I <in_Date:DATE:8:YYYYMMDD> <in_Time:TIME:6:HHMMSS> <in_Room:TEXT:5:LJ,SP> <in_GuestName:TEXT:30:LJ,SP>      <in_VIPStatus:text:2:SP> <in_LanguageCode:NUMBER:2:RJ,ZP> <in_RoomType:TEXT:1:SP> <in_GroupNumber:TEXT:2:SP><#3>"
Return
; ************************************************************************

; ************************************************************************
;  CORECORD
;    Sets up the expected format for the checkin, checkout and level 9
;    bar record.
:CORECORD
  assign RecType "O"
  assignasis _G_IN_RECORDFORMAT "<#1>O <in_Date:DATE:8:YYYYMMDD> <in_Time:TIME:6:HHMMSS> <in_Room:TEXT:5:LJ,SP> <in_GuestName:TEXT:30:LJ,SP> <in_RoomType:TEXT:1:SP>><#3>"
Return
; ************************************************************************


; ************************************************************************
;  WKRECORDSET
;    Sets up the expected format for the wakeup call record.
:WKRECORDSET
  assign RecType "W"
  assignasis _G_IN_RECORDFORMAT "<#1>W <in_Date:DATE:8:YYYYMMDD> <in_Time:TIME:6:HHMMSS> <in_Room:TEXT:5:LJ,SP> <in_WakeupTime:TIME:4:HHMM><#3>"
Return
; ************************************************************************


; ************************************************************************
;  WKRECORDCLEAR
;    Sets up the expected format for the wakeup call record.
:WKRECORDCLEAR
  assign RecType "X"
  assignasis _G_IN_RECORDFORMAT "<#1>X <in_Date:DATE:8:YYYYMMDD> <in_Time:TIME:6:HHMMSS> <in_Room:TEXT:5:LJ,SP><#3>"
Return
; ************************************************************************


; ************************************************************************
;  TRRECORD
;    Sets up the expected format for the room transfer record.
:TRRECORD
  assign RecType "T"
  assignasis _G_IN_RECORDFORMAT "<#1>T <in_Date:DATE:8:YYYYMMDD> <in_Time:TIME:6:HHMMSS> <in_Room:TEXT:5:LJ,SP> <in_DestRoom:TEXT:5:LJ,SP><#3>"
Return
; ************************************************************************


; ************************************************************************
;  QUITRECEIVING
;    Called when we are abandoning the process of listening for data.
:QUITRECEIVING
Return
; ************************************************************************


; ************************************************************************
;  CreateRUEvent
;    Potentially creates several events depending on the contents of the
;    SR record.
:CreateRUEvent
  ; Create the room update event
  CreateRoomUpdate "$(in_Room)" "" "<in_LanguageCode:NUMBER:2:RJ,ZP>" "$(in_GuestName)"
Return
; ************************************************************************

; ************************************************************************
;  CreateWKSetEvent
;    Creates a wakeup event.
:CreateWKSetEvent

CreateClearAllWakeup "$(in_Room)" ""
CreateSetWakeup "$(in_Room)" "" "<in_WakeupTime:TIME:4:HHMM>"

Return
; ************************************************************************

; ************************************************************************
;  CreateWKClearEvent
;    Creates a clear wakeup event.
:CreateWKClearEvent

CreateClearAllWakeup "$(in_Room)" ""

Return
; ************************************************************************


; ************************************************************************
;  CreateLNEvent
;    Creates the checkin or checkout event followed by the class of
;    service event.
:CreateLNEvents

CreateCheckIn "$(in_Room)" "" "" "<in_LanguageCode:NUMBER:2:RJ,ZP>" "$(in_GuestName)"
CreateCOS "$(in_Room)" "" "TRUE" "TRUE" "TRUE" "TRUE" ""

Return
; ************************************************************************

; ************************************************************************
;  CreateCOEvents
;    Creates the checkin or checkout event followed by the class of
;    service event.
:CreateCOEvents

CreateCheckOut "$(in_Room)" "" "" ""
CreateCOS "$(in_Room)" "" "TRUE" "FALSE" "TRUE" "TRUE" ""

Return
; ************************************************************************


; ************************************************************************
;  CreateTREvent
;    Creates a room transfer event.
:CreateTREvent

  ; Query Guest Name on Source Room.
  QueryGuestName "$(in_Room)"
  Assign in_GuestName "$(_G_RESULT)"
  
  CreateRoomTransfer "$(in_Room)" "$(in_DestRoom)"
  
  // OPT: If we should create a Room Update to force the 
  // DefinityPMS to write the correct room number after transfer
  // uncomment the following line.
  ; CreateRoomUpdate "$(in_DestRoom)" "" "" "$(in_GuestName)"  CreateRoomTransfer "$(in_Room)" "$(in_DestRoom)"

Return
; ************************************************************************

; ************************************************************************
;  ReceiveError
;    Sent here when an error is found in the formatting of the record.
; ************************************************************************
:ReceiveError
  Echo Error with Received Record - Record ignored
Return

; ************************************************************************
;  CheckIncoming
;    Execution is periodically carried out from here by the program to
;    check for incoming data during idle times.
; ************************************************************************
:CheckIncoming

; Read a character
ReadFromPort 1

; if it is an ENQ, show it and call ReceiveRecord
if "$(_PORTCHARS)" NE ""
	Echo Rx: $(_PORTCHARS)
if "$(_PORTCHARS)" EQ "<#5>"
	Call ReceiveRecord

; Release back to the program, we have not received an ENQ
Exit


; ************************************************************************
;  SendRecord
;   Execution is sent here whenever we have a record in SendRec to send
;   to the HSI Enigma.
; ************************************************************************
:SendRecord

; Send the ENQ
call SENDENQ

; OPT: We have sent and ENQ and we need to wait for an ACK in response to it.
;      The parameter on the following line will allow you to change the amount
;      of time we will wait for.
StartWaitTimer 10

:WAITFORACKTOENQ

; Sleep to slow the processing down a bit.
Sleep 100

; Read a single character from the port
ReadFromPort 1

if "$(_PORTCHARS)" NE ""
	Echo Rx: $(_PORTCHARS)

; if it is an ACK
if "$(_PORTCHARS)" EQ "<#6>"
	Goto GOTACKTOENQ

; If it is an ENQ, we have to yield
if "$(_PORTCHARS)" EQ "<#5>"
	Call ReceiveRecord

; If the wait timeout has expired...
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	Goto SendRecord

; We are still waiting for the ACK so go back
Goto WAITFORACKTOENQ

; We have sent an ENQ character and received an ACK in response to it.
:GOTACKTOENQ

; Send the record to HSI Enigma
Send $(SendRec)
Echo Tx: $(SendRec)

; OPT: We have just sent the record and now need to wait for an ACK to it.
;      The parameter on the following line allows you to set how long we wait
;      for this response.
StartWaitTimer 10


:WAITFORACKTOREC

; sleep to slow the processing down a bit.
Sleep 100

; Read a single character from the port
ReadFromPort 1

if "$(_PORTCHARS)" NE ""
	Echo Rx: $(_PORTCHARS)

; if the received character is an ACK
if "$(_PORTCHARS)" EQ "<#6>"
	Goto GOTACKTOREC

; If the wait timeout has expired
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	Goto SendRecord

; We are still waiting for an ACK to the record so go back
Goto WAITFORACKTOREC

; We get to this if we receive an ACK to the record
:GOTACKTOREC

CALL HANDLEOK
EXIT

; ******************************************************************************
;  HANDLEOK
;    This will flag that the event is processed.

:HANDLEOK
  FLAGPROCESSED OK
RETURN
; ******************************************************************************


; ******************************************************************************
;  IgnoreRecord
;    This will flag that the event is processed and exit the script effectively
;    ignoring the record.

:IgnoreRecord
  FLAGPROCESSED OK
EXIT
; ******************************************************************************


; ************************************************************************
;  SENDENQ
;   Sends an Enq (#5) character out of the port and echoes it to the
;   communications display.

:SENDENQ
  Send <#5>
  Echo Tx: <#5>
RETURN
; ************************************************************************


; ************************************************************************
;  SENDACK
;   Sends an Ack (#6) character out of the port and echoes it to the
;   communications display.

:SENDACK
  Send <#6>
  Echo Tx: <#6>
RETURN
; ************************************************************************

