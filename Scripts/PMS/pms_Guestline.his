; Coded For: 50.0.0.1
; Script Version: 50.0.3.0
; ************************************************************************
;
;  This is the HI configuration script for emulating a Meridian Interface.
;
;  Note: This interface does not support Reservation Numbers
;
;                                                             AU-20110221
;
;  Modifications - AU - 22/03/2016 - 50.0.3.0
;	* Added Heartbeat
;	* Set Room Status to send as default
;	* Modified incoming and outgoing records to variable extension length
;
;  Modifications - AU - 29/04/2014 - 50.0.2.0
;	* Modified SendRecord to Exit if we do not get an ACK
;
;  Modifications - AU - 17/10/2013 - 50.0.0.1
;	* Updated to utilise V50 specific features
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;
define ReceivedRec
define RecType
define SendRec
define WorkVal
;
define f_FormatAssigned
;
define in_BCC
define in_Extension
define in_Variable
;
; ************************************************************************
;  INIT
;   Called at program start-up.  Gives you the opportunity to initialise
;   any script variables.
:INIT

Exit
; ************************************************************************


; ************************************************************************
;  PORT_OPENED
;   Called when socket is connected. Gives you the opportunity to send
;   any messages to start the connection.
:PORT_OPENED

Exit
; ************************************************************************


; ************************************************************************
;  SHUTDOWN
;   Called at program start-up.  Gives you the opportunity to send a link
;   termination message.
:SHUTDOWN

Exit
; ************************************************************************


; ************************************************************************
;  CallRecord
;   The script is executed from this label when we have a call record to
;   send.
:CallRecord

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomStatus
;   The script is executed from this label when we have a room status
;   event to send.
:RoomStatus

	Assign SendRec "ST $(_EV_EXTNNUMBER) <_EV_RSCODE:TEXT:2:RJ,ZP> MI        0<#3>"
	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Minibar
;   The script is executed from this label when we have a minibar event
;   to send.
:Minibar

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   The script is executed from this label when we have a message waiting
;   event to send.
:MessageWaiting

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  WakeupCall
;   The script is executed from this label when we have a wakeup call
;   event to send.
:WakeupCall

Goto IgnoreRecord	
; ************************************************************************


; ************************************************************************
;  Checkin
;   The script is executed from this label when we have a check in event
;   to send.
:Checkin

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Checkout
;   The script is executed from this label when we have a check out event
;   to send.
:Checkout

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   The script is executed from this label when we have a class of service
;   event to send.
:ClassOfService

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   The script is executed from this label when we have a room update
;   event to send.
:RoomUpdate

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   The script is executed from this label when we have a budget limit
;   event to send.
:BudgetLimit

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   The script is executed from this label when we have a room transfer
;   event to send.
:RoomTransfer

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   The script is executed from this label when we have an extra guest
;   event to send.
:ExtraGuest

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   The script is executed from this label when we have a do not disturb
;   event to send.
:DoNotDisturb

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  PIN
;   The script is executed from this label when we have a set or clear pin
;   event to send.
:PIN

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DDI
;   The script is executed from this label when we have a set or clear ddi
;   event to send.
:DDI

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillEnquiry
;   The script is executed from this label when we have a bill enquiry
;   event to send.
:BillEnquiry

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckout
;   The script is executed from this label when we have an express 
;   checkout event to send.
:ExpressCheckout

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillResponse
;   The script is executed from this label when we have a Bill Response 
;   event to send.
:BillResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckoutResponse
;   The script is executed from this label when we have an Express Checkout
;   Response event to send.
:ExpressCheckoutResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  TvRights
;   The script is executed from this label when we have a TV Rights 
;   event to send.
:TvRights

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  CallPackage
;   The script is executed from this label when we have a Call Package 
;   event to send.
:CallPackage

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  PeriodicCheck
;   The script is executed from this label periodically by the program
:PeriodicCheck

	Assign SendRec "HELLO<#3>"
	Call SendRecord

Exit
; ************************************************************************


; ************************************************************************
;  CheckIncoming
;    Execution is periodically carried out from here by the program to
;    check for incoming data during idle times.
:CheckIncoming

	ReadFromPort 1

	if "$(_PORTCHARS)" EQ ""
		Exit

	if "$(_PORTCHARS)" EQ "<#2>"
		Goto ReceiveRecord

	Echo Rx: $(_PORTCHARS)

Exit
; ************************************************************************


; ************************************************************************
;  ReceiveRecord
;    This label is called when we have a record to receive.
:ReceiveRecord

	Assign ReceivedRec ""
	Assign RecType ""
	Assign f_FormatAssigned ""
	Assign in_BCC ""
	Assign in_Extension ""
	Assign in_Variable ""

	StartWaitTimer 5

:ReceiveRecord_GetRecType

	ReadFromPort 5 2

	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Goto ReceiveRecord_Timeout

	if "$(_PORTCHARS)" EQ ""
		Goto ReceiveRecord_GetRecType

	Assign ReceivedRec "$(_PORTCHARS)"
	Assign RecType "$(_PORTCHARS)"

:ReceiveRecord_ReadTheRest

	ReadFromPort 1 2

	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Goto ReceiveRecord_Timeout

	if "$(_PORTCHARS)" EQ ""
		Goto ReceiveRecord_ReadTheRest

	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"

	if "$(_PORTCHARS)" EQ "<#3>"
		Goto ReceiveRecord_ReadBCC

	Goto ReceiveRecord_ReadTheRest

:ReceiveRecord_ReadBCC

	ReadFromPort 1 2

	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Assign in_BCC "<#0>"
	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Echo Rx: <#2>$(ReceivedRec)$(in_BCC)
	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Goto ReceiveRecord_GotRecord

	if "$(_PORTCHARS)" NE ""
		Assign in_BCC "$(_PORTCHARS)"
	if "$(_PORTCHARS)" NE ""
		Echo Rx: <#2>$(ReceivedRec)$(in_BCC)
	if "$(_PORTCHARS)" NE ""
		Goto ReceiveRecord_CheckBCC

	Goto ReceiveRecord_ReadBCC

:ReceiveRecord_CheckBCC

	GenerateBCCChar "7bit" "$(ReceivedRec)"

	if "$(_G_BCC)" NE "$(in_BCC)"
		Goto ReceiveRecord_BCCError

:ReceiveRecord_GotRecord

	if "$(RecType)" EQ "SE ST"
		Call STFormat
	if "$(RecType)" EQ "SE WA"
		Call WAFormat
	if "$(RecType)" EQ "SE CP"
		Call CPFormat

	if "$(f_FormatAssigned)" NE "TRUE"
		Echo Er: Unknown RecType: "$(RecType)".
	if "$(f_FormatAssigned)" NE "TRUE"
		Goto ReceiveRecord_SkipProcessing

	Assign _G_IN_RECORD "$(ReceivedRec)"
	ParseInRecord

	if "$(_G_IN_RECORDPARSEERROR)" EQ "TRUE"
		Goto ReceiveRecord_ParseError

	if "$(RecType)" EQ "SE ST"
		Call HandleST
	if "$(RecType)" EQ "SE WA"
		Call HandleWA
	if "$(RecType)" EQ "SE CP"
		Call HandleCP

:ReceiveRecord_SkipProcessing

	Send <#6>
	Echo Tx: <#6>

Exit

:ReceiveRecord_Timeout

	Echo Rx: <#2>$(ReceivedRec)$(in_BCC)
	Echo Er: Received an incomplete record.
	Send <#25>
	Echo Tx: <#25>

Exit

:ReceiveRecord_ParseError

	Echo Rx: <#2>$(ReceivedRec)$(in_BCC)
	Echo Er: Error when parsing received record.
	Send <#25>
	Echo Tx: <#25>

Exit

:ReceiveRecord_BCCError

	Echo Rx: <#2>$(ReceivedRec)$(in_BCC)
	Echo Er: Error with BCC Character, expecteD: "$(_G_BCC)".
	Send <#25>
	Echo Tx: <#25>

Exit
; ************************************************************************


; ************************************************************************
;  RecordFormats
;    These labels are called when we need to assign the record format for
;    incoming records
:STFormat

	AssignAsIs _G_IN_RECORDFORMAT "SE ST <in_Extension:TEXT:7:> <in_Variable:TEXT:5:LJ,SP><#3>"
	Assign f_FormatAssigned "TRUE"

Return

:WAFormat

	AssignAsIs _G_IN_RECORDFORMAT "SE WA <in_Extension:TEXT:7:> TI <in_Variable:TIME:5:HH:MM><#3>"
	Assign f_FormatAssigned "TRUE"

Return

:CPFormat

	AssignAsIs _G_IN_RECORDFORMAT "SE CP <in_Extension:TEXT:7:> \"<in_Variable:TEXT:255:AN>\"<#3>"
	Assign f_FormatAssigned "TRUE"

Return
; ************************************************************************


; ************************************************************************
;  HandleRecords
;    These labels are called when we need to handle an incoming record
:HandleST

	Assign WorkVal "$(in_Extension) Occupied Room"

	if "$(in_Variable)" EQ "CH IN"
		CreateCheckin "$(in_Extension)" "" "" "" "$(WorkVal)"
	if "$(in_Variable)" EQ "CH OU"
		CreateCheckout "$(in_Extension)"

	if "$(in_Variable)" EQ "CO ON"
		CreateCOS "$(in_Extension)" "" "TRUE" "FALSE" "TRUE" "TRUE" ""
	if "$(in_Variable)" EQ "CO OF"
		CreateCOS "$(in_Extension)" "" "TRUE" "TRUE" "TRUE" "TRUE" ""

Return

:HandleWA

	if "$(in_Variable)" EQ "00:00"
		CreateClearAllWakeup "$(in_Extension)"
	if "$(in_Variable)" NE "00:00"
		CreateSetWakeup "$(in_Extension)" "" "<in_Variable:TIME:4:HHMM>"

Return

:HandleCP

	CreateRoomUpdate "$(in_Extension)" "" "" "$(in_Variable)"

Return
; ************************************************************************


; ************************************************************************
;  SendRecord
;    This label is called when we have a record to send
:SendRecord

	GenerateBCCChar "7bit" "$(SendRec)"
	Assign SendRec "<#2>$(SendRec)$(_G_BCC)"

	Send $(SendRec)
	Echo Tx: $(SendRec)

	StartWaitTimer 10

:SendRecord_WaitForACK

	ReadFromPort 1 2

	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Echo Er: Timeout waiting for ACK
	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Exit

	if "$(_PORTCHARS)" EQ ""
		Goto SendRecord_WaitForACK

	if "$(_PORTCHARS)" EQ "<#2>"
		Assign ReceivedRec "<#2>"
	if "$(_PORTCHARS)" EQ "<#2>"
		Goto ReceiveRecord

	if "$(_PORTCHARS)" NE ""
		Echo Rx: $(_PORTCHARS)

	if "$(_PORTCHARS)" EQ "<#6>"
		Goto SendRecord_GotACK

	if "$(_PORTCHARS)" EQ "<#25>"
		Sleep 2000
	if "$(_PORTCHARS)" EQ "<#25>"
		Exit

	Goto SendRecord_WaitForAck

:SendRecord_GotACK

Return
; ************************************************************************


; ************************************************************************
;  HandleOKAndExit
;    This will flag that the event is processed and exit the script.
:HandleOKAndExit

	FlagProcessed OK

Exit
; ************************************************************************


; ************************************************************************
;  IgnoreRecord
;    This will flag that the event is processed and exit the script effectively
;    ignoring the record.
:IgnoreRecord

	FlagProcessed OK

Exit
; ************************************************************************
