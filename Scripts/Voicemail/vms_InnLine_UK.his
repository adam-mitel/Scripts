; Coded For: 50.0.0.1
; Script Version: 50.0.3.0
; ************************************************************************
;
;  This is the HI Script for the Tiger Innovation 2020 voicemail system
;  which is running INNHI 3.16 or later.
;
;                                                              pjh-250304
;
;  Modifications - AU - 06/07/2015 - 50.0.3.0
;	* Modified Wakeup to skip sending Set Wakeups that are from the past
;
;  Modifications - AU - 18/08/2014 - 50.0.2.0
;	* Removed language translations for datatrans language translations
;
;  Modifications - AU - 17/10/2013 - 50.0.1.0
;	* Updated to utilise V50 specific features
;
;  Modifications - AU - 17/04/2013
;	* Modified two sections in WakeupCall to Exit in certain situations
;	* Added support for the Voice Mail Extension Facility
;
;  Modifications - AU - 15/02/2013
;	* Modified all labels to send the reservation number as DEFAULT if we dont have
;	  one.  Sending DEFAULT101 where 101 is the Room Number was causing problems
;	  restoring messages for old guests
;
;  Modifications - AU - 04/02/2013
;	* Added support for Wakeup response UNKNOWN for Wakeup Clear
;
;  Modifications - AU - 19/11/2012
;	* Added support for Maid ID on Minibar and Room Status messages
;
;  Modifications - AU - 09/11/2012
;	* Resolved a problem where we would send a Wakeup message and receive a record
;	  instead of an ACK
;
;  Modifications - AU - 17/10/2012
;	* Removed description from CreateMinibar so EvMux uses the PLU description
;
;  Modifications - AU - 13/06/2012
;	* Added support for Wakeup response UNKNOWN for Wakeup Set
;	* Added support for ES and EN language codes
;	* Added an option to set the password to the Room Number on Checkin
;
;  Modifications - AU - 31/05/2011
;	* Standardised the script format
;	* Added new event labels
;	* Enhanced Wakeup functionality in regard to waiting for a WAKEINFO
;
;  Modifications - AU - 19/04/2011
;	* Modified Language Codes in Checkin and RoomUpdate
;	* Modified Wakeup to use a second wait timer
;	* Added a delay after sending an ACK to help the INNHI driver
;
;  Modifications - AU - 28/03/2011
;	* Modified WAKEINFORECORD to flag f_GotWakeupResponse as TRUE on a Fail
;
;  Modifications - AU - 11/03/2011
;	* Modified Guest ID's to send DEFAULT101 where 101 is the Room Number
;	  if there is no Reservation number to send.
;
;  Modifications - AU - 09/02/2011
;	* Modified WAKEINFORECORD so that we don't parse if there is no
;	  GI= in the received string.
;	* Modified the wait time in the Wakeup label from 30 to 60 seconds.
;
;  Modifications - AU - 11/01/2011
;	* Modified Wakeup so that if we don't receive a WAKEINFO for
;	  30 seconds, we will clear it and try again.
;
;  Modifications - AU - 02/09/2010
;	* Added all of Innovations languages to translations based on what
;	  we receive from FIAS.
;
;  Modifications - AU - 20/04/2010
;	* Added an option for Room or Extension based events
;	* Added an option controlling whether to send Message Waiting
;	* Added an option controlling whether to send Wakeups
;	* If we are unable to set a Wakeup because it is a Vacant Room we
;	  will now check the room in.
;
;  Modifications - AU - 24/03/2010
;	* Changed from RoomBased to ExtensionBased
;	* Modified RoomUpdate as there was a problem with LangCode
;	* Modified Incoming MWI creation to cater for when we receive no
;	  GuestID in the string.
;	* Modified INIT section to use less if statements when deciding if
;	  it is to use IP or Serial.
;	* Added Shutdown Label
;	* Modified Incoming MAIDSTATUS record Status field on the AssignAsIs.
;
;  Modifications - AU - 05/03/2010
;	* Added missing event labels
;	* Modified Checkin, RoomUpdate and DDI labels to send Reservation
;	  number as the Guest ID if we have one
;	* Removed HBRoom and HBCount messages
;
;  Modifications - AU - 04/12/2009
;	* Modified Wakeup Sections so that we create Wakeup Result events
;	* Modified Wakeup Sections so that we wait for a WAKEINFO after a WAKESET
;	* Modified Wakeup sections so that when a guest sets or clears
;	  a wakeup call via the phone, we generate a SET and CLEAR message
;	* Modified MAIDSTATUS section so we correctly process RoomStatus events
;	* Modified HeartBeat so we send it less frequently
;	* Modified CreateMinibar to include a description of "Innovation".
;
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;
define SendRec
define ReceivedRec
define WorkVal
define WorkTmp
define RecType
;
define g_DR
define g_ID
define g_LangCode
define g_RN
;
define s_ExtensionBased
define s_ExtensionFacilities
define s_MessageWaiting
define s_Passcode
define s_UseIP
define s_Wakeups
;
define f_GotWakeupResponse
define f_ReceivedWhileSending
define f_WaitingForWakeupReponse
define f_WakeupRoom
define f_WakeupType
;
define in_Room
define in_VoiceDID
define in_DataDID
define in_FaxDID
define in_BCC
define in_UrgentCount
define in_MsgCount
define in_SavedCount
define in_Tenant
define in_GuestID
define in_Sync
define in_ItemID
define in_Quantity
define in_MaidID
define in_Status
define in_WakeupDate
define in_WakeupTime
define in_WakeRecurring
define in_WakeupID
define in_WakeupResult
;
; ************************************************************************
;  INIT
;   This label is called at program startup.
:INIT

	// OPT: Set whether this interface is Extension Based.
	//	"YES" for Extension Based
	//	"NO" for Room Based
	Assign s_ExtensionBased "YES"
	
	// OPT: Set whether we should only send extensions which have the VOICE
	//      Extension Facility assigned to it
	Assign s_ExtensionFacilities "NO"

	// OPT: Set whether this interface is to deliver Message Waiting events
	Assign s_MessageWaiting "NO"

	// OPT: Set whether this interface is to deliver Wakeup events
	Assign s_Wakeups "YES"

	// OPT: Set whether we want to set the passcode to the Room Number
	Assign s_Passcode "NO"

	// OPT: Set here whether we are to use IP or not
	Assign s_UseIP "TRUE"

	Assign f_GotWakeupResponse "FALSE"
	Assign f_WaitingForWakeupReponse "FALSE"

	if "$(s_UseIP)" EQ "TRUE"
		Exit

	OpenPort
	Sleep 1000

Goto PORT_OPENED
; ************************************************************************


; ************************************************************************
;  PORT_OPENED
;    This label is called when an IP Connection is established.
:PORT_OPENED

	Assign SendRec "HELLO|<#3>"
	if "$(s_UseIP)" NE "TRUE"
		GenerateBCCChar "" "$(SendRec)"
	if "$(s_UseIP)" NE "TRUE"
		Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
	if "$(s_UseIP)" EQ "TRUE"
		Assign SendRec "<#2>$(SendRec)<#0>"

	; Send our record
	Call SendRecord

	Assign SendRec "ADMIN|++=WAKEINFO|<#3>"
	if "$(s_UseIP)" NE "TRUE"
		GenerateBCCChar "" "$(SendRec)"
	if "$(s_UseIP)" NE "TRUE"
		Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
	if "$(s_UseIP)" EQ "TRUE"
		Assign SendRec "<#2>$(SendRec)<#0>"

	Call SendRecord

	Assign f_GotWakeupResponse "FALSE"
	Assign f_WaitingForWakeupReponse "FALSE"

Exit
; ************************************************************************


; ************************************************************************
;  SHUTDOWN
;    This label is called when the program is terminated.
:SHUTDOWN

Exit
; ************************************************************************


; ************************************************************************
;  CallRecord
;   This label is executed by the program when we have a Call Record to
;   send.
:CallRecord

Goto IgnoreRecord
; ************************************************************************

; ************************************************************************
;  RoomStatus
;   This label is executed by the program when we have a Room Status
;   event to send.
:RoomStatus

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  Minibar
;   This label is executed by the program when we have a Minibar Event
;   to send.
:Minibar

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   This label is executed by the program when we have a Message Waiting
;   event to send.
:MessageWaiting

	if "$(s_MessageWaiting)" NE "YES"
		Goto IgnoreRecord
		
	if "$(s_ExtensionFacilities)" EQ "YES"
		Call HandleExtensionFacilities

	Assign g_RN ""
	if "$(s_ExtensionBased)" EQ "YES"
		Assign g_RN "$(_EV_EXTNNUMBER)"
	if "$(s_ExtensionBased)" EQ "NO"
		Assign g_RN "$(_EV_ROOMNUMBER)"

	if "$(g_RN)" EQ ""
		Echo Er: No Room or Extension Number for ID $(_EV_ID), please check the s_ExtensionBased setting.
	if "$(g_RN)" EQ ""
		Goto IgnoreRecord

	Assign SendRec "TEXTMWI|RN=<g_RN:TEXT:7:LJ>|IN=<_EV_MWSTATE:TEXT:7:>|<#3>"
	if "$(s_UseIP)" NE "TRUE"
		GenerateBCCChar "" "$(SendRec)"
	if "$(s_UseIP)" NE "TRUE"
		Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
	if "$(s_UseIP)" EQ "TRUE"
		Assign SendRec "<#2>$(SendRec)<#0>"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  WakeupCall
;   This label is executed by the program when we have a Wakeup Call
;   event to send.
:WakeupCall

	if "$(s_Wakeups)" NE "YES"
		Goto IgnoreRecord
		
	if "$(s_ExtensionFacilities)" EQ "YES"
		Call HandleExtensionFacilities

	Assign g_RN ""
	if "$(s_ExtensionBased)" EQ "YES"
		Assign g_RN "$(_EV_EXTNNUMBER)"
	if "$(s_ExtensionBased)" EQ "NO"
		Assign g_RN "$(_EV_ROOMNUMBER)"

	if "$(g_RN)" EQ ""
		Echo Er: No Room or Extension Number for ID $(_EV_ID), please check the s_ExtensionBased setting.
	if "$(g_RN)" EQ ""
		Goto IgnoreRecord

	if "$(_EV_WKACTION)" EQ "SET"
		Goto WKSET
	if "$(_EV_WKACTION)" EQ "CLEAR"
		Goto WKCLEAR
	if "$(_EV_WKACTION)" EQ "CLEARALL"
		Goto WKCLEARALL

	Goto IgnoreRecord

:WKSET

	Assign WorkVal "<_EV_WKDATE:DATE:8:YYYYMMDD>"
	Assign WorkTmp "<_G_NOW:DATE:8:YYYYMMDD>"

	if $(WorkVal) LT $(WorkTmp)
		Echo Db: Ignoring Set Wakeup Call Event $(_EV_ID) - the wakeup date is in the past
	if $(WorkVal) LT $(WorkTmp)
		Goto IgnoreRecord

	Assign SendRec "WAKESET|RN=<g_RN:TEXT:7:LJ>|WT=<_EV_WKTIME:TIME:4:HHMM>|<#3>"
	Assign f_WakeupType "SET"
	Goto WKSEND

:WKCLEAR

	Assign SendRec "WAKECLEAR|RN=<g_RN:TEXT:7:LJ>|WT=<_EV_WKTIME:TIME:4:HHMM>|<#3>"
	Assign f_WakeupType "CLEAR"
	Goto WKSEND

:WKCLEARALL

	Assign SendRec "WAKECLEAR|RN=<g_RN:TEXT:7:LJ>|<#3>"
	Assign f_WakeupType "CLEARALL"
	Goto WKSEND

:WKSEND

	Assign f_GotWakeupResponse "FALSE"
	Assign f_WaitingForWakeupReponse "TRUE"
	Assign f_WakeupRoom "$(g_RN)"

	if "$(s_UseIP)" NE "TRUE"
		GenerateBCCChar "" "$(SendRec)"
	if "$(s_UseIP)" NE "TRUE"
		Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
	if "$(s_UseIP)" EQ "TRUE"
		Assign SendRec "<#2>$(SendRec)<#0>"

	Call SendRecord

	StartWaitTimer2 60

:WKSENT

	Assign f_GotWakeupResponse "FALSE"
	Assign f_WaitingForWakeupReponse "TRUE"
	Assign f_WakeupRoom "$(g_RN)"

:WKWAIT

	Sleep 50

	Call CheckIncoming

	if "$(f_GotWakeupResponse)" EQ "TRUE"
		Goto WKCHECK

	if "$(_WAITTIMEEXPIRED2)" EQ "TRUE"
		Goto WKTIMEOUT

	Goto WKWAIT

:WKTIMEOUT

	Echo Db: Timeout waiting for WAKEINFO for $(g_RN)
	Sleep 2000

	if "$(f_WakeupType)" EQ "CLEARALL"
		Goto WKCLEARALL
	if "$(f_WakeupType)" EQ "SET"
		Echo Db: Clearing Wakeup on $(g_RN) before resetting

	Goto WKCLEAR

:WKCHECK

	if "$(in_Room)" NE "$(g_RN)"
		Goto WKSENT

	if "$(f_WakeupType)" EQ "SET"
		Goto WKCHECK_SET
	if "$(f_WakeupType)" NE "SET"
		Goto WKCHECK_CLEAR

:WKCHECK_SET

	if "$(in_WakeupResult)" EQ "SET"
		Goto WKCOMPLETE
	if "$(in_WakeupResult)" EQ "FAILED"
		Goto WKFAIL
	if "$(in_WakeupResult)" EQ "UNKNOWN"
		Goto WKUNKNOWN

	; This isn't the response we are expecting

	Goto WKSENT

:WKCHECK_CLEAR

	if "$(in_WakeupResult)" EQ "CLEARED"
		Goto WKCOMPLETE
	if "$(in_WakeupResult)" EQ "NONE"
		Goto WKCOMPLETE
	if "$(in_WakeupResult)" EQ "FAILED"
		Goto WKFAIL
	if "$(in_WakeupResult)" EQ "UNKNOWN"
		Goto WKUNKNOWN

	; This isn't the response we are expecting

	Goto WKSENT

:WKFAIL

	Echo Db: Failed to set Wakeup on $(g_RN) because it's vacant - Checking in

	Assign g_ID "DEFAULT"
	if "$(_EV_RESERVATION)" NE ""
		Assign g_ID "$(_EV_RESERVATION)"

	Assign SendRec "GUESTIN|RN=<g_RN:TEXT:7:LJ>|GI=$(g_ID)|LN=WK Checkin|LA=DEF|<#3>"
	if "$(s_UseIP)" NE "TRUE"
		GenerateBCCChar "" "$(SendRec)"
	if "$(s_UseIP)" NE "TRUE"
		Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
	if "$(s_UseIP)" EQ "TRUE"
		Assign SendRec "<#2>$(SendRec)<#0>"

	Call SendRecord

	Sleep 3000

	Exit

:WKUNKNOWN

	Echo Er: Unknown mailbox number for $(g_RN) - Check Innovation configuration

	Goto IgnoreRecord

:WKCOMPLETE

	; If these do not match we need to exit and resend the original event
	if "$(_EV_WKACTION)" NE "$(f_WakeupType)"
		Exit

	Assign f_GotWakeupResponse "FALSE"
	Assign f_WaitingForWakeupReponse "FALSE"
	Assign f_WakeupType ""
	Assign f_WakeupRoom ""

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkin
;   This label is executed by the program when we have a Check In event
;   to send.
:Checkin

	if "$(s_ExtensionFacilities)" EQ "YES"
		Call HandleExtensionFacilities

	Assign g_RN ""
	if "$(s_ExtensionBased)" EQ "YES"
		Assign g_RN "$(_EV_EXTNNUMBER)"
	if "$(s_ExtensionBased)" EQ "NO"
		Assign g_RN "$(_EV_ROOMNUMBER)"

	if "$(g_RN)" EQ ""
		Echo Er: No Room or Extension Number for ID $(_EV_ID), please check the s_ExtensionBased setting.
	if "$(g_RN)" EQ ""
		Goto IgnoreRecord

	Assign g_LangCode "DEF"
	if "$(_EV_CILANGCODE)" NE ""
		Assign g_LangCode "$(_EV_CILANGCODE)"

	Assign g_ID "DEFAULT"
	if "$(_EV_RESERVATION)" NE ""
		Assign g_ID "$(_EV_RESERVATION)"

	Assign SendRec "GUESTIN|RN=<g_RN:TEXT:7:LJ>|GI=<g_ID:TEXT:10:>|LN=<_EV_NAMEDISPLAY:TEXT:30:LJ>|LA=<g_LangCode:TEXT:3:>|"

	if "$(s_Passcode)" EQ "YES"
		Assign SendRec "$(SendRec)PA=$(_EV_ROOMNUMBER)|"

	Assign SendRec "$(SendRec)<#3>"

	if "$(s_UseIP)" NE "TRUE"
		GenerateBCCChar "" "$(SendRec)"
	if "$(s_UseIP)" NE "TRUE"
		Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
	if "$(s_UseIP)" EQ "TRUE"
		Assign SendRec "<#2>$(SendRec)<#0>"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkout
;   This label is executed by the program when we have a Check Out event
;   to send.
:Checkout

	if "$(s_ExtensionFacilities)" EQ "YES"
		Call HandleExtensionFacilities

	Assign g_RN ""
	if "$(s_ExtensionBased)" EQ "YES"
		Assign g_RN "$(_EV_EXTNNUMBER)"
	if "$(s_ExtensionBased)" EQ "NO"
		Assign g_RN "$(_EV_ROOMNUMBER)"

	if "$(g_RN)" EQ ""
		Echo Er: No Room or Extension Number for ID $(_EV_ID), please check the s_ExtensionBased setting.
	if "$(g_RN)" EQ ""
		Goto IgnoreRecord

	Assign SendRec "GUESTOUT|RN=<g_RN:TEXT:7:LJ>|<#3>"
	if "$(s_UseIP)" NE "TRUE"
		GenerateBCCChar "" "$(SendRec)"
	if "$(s_UseIP)" NE "TRUE"
		Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
	if "$(s_UseIP)" EQ "TRUE"
		Assign SendRec "<#2>$(SendRec)<#0>"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   This label is executed by the program when we have a Class of Service
;   event to send.
:ClassOfService

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   This label is executed by the program when we have a Room Update
;   event to send.
:RoomUpdate

	if "$(s_ExtensionFacilities)" EQ "YES"
		Call HandleExtensionFacilities

	Assign g_RN ""
	if "$(s_ExtensionBased)" EQ "YES"
		Assign g_RN "$(_EV_EXTNNUMBER)"
	if "$(s_ExtensionBased)" EQ "NO"
		Assign g_RN "$(_EV_ROOMNUMBER)"

	if "$(g_RN)" EQ ""
		Echo Er: No Room or Extension Number for ID $(_EV_ID), please check the s_ExtensionBased setting.
	if "$(g_RN)" EQ ""
		Goto IgnoreRecord

	Assign g_LangCode "DEF"
	if "$(_EV_RULANGCODE)" NE ""
		Assign g_LangCode "$(_EV_RULANGCODE)"

	Assign g_ID "DEFAULT"
	if "$(_EV_RESERVATION)" NE ""
		Assign g_ID "$(_EV_RESERVATION)"

	Assign SendRec "GUESTINFO|RN=<g_RN:TEXT:7:LJ>|GI=<g_ID:TEXT:10:>|LN=<_EV_NAMEDISPLAY:TEXT:30:LJ>|LA=<g_LangCode:TEXT:3:>|<#3>"
	if "$(s_UseIP)" NE "TRUE"
		GenerateBCCChar "" "$(SendRec)"
	if "$(s_UseIP)" NE "TRUE"
		Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
	if "$(s_UseIP)" EQ "TRUE"
		Assign SendRec "<#2>$(SendRec)<#0>"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   This label is executed by the program when we have a Budget Limit
;   event to send.
:BudgetLimit

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   This label is executed by the program when we have a Room Transfer
;   event to send.
:RoomTransfer

	if "$(s_ExtensionFacilities)" EQ "YES"
		Call HandleExtensionFacilities

	Assign g_RN ""
	if "$(s_ExtensionBased)" EQ "YES"
		Assign g_RN "$(_EV_EXTNNUMBER)"
	if "$(s_ExtensionBased)" EQ "NO"
		Assign g_RN "$(_EV_ROOMNUMBER)"

	Assign g_DR ""
	if "$(s_ExtensionBased)" EQ "YES"
		Assign g_DR "$(_EV_TRDESTEXTNNUMBER)"
	if "$(s_ExtensionBased)" EQ "NO"
		Assign g_DR "$(_EV_TRDESTROOMNUMBER)"

	if "$(g_RN)" EQ ""
		Echo Er: No Room or Extension Number for ID $(_EV_ID), please check the s_ExtensionBased setting.
	if "$(g_RN)" EQ ""
		Goto IgnoreRecord

	if "$(g_DR)" EQ ""
		Echo Er: No Room or Extension Number for ID $(_EV_ID), please check the s_ExtensionBased setting.
	if "$(g_DR)" EQ ""
		Goto IgnoreRecord

	Assign SendRec "GUESTMOVE|RN=<g_RN:TEXT:7:LJ>|DR=<g_DR:TEXT:7:LJ>|<#3>"
	if "$(s_UseIP)" NE "TRUE"
		GenerateBCCChar "" "$(SendRec)"
	if "$(s_UseIP)" NE "TRUE"
		Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
	if "$(s_UseIP)" EQ "TRUE"
		Assign SendRec "<#2>$(SendRec)<#0>"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   This label is executed by the program when we have an Extra Guest
;   event to send.
:ExtraGuest

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   This label is executed by the program when we have a do not disturb
;   event to send.
:DoNotDisturb

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  PIN
;   This label is executed by the program when we have a pin event to send.
:PIN

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  DDI
;   This label is executed by the program when we have a DDI event to send.
:DDI

	Goto IgnoreRecord
	
	if "$(s_ExtensionFacilities)" EQ "YES"
		Call HandleExtensionFacilities

	Assign g_RN ""
	if "$(s_ExtensionBased)" EQ "YES"
		Assign g_RN "$(_EV_EXTNNUMBER)"
	if "$(s_ExtensionBased)" EQ "NO"
		Assign g_RN "$(_EV_ROOMNUMBER)"

	if "$(g_RN)" EQ ""
		Echo Er: No Room or Extension Number for ID $(_EV_ID), please check the s_ExtensionBased setting.
	if "$(g_RN)" EQ ""
		Goto IgnoreRecord

	Assign g_ID "DEFAULT"
	if "$(_EV_RESERVATION)" NE ""
		Assign g_ID "$(_EV_RESERVATION)"

	if "$(_EV_DDIACTION)" EQ "SET"
		Goto DDISET

	if "$(_EV_DDIACTION)" EQ "CLEAR"
		Goto DDICLEAR

	Echo Er: Unknown DDIACTION "$(_EV_DDIACTION)"
	Goto IgnoreRecord

:DDISET

	Assign SendRec "TNOSET|RN=<g_RN:TEXT:7:LJ>|GI=<g_ID:TEXT:10:>|T1=<_EV_DDI:TEXT:11:>|<#3>"
	if "$(s_UseIP)" NE "TRUE"
		GenerateBCCChar "" "$(SendRec)"
	if "$(s_UseIP)" NE "TRUE"
		Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
	if "$(s_UseIP)" EQ "TRUE"
		Assign SendRec "<#2>$(SendRec)<#0>"

	Call SendRecord

	Assign SendRec "TNOPRINT|RN=<g_RN:TEXT:7:LJ>|GI=<g_ID:TEXT:10:>|<#3>"
	if "$(s_UseIP)" NE "TRUE"
		GenerateBCCChar "" "$(SendRec)"
	if "$(s_UseIP)" NE "TRUE"
		Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
	if "$(s_UseIP)" EQ "TRUE"
		Assign SendRec "<#2>$(SendRec)<#0>"

	Call SendRecord

	Goto HandleOKAndExit

:DDICLEAR

	Assign SendRec "TNOCLEAR|RN=<g_RN:TEXT:7:LJ>|GI=<g_ID:TEXT:10:>|<#3>"
	if "$(s_UseIP)" NE "TRUE"
		GenerateBCCChar "" "$(SendRec)"
	if "$(s_UseIP)" NE "TRUE"
		Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
	if "$(s_UseIP)" EQ "TRUE"
		Assign SendRec "<#2>$(SendRec)<#0>"

	Call SendRecord

Goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  GuestInfo
;   This label is executed by the program when we have a Guest Information
;   event to send.
:GuestInfo

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillEnquiry
;   This label is executed by the program when we have a Bill Enquiry
;   event to send.
:BillEnquiry

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckout
;   This label is executed by the program when we have an Express Checkout
;   event to send.
:ExpressCheckout

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  BillResponse
;   This label is executed by the program when we have a Bill Response
;   event to send.
:BillResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExpressCheckoutResponse
;   This label is executed by the program when we have an Express Checkout
;   Response event to send.
:ExpressCheckoutResponse

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  TVRights
;   This label is executed by the program when we have a Television Rights
;   event to send.
:TVRights

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  CallPackage
;   This label is executed by the program when we have a Call Package
;   event to send.
:CallPackage

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  ExternalMessage
;   This label is executed by the program when we have an External
;   Message event to send.
:ExternalMessage

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  GenericPassthrough
;   This label is executed by the program when we have a Generic
;   Passthrough event to send.
:GenericPassthrough

Goto IgnoreRecord
; ************************************************************************


; ************************************************************************
;  PeriodicCheck
;   This label is executed periodically by the program.
:PeriodicCheck

	Assign SendRec "STILLHERE|<#3>"
	if "$(s_UseIP)" NE "TRUE"
		GenerateBCCChar "" "$(SendRec)"
	if "$(s_UseIP)" NE "TRUE"
		Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
	if "$(s_UseIP)" EQ "TRUE"
		Assign SendRec "<#2>$(SendRec)<#0>"

	Call SendRecord

Exit
; ************************************************************************


; ************************************************************************
;  CheckIncoming
;   This label is executed by the program periodically to check incoming
;   messeges.
:CheckIncoming

	ReadFromPort 1

	; If we got an STX then store it and go read
	if "$(_PORTCHARS)" EQ "<#2>"
		Assign ReceivedRec "<#2>"
	if "$(_PORTCHARS)" EQ "<#2>"
		Goto ReceiveRecord

	if "$(f_WaitingForWakeupReponse)" EQ "TRUE"
		Return

	Echo Rx: $(_PORTCHARS)

Exit
; ************************************************************************


; ************************************************************************
;  ReceiveRecord
;   This label is called when we have received an STX within the
;   CheckIncoming or SendRecord labels.
:ReceiveRecord

	; Clear old values
	Assign RecType ""
	Assign in_Room ""
	Assign in_VoiceDID ""
	Assign in_DataDID ""
	Assign in_FaxDID ""
	Assign in_BCC ""
	Assign in_UrgentCount ""
	Assign in_MsgCount ""
	Assign in_SavedCount ""
	Assign in_Tenant ""
	Assign in_GuestID ""
	Assign in_Sync ""
	Assign in_ItemID ""
	Assign in_Quantity ""
	Assign in_MaidID ""
	Assign in_Status ""
	Assign in_WakeupDate ""
	Assign in_WakeupTime ""
	Assign in_WakeRecurring ""
	Assign in_WakeupID ""
	Assign in_WakeupResult ""

	; Start a wait Timer
	StartWaitTimer 5

:ReceiveRecord_ReadRecord

	ReadFromPort 1

	; If it's not blank add it to the current record.
	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"
	
	; If we got an ETX then we've finished receiving the record.
	if "$(_PORTCHARS)" EQ "<#3>"
		StartWaitTimer 2
	if "$(_PORTCHARS)" EQ "<#3>"
		Goto ReceiveRecord_ReadBCC

	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Goto ReceiveRecord_RecordTimeout

	Goto ReceiveRecord_ReadRecord

:ReceiveRecord_ReadBCC

	ReadFromPort 1

	if "$(_PORTCHARS)" NE ""
		Assign ReceivedRec "$(ReceivedRec)$(_PORTCHARS)"
	if "$(_PORTCHARS)" NE ""
		Goto ReceiveRecord_FinishedReceiving

	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Assign ReceivedRec "$(ReceivedRec)<#0>"
	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Goto ReceiveRecord_FinishedReceiving

	Goto ReceiveRecord_ReadBCC

:ReceiveRecord_FinishedReceiving

	; Echo the record
	Echo Rx: $(ReceivedRec)	

	if "<ReceivedRec:TEXT:9:LJ,SP>" EQ "<#2>VOICEMSG"
		Call VOICEMSGRECORD
	if "<ReceivedRec:TEXT:11:LJ,SP>" EQ "<#2>MAIDSTATUS"
		Call MAIDSTATUSRECORD
	if "<ReceivedRec:TEXT:8:LJ,SP>" EQ "<#2>MINIBAR"
		Call MINIBARRECORD
	if "<ReceivedRec:TEXT:9:LJ,SP>" EQ "<#2>WAKEINFO"
		Call WAKEINFORECORD

	if "$(RecType)" EQ ""
		Goto ReceiveRecord_SkipProcessIncoming

	Assign _G_IN_RECORD "$(ReceivedRec)"
	ParseInRecord

	if "$(_G_IN_RECORDPARSEERROR)" EQ "TRUE"
		Goto ReceiveRecord_RecordError

	; Handle messages
	if "$(RecType)" EQ "VoiceMsg"
		Call HandleVoiceMsg
	if "$(RecType)" EQ "MaidStatus"
		Call HandleMaidStatus
	if "$(RecType)" EQ "MiniBar"
		Call HandleMiniBar
	if "$(RecType)" EQ "WakeInfo"
		Call HandleWakeInfo

:ReceiveRecord_SkipProcessIncoming

	; Send an ACK
	Send <#6>
	Echo Tx: <#6>

	Sleep 1000

	if "$(f_WaitingForWakeupReponse)" EQ "TRUE"
		Return

Exit

:ReceiveRecord_RecordError

	; We've timed out so echo partial record and error message
	Echo Er: Error with received record. Ignoring...
	Echo Er: "$(ReceivedRec)"

	; Send a NAK
	Send <#21>
	Echo Tx: <#21>

Exit

:ReceiveRecord_RecordTimeout

	; We've timed out so echo partial record and error message
	Echo Rx: $(ReceivedRec)
	Echo Er: Timed out receiving record.

	; Send a NAK
	Send <#21>
	Echo Tx: <#21>

Exit	
; ************************************************************************


; ************************************************************************
;  MAIDSTATUSRECORD
;    This label is called before parsing an incoming Maid Status record
:MAIDSTATUSRECORD

	Assign RecType "MaidStatus"
	ContainsSTR "|MI=" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>MAIDSTATUS|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|ST=<in_Status:TEXT:1:LJ,SP>|MI=<in_MaidID:TEXT:7:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" NE "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>MAIDSTATUS|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|ST=<in_Status:TEXT:1:LJ,SP>|<#3><in_BCC:TEXT:1:LJ,SP>"

Return
; ************************************************************************


; ************************************************************************
;  MINIBARRECORD
;    This label is called before parsing an incoming Minibar record
:MINIBARRECORD

	Assign RecType "MiniBar"
	ContainsSTR "|MI=" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>MINIBAR|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|IT=<in_ItemID:TEXT:2:>|QT=<in_Quantity:TEXT:2:>|MI=<in_MaidID:TEXT:7:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" NE "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>MINIBAR|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|IT=<in_ItemID:TEXT:2:>|QT=<in_Quantity:TEXT:2:>|<#3><in_BCC:TEXT:1:LJ,SP>"

Return
; ************************************************************************


; ************************************************************************
;  VOICEMSGRECORD
;    This label is called before parsing an incoming Message Waiting record
:VOICEMSGRECORD

	Assign RecType "VoiceMsg"
	ContainsSTR "GI=" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "FALSE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>VOICEMSG|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|#U=<in_UrgentCount:TEXT:3:>|#N=<in_MsgCount:TEXT:3:>|#S=<in_SavedCount:TEXT:3:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" NE "FALSE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>VOICEMSG|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|GI=<in_GuestID:TEXT:20:>|#U=<in_UrgentCount:TEXT:3:>|#N=<in_MsgCount:TEXT:3:>|#S=<in_SavedCount:TEXT:3:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"

Return
; ************************************************************************


; ************************************************************************
;  WAKEINFORECORD
;    This label is called before parsing an incoming Wakeup record
:WAKEINFORECORD

	ContainsSTR "GI=" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Goto WAKEINFORECORD_GI

	ContainsSTR "RC=UNKNOWN" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Assign RecType "WakeInfo"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>WAKEINFO|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|WT=<in_WakeupTime:TIME:4:HHMM>|RE=<in_WakeRecurring:TEXT:4:>|RC=<in_WakeupResult:TEXT:20:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" EQ "TRUE"
		Return

	ContainsSTR "RC=FAILED" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Assign RecType "WakeInfo"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>WAKEINFO|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|WT=<in_WakeupTime:TIME:4:HHMM>|RE=<in_WakeRecurring:TEXT:4:>|RC=<in_WakeupResult:TEXT:20:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" EQ "TRUE"
		Return

	ContainsSTR "RC=NONE" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Assign RecType "WakeInfo"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>WAKEINFO|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|WT=<in_WakeupTime:TIME:4:HHMM>|RE=<in_WakeRecurring:TEXT:4:>|RC=<in_WakeupResult:TEXT:20:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" EQ "TRUE"
		Return

	ContainsSTR "RC=SET" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Assign RecType "WakeInfo"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>WAKEINFO|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|WT=<in_WakeupTime:TIME:4:HHMM>|WD=<in_WakeupDate:DATE:8:YYYYMMDD>|RE=<in_WakeRecurring:TEXT:4:>|WI=<in_WakeupID:TEXT:20:>|RC=<in_WakeupResult:TEXT:20:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" EQ "TRUE"
		Return

	ContainsSTR "RC=CLEARED" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Assign RecType "WakeInfo"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>WAKEINFO|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|WT=<in_WakeupTime:TIME:4:HHMM>|WD=<in_WakeupDate:DATE:8:YYYYMMDD>|RE=<in_WakeRecurring:TEXT:4:>|WI=<in_WakeupID:TEXT:20:>|RC=<in_WakeupResult:TEXT:20:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" EQ "TRUE"
		Return

	ContainsSTR "RC=DELIVERYOK" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Assign RecType "WakeInfo"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>WAKEINFO|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|WT=<in_WakeupTime:TIME:4:HHMM>|WD=<in_WakeupDate:DATE:8:YYYYMMDD>|RE=<in_WakeRecurring:TEXT:4:>|WI=<in_WakeupID:TEXT:20:>|RC=<in_WakeupResult:TEXT:20:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" EQ "TRUE"
		Return

	ContainsSTR "RC=DELIVERYFAIL" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Assign RecType "WakeInfo"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>WAKEINFO|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|WT=<in_WakeupTime:TIME:4:HHMM>|WD=<in_WakeupDate:DATE:8:YYYYMMDD>|RE=<in_WakeRecurring:TEXT:4:>|WI=<in_WakeupID:TEXT:20:>|RC=<in_WakeupResult:TEXT:20:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" EQ "TRUE"
		Return

:WAKEINFORECORD_GI

	ContainsSTR "RC=FAILED" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Assign RecType "WakeInfo"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>WAKEINFO|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|GI=<in_GuestID:TEXT:20:>|WT=<in_WakeupTime:TIME:4:HHMM>|RE=<in_WakeRecurring:TEXT:4:>|RC=<in_WakeupResult:TEXT:20:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" EQ "TRUE"
		Return

	ContainsSTR "RC=NONE" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Assign RecType "WakeInfo"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>WAKEINFO|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|GI=<in_GuestID:TEXT:20:>|WT=<in_WakeupTime:TIME:4:HHMM>|RE=<in_WakeRecurring:TEXT:4:>|RC=<in_WakeupResult:TEXT:20:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" EQ "TRUE"
		Return

	ContainsSTR "RC=SET" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Assign RecType "WakeInfo"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>WAKEINFO|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|GI=<in_GuestID:TEXT:20:>|WT=<in_WakeupTime:TIME:4:HHMM>|WD=<in_WakeupDate:DATE:8:YYYYMMDD>|RE=<in_WakeRecurring:TEXT:4:>|WI=<in_WakeupID:TEXT:20:>|RC=<in_WakeupResult:TEXT:20:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" EQ "TRUE"
		Return

	ContainsSTR "RC=CLEARED" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Assign RecType "WakeInfo"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>WAKEINFO|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|GI=<in_GuestID:TEXT:20:>|WT=<in_WakeupTime:TIME:4:HHMM>|WD=<in_WakeupDate:DATE:8:YYYYMMDD>|RE=<in_WakeRecurring:TEXT:4:>|WI=<in_WakeupID:TEXT:20:>|RC=<in_WakeupResult:TEXT:20:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" EQ "TRUE"
		Return

	ContainsSTR "RC=DELIVERYOK" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Assign RecType "WakeInfo"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>WAKEINFO|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|GI=<in_GuestID:TEXT:20:>|WT=<in_WakeupTime:TIME:4:HHMM>|WD=<in_WakeupDate:DATE:8:YYYYMMDD>|RE=<in_WakeRecurring:TEXT:4:>|WI=<in_WakeupID:TEXT:20:>|RC=<in_WakeupResult:TEXT:20:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" EQ "TRUE"
		Return

	ContainsSTR "RC=DELIVERYFAIL" "$(ReceivedRec)" "FALSE"
	if "$(_G_RESULT)" EQ "TRUE"
		Assign RecType "WakeInfo"
	if "$(_G_RESULT)" EQ "TRUE"
		AssignAsIs _G_IN_RECORDFORMAT "<#2>WAKEINFO|TE=<in_Tenant:TEXT:20:>|RN=<in_Room:TEXT:7:>|GI=<in_GuestID:TEXT:20:>|WT=<in_WakeupTime:TIME:4:HHMM>|WD=<in_WakeupDate:DATE:8:YYYYMMDD>|RE=<in_WakeRecurring:TEXT:4:>|WI=<in_WakeupID:TEXT:20:>|RC=<in_WakeupResult:TEXT:20:>|SY=<in_Sync:TEXT:10:>|<#3><in_BCC:TEXT:1:LJ,SP>"
	if "$(_G_RESULT)" EQ "TRUE"
		Return

Return
; ************************************************************************


; ************************************************************************
;  HandleMaidStatus
;    This label is called when creating a Maid Status record
:HandleMaidStatus

	CreateRoomStatus "$(in_Room)" "$(in_Status)" "$(in_MaidID)"

Return
; ************************************************************************


; ************************************************************************
;  HandleMiniBar
;    This label is called when creating a Minibar record
:HandleMiniBar

	CreateMiniBar "$(in_Room)" "$(in_MaidID)" "$(in_ItemID)" "$(in_Quantity)" "0" ""

Return
; ************************************************************************


; ************************************************************************
;  HandleVoiceMsg
;    This label is called when creating a Message Waiting record
:HandleVoiceMsg

	; Create Message Waiting
	Assign WorkVal "FALSE"

	if "$(in_MsgCount)" NE "00"
		Assign WorkVal "TRUE"

	CreateMessageWaiting "$(in_Room)" "$(WorkVal)"

Return
; ************************************************************************


; ************************************************************************
;  HandleWakeInfo
;    This label is called when creating a Wakeup record
:HandleWakeInfo

	if "$(f_WaitingForWakeupReponse)" EQ "TRUE"
		Call HandleWakeInfo_CheckRoom

	; If there is no Guest ID it is a reply to one of our records
	if "$(in_GuestID)" EQ ""
		Return

	if "$(in_WakeupResult)" EQ "DELIVERYOK"
		Echo If: Creating Wakeup Delivery OK for room $(in_Room). Date: "<in_WakeupDate:DATE:8:YYYYMMDD>" Time: "<in_WakeupTime:TIME:4:HHMM>"
	if "$(in_WakeupResult)" EQ "DELIVERYOK"
		CreateWakeupDelivered "$(in_Room)" "" "<in_WakeupDate:DATE:8:YYYYMMDD>" "<in_WakeupTime:TIME:4:HHMM>"

	if "$(in_WakeupResult)" EQ "DELIVERYFAIL"
		Echo If: Creating Wakeup Delivery FAIL for room $(in_Room). Date: "<in_WakeupDate:DATE:8:YYYYMMDD>" Time: "<in_WakeupTime:TIME:4:HHMM>"
	if "$(in_WakeupResult)" EQ "DELIVERYFAIL"
		CreateWakeupFailed "$(in_Room)" "" "<in_WakeupDate:DATE:8:YYYYMMDD>" "<in_WakeupTime:TIME:4:HHMM>"

	if "$(in_WakeupResult)" EQ "SET"
		Echo If: Creating Set Wakeup for Room $(in_Room) - Date: "<in_WakeupDate:DATE:8:YYYYMMDD>" - Time: "<in_WakeupTime:TIME:4:HHMM>"
	if "$(in_WakeupResult)" EQ "SET"
		CreateSetWakeup "$(in_Room)" "<in_WakeupDate:DATE:8:YYYYMMDD>" "<in_WakeupTime:TIME:4:HHMM>"

	if "$(in_WakeupResult)" EQ "CLEARED"
		Echo If: Clearing Wakeup for Room $(in_Room) - Date: "<in_WakeupDate:DATE:8:YYYYMMDD>" - Time: "<in_WakeupTime:TIME:4:HHMM>"
	if "$(in_WakeupResult)" EQ "CLEARED"
		CreateClearWakeup "$(in_Room)" "<in_WakeupDate:DATE:8:YYYYMMDD>" "<in_WakeupTime:TIME:4:HHMM>"

	Return

:HandleWakeInfo_CheckRoom

	if "$(in_Room)" EQ "$(f_WakeupRoom)"
		Assign f_GotWakeupResponse "TRUE"
	if "$(in_Room)" NE "$(f_WakeupRoom)"
		Echo Db: Got WakeInfo but not for the correct room

Return
; ************************************************************************


; ************************************************************************
;  HandleExtensionFacilities
;    This label is called when we need to check an Extensions facilities
:HandleExtensionFacilities

	ContainsStr "VOICE" "<_EV_EXTNFACILITIES:TEXT:255:UC>" "FALSE"
	if "$(_G_RESULT)" NE "TRUE"
		Goto IgnoreRecord

Return
; ************************************************************************


; ************************************************************************
;  SendRecord
;   This label is called when we have a record that we need to send to the
;   client.
:SendRecord

	; Send the record.
	Echo Tx: $(SendRec)
	Send $(SendRec)

:SendRecord_Start

	Assign f_ReceivedWhileSending "FALSE"
	StartWaitTimer 5

:SendRecord_WaitForACK

	ReadFromPort 1

	if "$(_PORTCHARS)" EQ "<#2>"
		Assign ReceivedRec "<#2>"
	if "$(_PORTCHARS)" EQ "<#2>"
		Assign f_ReceivedWhileSending "TRUE"
	if "$(_PORTCHARS)" EQ "<#2>"
		Call ReceiveRecord

	if "$(f_ReceivedWhileSending)" EQ "TRUE"
		Goto SendRecord_Start
	
	if "$(_PORTCHARS)" NE ""
		Echo Rx: $(_PORTCHARS)

	if "$(_PORTCHARS)" EQ "<#6>"
		Goto SendRecord_GotACK

	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Echo Er: Timed out waiting for ACK to record
	if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
		Goto SendRecord

	Goto SendRecord_WaitForACK

:SendRecord_GotACK

	Sleep 2000

Return
; ************************************************************************


; ************************************************************************
;  HandleOKAndExit
;   This label is called when we have completed sending a record and need
;   to flag it as processed to move on to the next event.
:HandleOKAndExit

	FlagProcessed OK

Exit
; ************************************************************************


; ************************************************************************
;  IgnoreRecord
;   This label is called when we are not interested in a particular record
;   and need to flag it as processed to move on to the next event.
:IgnoreRecord

	FlagProcessed OK

Exit
; ************************************************************************