; Coded For: 50.0.0.1
; Script Version: 50.0.0.1
; ************************************************************************
;
;  This is the HI configuration script for interfacing to an NEC Philips
;  Mymail.net/ActiveVoice voicemail system.
;
;                                                             ph-20080515
;
;  Modifications - AU - 17/10/2013
;	* Updated to utilise V50 specific features
;
;  Modifications - AU - 19/04/2011
;	* Modified labels with Language Codes to translate from a FIAS interface
;	* Modified definition variables
;
; ************************************************************************
;                     Copyright © 2013, TigerTMS Ltd.                     
; ************************************************************************
;
define SendRec
define ReceiveRec
define RecType
define WorkVal
;
define f_Sending
;
define g_Folio
define g_LangCode
define g_Password
;
define in_Room
define in_MWStatus
;
; ************************************************************************
;  INIT
;   This part of the script is run once at the program start-up
;
:INIT

Assign f_Sending "FALSE"

OpenPort

Exit
; ************************************************************************


; ************************************************************************
;  CallRecord
;   The script is executed from this label when we have a call record to
;   send.
:CallRecord

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomStatus
;   The script is executed from this label when we have a room status
;   event to send.
:RoomStatus

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Minibar
;   The script is executed from this label when we have a minibar event
;   to send.
:Minibar

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  MessageWaiting
;   The script is executed from this label when we have a message waiting
;   event to send.
:MessageWaiting

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  WakeupCall
;   The script is executed from this label when we have a wakeup call
;   event to send.
:WakeupCall

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkin
;   The script is executed from this label when we have a checkin event to
;   send.
:Checkin

  ; OPT: If, for some *highly* unlikely reason, you do not want checkin
  ;      details to be sent to Mymail.net, uncomment this next line.
  //goto HandleOKAndExit

  Assign g_Folio "$(_EV_EXTNNUMBER)"
  Assign g_Password "$(_EV_EXTNNUMBER)"
  Assign g_LangCode "<_EV_CILANGCODE:TEXT:1:LJ,SP>"

  ; Build the record and its BCC character
  Assign SendRec "CheckIn   <_EV_EXTNNUMBER:TEXT:7:RJ,SP> <_EV_NAMEDISPLAY:TEXT:20:LJ,SP> <g_Folio:TEXT:4:LJ,SP> <g_PassworD:TEXT:4:LJ,SP> <g_LangCode:TEXT:1:LJ,SP><#3>"
  GenerateBCCChar "" "$(SendRec)"
  Assign SendRec "<#2>$(SendRec)$(_G_BCC)"

  ; Go on to send it
  call SendRecord
goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  Checkout
;   The script is executed from this label when we have a checkout event
;   to send.
:Checkout
  ; Build the record and its BCC character
  Assign SendRec "CheckOut  <_EV_EXTNNUMBER:TEXT:7:RJ,SP><#3>"
  GenerateBCCChar "" "$(SendRec)"
  Assign SendRec "<#2>$(SendRec)$(_G_BCC)"

  ; Go on to send it
  call SendRecord
goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  ClassOfService
;   The script is executed from this label when we have a class of service
;   event to send.
:ClassOfService

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomUpdate
;   The script is executed from this label when we have a room update
;   event to send.
:RoomUpdate

  Assign g_Folio "$(_EV_EXTNNUMBER)"
  Assign g_Password "$(_EV_EXTNNUMBER)"
  Assign g_LangCode "<_EV_RULANGCODE:TEXT:1:LJ,SP>"

  ; Build the record and its BCC character
  Assign SendRec "ChangeGst <_EV_EXTNNUMBER:TEXT:7:RJ,SP> <_EV_NAMEDISPLAY:TEXT:20:LJ,SP> <g_Folio:TEXT:4:LJ,SP>      <g_LangCode:TEXT:1:LJ,SP><#3>"
  GenerateBCCChar "" "$(SendRec)"
  Assign SendRec "<#2>$(SendRec)$(_G_BCC)"

  ; Go on to send it
  call SendRecord
goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  BudgetLimit
;   The script is executed from this label when we have a Budget Limit
;   event to send.
:BudgetLimit

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  RoomTransfer
;   The script is executed from this label when we have a Room Transfer
;   event to send.
:RoomTransfer

  ; OPT: If, for some *highly* unlikely reason, you do not want room
  ;      transfer details to be sent to Mymail.net, uncomment this next
  ;      line.
  ;goto HandleOKAndExit

  ; Build the record
  Assign SendRec "MoveGst   <_EV_EXTNNUMBER:TEXT:7:RJ,SP> <_EV_TRDESTEXTNNUMBER:TEXT:7:RJ,SP><#3>"
  GenerateBCCChar "" "$(SendRec)"
  Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
  
  Call SendRecord

goto HandleOKAndExit

; ************************************************************************


; ************************************************************************
;  ExtraGuest
;   The script is executed from this label when we have a Extra Guest
;   event to send.
:ExtraGuest

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  DoNotDisturb
;   The script is executed from this label when we have a Do Not Disturb
;   event to send.
:DoNotDisturb

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  PIN
;   The script is executed from this label when we have a PIN event to
;   send.
:PIN

goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  DDI
;   The script is executed from this label when we have a DDI event to
;   send.
:DDI

;goto HandleOKAndExit
; ************************************************************************


; ************************************************************************
;  PeriodicCheck
;   The script is executed from this label periodically.
; ************************************************************************
:PeriodicCheck

  Assign SendRec "PMSTick   <#3>"
  GenerateBCCChar "" "$(SendRec)"
  Assign SendRec "<#2>$(SendRec)$(_G_BCC)"
  
  Call SendRecord
Exit
; ************************************************************************


; ************************************************************************
;  ReceiveRecord
; ************************************************************************
:ReceiveRecord

; Allow up to 5 seconds for the record to come in.
StartWaitTimer 5

; We have already received the STX and it is in ReceivedRec
:ReceiveRecord_ReadPort

ReadFromPort 1

; If there is one, add it to the record.
if "$(_PORTCHARS)" NE ""
  Assign ReceiveRec "$(ReceiveRec)" "$(_PORTCHARS)"

; If it is an ETX, we need to process the record
if "$(_PORTCHARS)" EQ "<#3>"
  goto ReadBCC

; if our 5 seconds are up, ignore what we have so far.
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
	goto QUITRECEIVING

goto ReceiveRecord_ReadPort

:ReadBCC

ReadFromPort 1 2

if "$(_PORTCHARS)" NE ""
	Assign ReceiveRec "$(ReceiveRec)" "$(_PORTCHARS)"
if "$(_PORTCHARS)" EQ ""
	Assign ReceiveRec "$(ReceiveRec)" "<#0>"

:FINISHEDRECEIVING

if "<ReceiveRec:TEXT:9:LJ,SP>" EQ "<#2>VoiceMsg"
  Assign RecType "MW"

if "$(RecType)" EQ "MW"
  assignasis _G_IN_RECORDFORMAT "<#2>VoiceMsg <in_Room:TEXT:7:LJ,SP> <in_MWStatus:TEXT:2:LJ,ZP><#3>"

if "$(RecType)" EQ ""
  goto ACKANDIGNORERECORD

; Extract the fields from the record and process them to create the events.
Assign _G_IN_RECORD "$(ReceiveRec)"
ParseInRecord
if "$(_G_IN_RECORDPARSEERROR)" EQ "TRUE"
	goto ReceiveError

if "$(RecType)" EQ "MW"
	call CreateMWEvent

:ACKANDIGNORERECORD

Echo Rx: $(ReceiveRec)
Send <#6>
Echo Tx: <#6>

goto SKIPQUIT

:QUITRECEIVING

Echo Rx: $(ReceiveRec)

:SKIPQUIT

; If we are receiving part way through sending a record, we need to setup
; the wait timer again and return.
if "$(f_Sending)" EQ "TRUE"
  StartWaitTimer 5
if "$(f_Sending)" EQ "TRUE"
  Return

; If we are not part way through sending we need to exit the script.
Exit

; ************************************************************************
;  ReceiveError
;    Sent here when an error is found in the formatting of the record.
; ************************************************************************
:ReceiveError
  Echo Error with Received Record - Record ignored
Exit
; ************************************************************************

; ************************************************************************
;  CreateMWEvent
;    Creates the message waiting event.
:CreateMWEvent

Assign WorkVal "FALSE"
if "<in_MWStatus:TEXT:2:>" NE "00"
	Assign WorkVal "TRUE"

CreateMessageWaiting "$(in_Room)" "$(WorkVal)"

Return
; ************************************************************************


; ************************************************************************
;  SendRecord
;    We arrive at this point when we have a record to send and we have
;    built it ready to send.
; ************************************************************************
:SendRecord

; Set a sending flag for use later
Assign f_Sending "TRUE"

; Send the record and display it
Send $(SendRec)
Echo Tx: $(SendRec)

; Start the await ACK timer
StartWaitTimer 10

:AWAITACKTOREC

ReadFromPort 1

; Timer has expired so we're obviously not being sent anything.  Quit
if "$(_WAITTIMEEXPIRED)" EQ "TRUE"
  Goto SENDRECORD

; If we haven't had a response go back and wait
if "$(_PORTCHARS)" EQ ""
  Goto AWAITACKTOREC

; If we get an ACK flag as handled and exit.
if "$(_PORTCHARS)" EQ "<#6>"
  Echo Rx: <#6>
if "$(_PORTCHARS)" EQ "<#6>"
  CALL HANDLEOK
if "$(_PORTCHARS)" EQ "<#6>"
  Return

; If we get an STX, we need to receive an incoming record
if "$(_PORTCHARS)" EQ "<#2>"
  Assign ReceiveRec "<#2>"
if "$(_PORTCHARS)" EQ "<#2>"
  call ReceiveRecord

Goto AWAITACKTOREC

; ************************************************************************
;  CheckIncoming
;    Execution is periodically carried out from here by the program to
;    check for incoming data during idle times.
; ************************************************************************
:CheckIncoming

Assign f_Sending "FALSE"

; Read a character
ReadFromPort 1

; If there is one and it is STX, start the receive record with it.
if "$(_PORTCHARS)" EQ "<#2>"
  Assign ReceiveRec "<#2>"
if "$(_PORTCHARS)" EQ "<#2>"
  goto ReceiveRecord

; If there are no characters, we have finished
if "$(_PORTCHARS)" NE ""
  Echo Rx: $(_PORTCHARS)


; If it is an ENQ, Send an ACK and stop receiving.
if "$(_PORTCHARS)" EQ "<#5>"
	Send <#6>
if "$(_PORTCHARS)" EQ "<#5>"
	Echo Tx: <#6>

; Release back to the program, we have not received an SOH
GOTO FINISHED

; ************************************************************************
; HandleOKAndExit
;  Flag that the processing was successful and exit the script.
:HandleOKAndExit

FLAGPROCESSED OK
Exit
; ************************************************************************

; ************************************************************************
; HANDLEOK
;  Flag that the processing was successful.
; ************************************************************************
:HANDLEOK
FLAGPROCESSED OK
RETURN

; ************************************************************************
; FINISHED
;  End the script.
; ************************************************************************
:FINISHED
EXIT

